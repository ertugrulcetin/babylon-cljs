shadow$provide.module$node_modules$$babylonjs$core$Misc$stringTools=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.StringTools=exports.PadNumber=exports.DecodeBase64ToBinary=exports.DecodeBase64ToString=exports.EncodeArrayBufferToBase64=exports.Decode=exports.StartsWith=exports.EndsWith=void 0;global=(str,suffix)=>str.endsWith(suffix);exports.EndsWith=global;require=(str,suffix)=>str?str.startsWith(suffix):!1;exports.StartsWith=require;module=
buffer=>{if("undefined"!==typeof TextDecoder)return(new TextDecoder).decode(buffer);let result="";for(let i=0;i<buffer.byteLength;i++)result+=String.fromCharCode(buffer[i]);return result};exports.Decode=module;const EncodeArrayBufferToBase64=buffer=>{let output="";let chr3,enc1,enc3,enc4,i=0;const bytes=ArrayBuffer.isView(buffer)?new Uint8Array(buffer.buffer,buffer.byteOffset,buffer.byteLength):new Uint8Array(buffer);for(;i<bytes.length;){var chr1=bytes[i++];buffer=i<bytes.length?bytes[i++]:Number.NaN;
chr3=i<bytes.length?bytes[i++]:Number.NaN;enc1=chr1>>2;chr1=(chr1&3)<<4|buffer>>4;enc3=(buffer&15)<<2|chr3>>6;enc4=chr3&63;isNaN(buffer)?enc3=enc4=64:isNaN(chr3)&&(enc4=64);output+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d".charAt(enc1)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d".charAt(chr1)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d".charAt(enc3)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d".charAt(enc4)}return output};
exports.EncodeArrayBufferToBase64=EncodeArrayBufferToBase64;const DecodeBase64ToString=base64Data=>atob(base64Data);exports.DecodeBase64ToString=DecodeBase64ToString;const DecodeBase64ToBinary=base64Data=>{base64Data=atob(base64Data);const bufferLength=base64Data.length,bufferView=new Uint8Array(new ArrayBuffer(bufferLength));for(let i=0;i<bufferLength;i++)bufferView[i]=base64Data.charCodeAt(i);return bufferView.buffer};exports.DecodeBase64ToBinary=DecodeBase64ToBinary;const PadNumber=(num,length)=>
{for(num=String(num);num.length<length;)num="0"+num;return num};exports.PadNumber=PadNumber;exports.StringTools={EndsWith:global,StartsWith:require,Decode:module,EncodeArrayBufferToBase64,DecodeBase64ToString,DecodeBase64ToBinary,PadNumber}}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Misc$stringTools.js.map
