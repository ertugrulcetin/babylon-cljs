{"version":3,"sources":["shadow/remote/runtime/obj_support.cljc"],"mappings":"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","names":["this__5343__auto__","k__5344__auto__","this__5345__auto__","k20724","else__5346__auto__","G__20757","cljs.core/Keyword","obj","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__20779","vec__20780","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__20723","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this20726","other20727","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__20896","this__5351__auto__","k__5352__auto__","pred__20905","cljs.core/keyword-identical?","expr__20906","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","shadow.remote.runtime.obj-support/Reference","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__20739","extmap__5385__auto__","G__20917","cljs.core/record?","shadow.remote.runtime.obj-support/->Reference","shadow.remote.runtime.obj-support/map->Reference","shadow.remote.runtime.obj-support/obj-ref","shadow.remote.runtime.obj-support/obj-ref?","result","shadow.remote.runtime.obj-support/now","js/Date.now","shadow.remote.runtime.obj-support/next-oid","cljs.core/random-uuid","shadow.remote.runtime.obj-support/register*","state","oid","obj-info","ts","entry","clojure.datafy/datafy","cljs.core/assoc-in","shadow.remote.runtime.obj-support/obj-type-string","cljs.core.pr_str","cljs.core/type","p__20978","map__20983","cljs.core/--destructure-map","shadow.remote.runtime.obj-support/get-data-type","summary","data","e20984","cljs.core/boolean?","cljs.core/Symbol","cljs.core/map?","cljs.core/set?","cljs.core/list?","cljs.core/seq?","e","p__21006","map__21007","shadow.remote.runtime.obj-support/merge-source-info","cljs.core.merge","cljs.core/select-keys","p__21008","p__21009","map__21014","map__21015","shadow.remote.runtime.obj-support/inspect-entry!","state-ref","this","added-at","$","inspect-fn","cljs.core/deref","p__21018","map__21019","shadow.remote.runtime.obj-support/obj-describe*","temp__5808__auto__","cljs.core.get_in","cljs.core.swap_BANG_","shadow.remote.runtime.obj-support/handler-with-object","handler-fn","p__21023","p__21024","map__21025","map__21026","runtime","op","msg","cljs.core/not","shadow.remote.runtime.shared/reply","e21028","new-oid","G__21033","G__21034","G__21035","shadow.remote.runtime.obj-support/register","reply-msg","G__21039","js/console.warn","G__21029","G__21030","G__21031","shadow.remote.runtime.obj-support/obj-get-value","p__21040","map__21041","shadow.remote.runtime.obj-support/default-max-print-size","shadow.remote.runtime.obj-support/obj-edn","p__21044","p__21045","map__21046","map__21047","limit","lw","shadow.remote.runtime.writer/limit-writer","cljs.core/pr-writer","cljs.core/pr-opts","shadow.remote.runtime.writer/get-string","shadow.remote.runtime.obj-support/obj-pprint","p__21053","p__21054","map__21056","map__21057","cljs.pprint.pprint","shadow.remote.runtime.obj-support/obj-edn-limit","p__21061","p__21062","map__21063","map__21064","shadow.remote.runtime.writer/pr-str-limit","shadow.remote.runtime.obj-support/obj-str","p__21065","map__21068","shadow.remote.runtime.obj-support/obj-ex-str","p__21070","map__21072","ex","js/Error","cljs.repl/error->str","cljs.core/second","shadow.remote.runtime.obj-support/exception?","x","shadow.remote.runtime.obj-support/simple-value?","val","cljs.core/meta","cljs.core/coll?","cljs.core/empty?","shadow.remote.runtime.obj-support/rank-predicates","cljs.core/nil?","cljs.core/number?","cljs.core/string?","cljs.core/keyword?","cljs.core/symbol?","shadow.remote.runtime.obj-support/rank-val","cljs.core/reduce-kv","res","idx","pred","cljs.core/reduced","shadow.remote.runtime.obj-support/smart-comp","a","b","e21110","cljs.core/compare","ar","br","shadow.remote.runtime.obj-support/attempt-to-sort","coll","cljs.core/vec","e21141","cljs.core.sort","p__21166","map__21168","shadow.remote.runtime.obj-support/cache-view-order","view-order","or__5045__auto__","shadow.remote.runtime.obj-support/obj-nav","p__21195","p__21196","p__21197","map__21202","map__21203","map__21204","nav","clojure.datafy/nav","cljs.core/keys","key","cljs.core.ex_info","shadow.remote.runtime.obj-support/obj-fragment","p__21230","p__21231","p__21232","map__21233","map__21234","map__21235","start","num","val-limit","map__21243","key-limit","end","x__5133__auto__","y__5134__auto__","idxs","cljs.core.range","fragment","m","e21244","e21247","p__21253","map__21254","shadow.remote.runtime.obj-support/obj-request","request-op","real-handler","G__21256","p__21259","p__21260","map__21261","map__21262","shadow.remote.runtime.obj-support/obj-describe","temp__5802__auto__","p__21264","p__21265","map__21266","map__21267","shadow.remote.runtime.obj-support/obj-forget","svc","cljs.core/update","cljs.core/dissoc","p__21268","map__21269","shadow.remote.runtime.obj-support/obj-forget-all","cljs.core/assoc","shadow.remote.runtime.obj-support/basic-gc!","objs-to-drop","cljs.core/vals","cljs.core.sort_by","cljs.core/reverse","cljs.core.drop","cljs.core.map","cljs.core.update","p__21274","map__21276","shadow.remote.runtime.obj-support/add-inspector","cljs.core/fn?","cljs.core/conj","shadow.remote.runtime.obj-support/start","cljs.core.atom","p__21290","map__21291","p__21296","map__21298","p__21300","map__21301","p__21302","map__21303","p__21311","map__21312","p1__21287#","p1__21277#","p1__21283#","p1__21278#","p1__21279#","p1__21284#","p1__21280#","p1__21288#","p1__21286#","p1__21281#","p1__21282#","p1__21285#","shadow.remote.runtime.api/add-extension","p__21314","map__21315","shadow.remote.runtime.obj-support/get-tap-history","p1__21313#","cljs.core.filter","cljs.core.take","p__21317","map__21318","cljs.core/first","p__21322","map__21323","shadow.remote.runtime.obj-support/get-ref","obj-id","p__21324","map__21325","shadow.remote.runtime.obj-support/stop","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.obj-support\n  (:require\n    [clojure.datafy :as d]\n    [clojure.pprint :refer (pprint)]\n    [clojure.spec.alpha :as spec]\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.writer :as lw]\n    ;; FIXME: I do not like importing these here\n    ;; need to extract shadow-cljs functions if I ever move shadow.remote out\n    ;; cljs.repl has way too much other stuff on the CLJ side not error related we don't really need here\n    ;; should just have one namespace only concerned with formatting errors\n    ;; maybe even as separate plugin\n    #?@(:clj [[shadow.cljs.devtools.errors :refer (error-format)]\n              [shadow.jvm-log]]\n        :cljs [[cljs.repl :refer (error->str)]]))\n  #?(:clj (:import [java.util UUID])))\n\n(defrecord Reference [obj])\n\n(defn obj-ref [obj]\n  (when (some? obj)\n    (Reference. obj)))\n\n(defn obj-ref? [result]\n  (instance? Reference result))\n\n(defn now []\n  #?(:clj\n     (System/currentTimeMillis)\n     :cljs\n     (js/Date.now)))\n\n(defn next-oid []\n  #?(:clj\n     (str (UUID/randomUUID))\n     :cljs\n     (str (random-uuid))))\n\n(defn register*\n  [state oid obj obj-info]\n\n  (let [ts\n        (now)\n\n        entry\n        {:obj obj\n         :data (d/datafy obj)\n         :obj-info obj-info\n         :added-at ts\n         :access-at ts ;; tracking that for GC purposes\n         :oid oid}]\n\n    (assoc-in state [:objects oid] entry)))\n\n(declare register)\n\n(defn obj-type-string [obj]\n  (if (nil? obj)\n    \"nil\"\n    #?(:clj\n       (str (when (fn? obj) \"function: \") (-> (class obj) (.getName)))\n       :cljs\n       (pr-str (type obj)))))\n\n\n(defn get-data-type [summary {:keys [data] :as entry}]\n  (try\n    (cond\n      (nil? data)\n      (assoc summary :data-type :nil)\n\n      (string? data)\n      (assoc summary :data-type :string :data-count (count data))\n\n      (boolean? data)\n      (assoc summary :data-type :boolean)\n\n      (number? data)\n      (assoc summary :data-type :number)\n\n      (keyword? data)\n      (assoc summary :data-type :keyword)\n\n      (symbol? data)\n      (assoc summary :data-type :symbol)\n\n      (map? data)\n      (assoc summary :data-type :map :data-count (count data))\n\n      (vector? data)\n      (assoc summary :data-type :vec :data-count (count data))\n\n      (set? data)\n      (assoc summary :data-type :set :data-count (count data))\n\n      (list? data)\n      (assoc summary :data-type :list :data-count (count data))\n\n      ;; lazy seqs\n      (seq? data)\n      (assoc summary :data-type :seq)\n\n      :else\n      (assoc summary :data-type :unsupported))\n\n    (catch #?(:cljs :default :clj Exception) e\n      ;; just in case any of the above fail, leaving marker for debugging later\n      ;; intentionally dropping exception, since handling it breaks flow\n      #?(:clj (shadow.jvm-log/warn-ex e ::get-data-type-fail))\n\n      (assoc summary :data-type :unsupported :data-type-fail true))))\n\n(defn merge-source-info [summary {:keys [obj-info]}]\n  (merge summary (select-keys obj-info [:ns :line :column :label])))\n\n(defn inspect-entry!\n  [{:keys [state-ref] :as this}\n   {:keys [obj data added-at] :as entry}]\n\n  (-> {:added-at added-at\n       :datafied (not (identical? data obj))\n       :obj-type (obj-type-string obj)\n       :supports #{}}\n      (get-data-type entry)\n      (merge-source-info entry)\n      (as-> $\n        (reduce\n          (fn [summary inspect-fn]\n            (inspect-fn summary entry))\n          $\n          (:inspectors @state-ref)))))\n\n(defn obj-describe*\n  [{:keys [state-ref] :as this}\n   oid]\n  (when-some [entry (get-in @state-ref [:objects oid])]\n    (swap! state-ref assoc-in [:objects oid :access-at] (now))\n    (inspect-entry! this entry)))\n\n(defn handler-with-object\n  [handler-fn]\n  (fn [{:keys [state-ref runtime] :as this}\n       {:keys [op oid] :as msg}]\n\n    (let [entry (get-in @state-ref [:objects oid])]\n      (if-not entry\n        (shared/reply runtime msg {:op :obj-not-found :oid oid})\n\n        (try\n          (swap! state-ref assoc-in [:objects oid :access-at] (now))\n\n          (let [result (handler-fn this entry msg)]\n\n            ;; FIXME: add support for generic async results\n            ;; all handlers should already be sync but allow async results\n            (if-not (obj-ref? result)\n              (shared/reply runtime msg\n                {:op :obj-result\n                 :oid oid\n                 :result result})\n\n              (let [new-oid\n                    (register this (:obj result) {})\n\n                    reply-msg\n                    (-> {:op :obj-result-ref\n                         :oid oid\n                         :ref-oid new-oid}\n                        (cond->\n                          ;; only send new-obj :summary when requested\n                          (:summary msg)\n                          (assoc :summary (obj-describe* this new-oid))))]\n                (shared/reply runtime msg reply-msg))))\n\n          (catch #?(:clj Exception :cljs :default) e\n            #?(:cljs (js/console.warn \"action-request-action failed\" (:obj entry) e)\n               :clj (shadow.jvm-log/warn-ex e ::obj-request-failed msg))\n            (shared/reply runtime msg\n              {:op :obj-request-failed\n               :oid oid\n               :msg msg\n               :ex-oid (register this e {:msg msg})})))))))\n\n(def obj-get-value\n  (handler-with-object\n    (fn [this {:keys [obj] :as entry} msg]\n      obj)))\n\n;; 1meg?\n(def default-max-print-size (* 1 1024 1024))\n\n(def obj-edn\n  (handler-with-object\n    (fn [this {:keys [data] :as entry} {:keys [limit] :or {limit default-max-print-size} :as msg}]\n      (let [lw (lw/limit-writer limit)]\n        #?(:clj\n           (print-method data lw)\n           :cljs\n           (pr-writer data lw (pr-opts)))\n        (lw/get-string lw)))))\n\n(def obj-pprint\n  (handler-with-object\n    (fn [this {:keys [data] :as entry} {:keys [limit] :or {limit default-max-print-size} :as msg}]\n      ;; CLJ pprint for some reason doesn't run out of memory when printing circular stuff\n      ;; but it never finishes either\n      (let [lw (lw/limit-writer limit)]\n        (pprint data lw)\n        (lw/get-string lw)))))\n\n(def obj-edn-limit\n  (handler-with-object\n    (fn [this {:keys [data] :as entry} {:keys [limit] :as msg}]\n      (lw/pr-str-limit data limit))))\n\n(def obj-str\n  (handler-with-object\n    (fn [this {:keys [obj] :as entry} msg]\n      (str obj)\n      )))\n\n(def obj-ex-str\n  (handler-with-object\n    (fn [this {ex :obj :as entry} msg]\n      #?(:cljs\n         (if (instance? js/Error ex)\n           (error->str ex)\n           (str \"Execution error:\\n\"\n                ;; can be any object, really no hope in making this any kind of readable\n                ;; capping it so throwing something large doesn't blow up the REPL\n                \"  \" (second (lw/pr-str-limit ex 200)) \"\\n\"\n                \"\\n\"))\n\n         :clj\n         (error-format ex)))))\n\n(defn exception? [x]\n  #?(:clj (instance? java.lang.Throwable x)\n     ;; everything can be thrown in JS\n     ;; (throw \"x\")\n     ;; (throw (js/Promise.resolved \"x\"))\n     :cljs true ;; (instance? js/Error x)\n     ))\n\n(defn simple-value? [val]\n  ;; anything that serializes to less than 32 bytes (ref-id is md5 hex string)\n  ;; should just be sent as is, bypassing all the ref logic\n  (or (nil? val)\n      (boolean? val)\n      (number? val)\n      (keyword? val)\n      ;; symbols only without meta\n      (and (symbol? val) (nil? (meta val)))\n      ;; small strings only\n      (and (string? val) (> 64 (count val)))\n      ;; empty cols with no meta\n      (and (coll? val) (empty? val) (nil? (meta val)))))\n\n(def rank-predicates\n  [nil?\n   boolean?\n   number?\n   string?\n   keyword?\n   symbol?\n   vector?\n   map?\n   list?])\n\n(defn rank-val [val]\n  (reduce-kv\n    (fn [res idx pred]\n      (if (pred val)\n        (reduced idx)\n        res))\n    -1\n    rank-predicates))\n\n(defn smart-comp [a b]\n  (try\n    (compare a b)\n    (catch #?(:clj Exception :cljs js/Error) e\n      (let [ar (rank-val a)\n            br (rank-val b)]\n        (compare ar br)))))\n\n(defn attempt-to-sort [coll]\n  (vec\n    (try\n      (sort smart-comp coll)\n      (catch #?(:clj Exception :cljs :default) e\n        coll))))\n\n(defn cache-view-order [state-ref {:keys [oid view-order]} coll]\n  (or view-order\n      (let [view-order (attempt-to-sort coll)]\n        (swap! state-ref assoc-in [:objects oid :view-order] view-order)\n        view-order\n        )))\n\n(def obj-nav\n  (handler-with-object\n    (fn [{:keys [state-ref]} {:keys [data] :as entry} {:keys [idx] :as msg}]\n      (cond\n        (or (vector? data) (list? data))\n        (let [val (nth data idx)\n              nav (d/nav data idx val)]\n          (obj-ref nav))\n\n        (map? data)\n        (let [view-order (cache-view-order state-ref entry (keys data))\n              key (nth view-order idx)\n              val (get data key)\n              nav (d/nav data key val)]\n          (obj-ref nav))\n\n        (set? data)\n        (let [view-order (cache-view-order state-ref entry data)\n              val (nth view-order idx)\n              nav (d/nav data idx val)]\n          (obj-ref nav))\n\n        :else\n        (throw (ex-info \"nav not supported?\" entry))))))\n\n(def obj-fragment\n  (handler-with-object\n    (fn\n      [{:keys [state-ref]}\n       {:keys [data] :as entry}\n       {:keys [start num val-limit]\n        :or {val-limit 100}\n        :as msg}]\n      (cond\n        (map? data)\n        (let [{:keys [key-limit] :or {key-limit 100}} msg\n              view-order (cache-view-order state-ref entry (keys data))\n              end (min (count view-order) (+ start num))\n              idxs (range start end)\n              fragment\n              (reduce\n                (fn [m idx]\n                  (let [key (nth view-order idx)\n                        val (get data key)]\n                    (assoc m idx {:key (try\n                                         (lw/pr-str-limit key key-limit)\n                                         (catch #?(:clj Exception :cljs :default) e\n                                           [true \"... print failed ...\"]))\n                                  :val (try\n                                         (lw/pr-str-limit val val-limit)\n                                         (catch #?(:clj Exception :cljs :default) e\n                                           [true \"... print failed ...\"]))})))\n                {}\n                idxs)]\n\n          fragment)\n\n        (vector? data)\n        (let [end (min (count data) (+ start num))\n              idxs (range start end)\n              fragment\n              (reduce\n                (fn [m idx]\n                  (let [val (nth data idx)]\n                    (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                {}\n                idxs)]\n          fragment)\n\n        (list? data)\n        (let [end (min (count data) (+ start num))\n              idxs (range start end)\n              fragment\n              (reduce\n                (fn [m idx]\n                  (let [val (nth data idx)]\n                    (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                {}\n                idxs)]\n\n          fragment)\n\n        (set? data)\n        (let [view-order (cache-view-order state-ref entry data)\n              end (min (count view-order) (+ start num))\n              idxs (range start end)\n              fragment\n              (reduce\n                (fn [m idx]\n                  (let [val (nth view-order idx)]\n                    (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                {}\n                idxs)]\n\n          fragment)))))\n\n;; keeping this for backwards compatibility, found at least two libs using it\n;; https://github.com/eerohele/Tutkain/blob/34b1ae9147a28faa9badedf3818f69bbb9e0e4ef/clojure/src/tutkain/shadow.clj#L234\n;; https://github.com/mauricioszabo/repl-tooling/blob/b4962dd39b84d60cbd087a96ba6fccb1bffd0bd6/src/repl_tooling/repl_client/shadow_ws.cljs\n\n(defn obj-request [this {:keys [request-op] :as msg}]\n  (let [real-handler\n        (case request-op\n          :str obj-str\n          :ex-str obj-ex-str\n          :edn obj-edn\n          :edn-limit obj-edn\n          :pprint this\n          :nav this\n          :fragment obj-fragment)]\n    (real-handler this msg)))\n\n(comment\n  (defn pageable-seq [{:keys [data] :as desc}]\n    ;; data is always beginning of seq\n    (let [seq-state-ref\n          (atom {:tail data ;; track where we are at\n                 :realized []})]\n      (-> desc\n          (assoc :seq-state-ref seq-state-ref)\n          (assoc-in [:handlers :nav]\n            (fn [{:keys [idx]}]\n              ;; FIXME: should validate that idx is actually realized\n              (let [val (nth (:realized @seq-state-ref) idx)\n                    ;; FIXME: not sure there are many cases where lazy seqs actually have nav?\n                    nav (d/nav data idx val)]\n                (obj-ref nav))))\n          (assoc-in [:handlers :chunk]\n            (fn [{:keys [start num val-limit]\n                  :or {val-limit 100}\n                  :as msg}]\n\n              ;; need locking otherwise threads may realize more than once\n              ;; shouldn't be much of an issue but better be safe\n              (locking seq-state-ref\n                (let [{:keys [tail realized] :as seq-state} @seq-state-ref\n\n                      end (+ start num)\n                      missing (- end (count realized))\n\n                      [tail realized]\n                      (loop [tail tail\n                             realized realized\n                             missing missing]\n                        (if-not (pos? missing)\n                          [tail realized]\n                          (let [next (first tail)]\n                            (if (nil? next)\n                              [nil realized]\n                              (recur (rest tail) (conj realized next) (dec missing))))))\n\n                      idxs (range start (min end (count realized)))\n                      fragment\n                      (reduce\n                        (fn [m idx]\n                          (let [val (nth realized idx)]\n                            (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                        {}\n                        idxs)]\n\n                  (swap! seq-state-ref assoc :tail tail :realized realized)\n\n                  {:start start\n                   :realized (count realized)\n                   :fragment fragment\n                   :more? (or (> (count realized) end) (some? tail))})))))))\n\n  (def x (pageable-seq {:data (map (fn [x] (prn [:realize x]) x) (range 10))}))\n\n  (let [chunk (get-in x [:handlers :chunk])]\n    (chunk {:start 0 :num 5})\n    )\n\n  (let [chunk (get-in x [:handlers :chunk])]\n    (chunk {:start 5 :num 10})\n    ))\n\n(defn obj-describe\n  [{:keys [runtime] :as this}\n   {:keys [oid] :as msg}]\n  (if-let [summary (obj-describe* this oid)]\n    (shared/reply runtime msg {:op :obj-summary :oid oid :summary summary})\n    (shared/reply runtime msg {:op :obj-not-found :oid oid})))\n\n(defn obj-forget\n  [{:keys [state-ref] :as svc}\n   {:keys [oid] :as msg}]\n  (swap! state-ref update :objects dissoc oid))\n\n(defn obj-forget-all\n  [{:keys [state-ref] :as svc}\n   msg]\n  (swap! state-ref assoc :objects {}))\n\n(defn basic-gc! [state]\n  (let [objs-to-drop\n        (->> (:objects state)\n             (vals)\n             (sort-by :access-at)\n             (reverse)\n             (drop 100) ;; FIXME: make configurable\n             (map :oid))]\n\n    (reduce\n      (fn [state oid]\n        (update state :objects dissoc oid))\n      state\n      objs-to-drop)))\n\n(defn add-inspector\n  [{:keys [state-ref] :as this} inspect-fn]\n  {:pre [(fn? inspect-fn)]}\n  (swap! state-ref update :inspectors conj inspect-fn)\n  this)\n\n(defn start [runtime]\n  (let [state-ref\n        (atom {:objects {}\n               :inspectors #{}\n               :id-seq-ref 0})\n\n        svc\n        (-> {:runtime runtime\n             :state-ref state-ref}\n\n            (add-inspector\n              (fn [summary {:keys [obj] :as entry}]\n                (if-not (simple-value? obj)\n                  summary\n                  (update summary :supports conj :obj-get-value))))\n\n            (add-inspector\n              (fn [summary entry]\n                (update summary :supports conj :obj-str)))\n\n            (add-inspector\n              (fn [summary {:keys [obj] :as entry}]\n                (if (exception? obj)\n                  (update summary :supports conj :obj-ex-str)\n                  summary)))\n\n            ;; FIXME: maybe only support these for clojure types?\n            (add-inspector\n              (fn [summary entry]\n                (update summary :supports conj :obj-edn)))\n\n            (add-inspector\n              (fn [summary entry]\n                (update summary :supports conj :obj-edn-limit)))\n\n            (add-inspector\n              (fn [summary {:keys [data] :as entry}]\n                (if (or (coll? data) (seq? data))\n                  (update summary :supports conj :obj-pprint)\n                  summary)))\n\n            (add-inspector\n              (fn [summary {:keys [data] :as entry}]\n                (if (and (or (map? data) (vector? data) (set? data) (list? data))\n                         (seq data))\n                  (update summary :supports conj :obj-nav)\n                  summary)))\n\n            (add-inspector\n              (fn [summary {:keys [data] :as entry}]\n                (if (and (or (map? data) (vector? data) (set? data) (list? data))\n                         (seq data))\n                  (update summary :supports conj :obj-fragment)\n                  summary)))\n            )]\n\n    (p/add-extension runtime\n      ::ext\n      {:ops {:obj-describe #(obj-describe svc %)\n             :obj-request #(obj-request svc %)\n             :obj-edn #(obj-edn svc %)\n             :obj-get-value #(obj-get-value svc %)\n             :obj-edn-limit #(obj-edn-limit svc %)\n             :obj-str #(obj-str svc %)\n             :obj-ex-str #(obj-ex-str svc %)\n             :obj-pprint #(obj-pprint svc %)\n             :obj-nav #(obj-nav svc %)\n             :obj-fragment #(obj-fragment svc %)\n             :obj-forget #(obj-forget svc %)\n             :obj-forget-all #(obj-forget-all svc %)}\n       :on-idle #(swap! state-ref basic-gc!)})\n\n    svc))\n\n(defn get-tap-history [{:keys [state-ref] :as svc} num]\n  (->> (:objects @state-ref)\n       (vals)\n       (filter #(= :tap (get-in % [:obj-info :from])))\n       (sort-by :added-at)\n       (reverse)\n       (take num)\n       (map :oid)\n       (into [])))\n\n(defn register [{:keys [state-ref] :as svc} obj obj-info]\n  (let [oid (next-oid)]\n    (if-not (and (vector? obj) (= :shadow.remote/wrap (first obj)) (= (count obj) 3))\n      (swap! state-ref register* oid obj obj-info)\n      (swap! state-ref register* oid (nth obj 1) (merge obj-info (nth obj 2))))\n    oid))\n\n(defn get-ref [{:keys [state-ref]} obj-id]\n  (get-in @state-ref [:objects obj-id]))\n\n(defn stop [{:keys [runtime]}]\n  (p/del-extension runtime ::ext))\n\n(comment\n  (def obj-support (:clj-runtime-obj-support (shadow.cljs.devtools.server.runtime/get-instance)))\n  (swap! (:state-ref obj-support) assoc :objects {})\n  )"],"x_google_ignoreList":[0]}