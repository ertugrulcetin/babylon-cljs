shadow$provide.module$node_modules$$babylonjs$core$Maths$math_frustum=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Frustum=void 0;var _mathPlane=require("module$node_modules$$babylonjs$core$Maths$math_plane");class Frustum{static GetPlanes(transform){const frustumPlanes=[];for(let index=0;6>index;index++)frustumPlanes.push(new _mathPlane.Plane(0,0,0,0));Frustum.GetPlanesToRef(transform,frustumPlanes);return frustumPlanes}static GetNearPlaneToRef(transform,
frustumPlane){transform=transform.m;frustumPlane.normal.x=transform[3]+transform[2];frustumPlane.normal.y=transform[7]+transform[6];frustumPlane.normal.z=transform[11]+transform[10];frustumPlane.d=transform[15]+transform[14];frustumPlane.normalize()}static GetFarPlaneToRef(transform,frustumPlane){transform=transform.m;frustumPlane.normal.x=transform[3]-transform[2];frustumPlane.normal.y=transform[7]-transform[6];frustumPlane.normal.z=transform[11]-transform[10];frustumPlane.d=transform[15]-transform[14];
frustumPlane.normalize()}static GetLeftPlaneToRef(transform,frustumPlane){transform=transform.m;frustumPlane.normal.x=transform[3]+transform[0];frustumPlane.normal.y=transform[7]+transform[4];frustumPlane.normal.z=transform[11]+transform[8];frustumPlane.d=transform[15]+transform[12];frustumPlane.normalize()}static GetRightPlaneToRef(transform,frustumPlane){transform=transform.m;frustumPlane.normal.x=transform[3]-transform[0];frustumPlane.normal.y=transform[7]-transform[4];frustumPlane.normal.z=transform[11]-
transform[8];frustumPlane.d=transform[15]-transform[12];frustumPlane.normalize()}static GetTopPlaneToRef(transform,frustumPlane){transform=transform.m;frustumPlane.normal.x=transform[3]-transform[1];frustumPlane.normal.y=transform[7]-transform[5];frustumPlane.normal.z=transform[11]-transform[9];frustumPlane.d=transform[15]-transform[13];frustumPlane.normalize()}static GetBottomPlaneToRef(transform,frustumPlane){transform=transform.m;frustumPlane.normal.x=transform[3]+transform[1];frustumPlane.normal.y=
transform[7]+transform[5];frustumPlane.normal.z=transform[11]+transform[9];frustumPlane.d=transform[15]+transform[13];frustumPlane.normalize()}static GetPlanesToRef(transform,frustumPlanes){Frustum.GetNearPlaneToRef(transform,frustumPlanes[0]);Frustum.GetFarPlaneToRef(transform,frustumPlanes[1]);Frustum.GetLeftPlaneToRef(transform,frustumPlanes[2]);Frustum.GetRightPlaneToRef(transform,frustumPlanes[3]);Frustum.GetTopPlaneToRef(transform,frustumPlanes[4]);Frustum.GetBottomPlaneToRef(transform,frustumPlanes[5])}static IsPointInFrustum(point,
frustumPlanes){for(let i=0;6>i;i++)if(0>frustumPlanes[i].dotCoordinate(point))return!1;return!0}}exports.Frustum=Frustum}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Maths$math_frustum.js.map
