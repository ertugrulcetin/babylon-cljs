{
"version":3,
"file":"module$node_modules$$babylonjs$core$Materials$imageProcessingConfiguration.js",
"lineCount":25,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Materials/imageProcessingConfiguration.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Materials$imageProcessingConfiguration\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImageProcessingConfiguration = exports.ImageProcessingConfigurationDefines = void 0;\n\nvar _tslibEs = require(\"../tslib.es6.js\");\n\nvar _decorators = require(\"../Misc/decorators.js\");\n\nvar _observable = require(\"../Misc/observable.js\");\n\nvar _tools = require(\"../Misc/tools.js\");\n\nvar _mathColor = require(\"../Maths/math.color.js\");\n\nvar _materialDefines = require(\"../Materials/materialDefines.js\");\n\nvar _colorCurves = require(\"../Materials/colorCurves.js\");\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * @internal\n */\nclass ImageProcessingConfigurationDefines extends _materialDefines.MaterialDefines {\n  constructor() {\n    super();\n    this.IMAGEPROCESSING = false;\n    this.VIGNETTE = false;\n    this.VIGNETTEBLENDMODEMULTIPLY = false;\n    this.VIGNETTEBLENDMODEOPAQUE = false;\n    this.TONEMAPPING = false;\n    this.TONEMAPPING_ACES = false;\n    this.CONTRAST = false;\n    this.COLORCURVES = false;\n    this.COLORGRADING = false;\n    this.COLORGRADING3D = false;\n    this.SAMPLER3DGREENDEPTH = false;\n    this.SAMPLER3DBGRMAP = false;\n    this.DITHER = false;\n    this.IMAGEPROCESSINGPOSTPROCESS = false;\n    this.EXPOSURE = false;\n    this.SKIPFINALCOLORCLAMP = false;\n    this.rebuild();\n  }\n\n}\n/**\n * This groups together the common properties used for image processing either in direct forward pass\n * or through post processing effect depending on the use of the image processing pipeline in your scene\n * or not.\n */\n\n\nexports.ImageProcessingConfigurationDefines = ImageProcessingConfigurationDefines;\n\nclass ImageProcessingConfiguration {\n  constructor() {\n    /**\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\n     */\n    this.colorCurves = new _colorCurves.ColorCurves();\n    this._colorCurvesEnabled = false;\n    this._colorGradingEnabled = false;\n    this._colorGradingWithGreenDepth = true;\n    this._colorGradingBGR = true;\n    /** @internal */\n\n    this._exposure = 1.0;\n    this._toneMappingEnabled = false;\n    this._toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\n    this._contrast = 1.0;\n    /**\n     * Vignette stretch size.\n     */\n\n    this.vignetteStretch = 0;\n    /**\n     * Vignette center X Offset.\n     */\n\n    this.vignetteCenterX = 0;\n    /**\n     * Vignette center Y Offset.\n     */\n\n    this.vignetteCenterY = 0;\n    /**\n     * Vignette weight or intensity of the vignette effect.\n     */\n\n    this.vignetteWeight = 1.5;\n    /**\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n\n    this.vignetteColor = new _mathColor.Color4(0, 0, 0, 0);\n    /**\n     * Camera field of view used by the Vignette effect.\n     */\n\n    this.vignetteCameraFov = 0.5;\n    this._vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\n    this._vignetteEnabled = false;\n    this._ditheringEnabled = false;\n    this._ditheringIntensity = 1.0 / 255.0;\n    /** @internal */\n\n    this._skipFinalColorClamp = false;\n    /** @internal */\n\n    this._applyByPostProcess = false;\n    this._isEnabled = true;\n    /**\n     * An event triggered when the configuration changes and requires Shader to Update some parameters.\n     */\n\n    this.onUpdateParameters = new _observable.Observable();\n  }\n  /**\n   * Gets whether the color curves effect is enabled.\n   */\n\n\n  get colorCurvesEnabled() {\n    return this._colorCurvesEnabled;\n  }\n  /**\n   * Sets whether the color curves effect is enabled.\n   */\n\n\n  set colorCurvesEnabled(value) {\n    if (this._colorCurvesEnabled === value) {\n      return;\n    }\n\n    this._colorCurvesEnabled = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\n   */\n\n\n  get colorGradingTexture() {\n    return this._colorGradingTexture;\n  }\n  /**\n   * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\n   */\n\n\n  set colorGradingTexture(value) {\n    if (this._colorGradingTexture === value) {\n      return;\n    }\n\n    this._colorGradingTexture = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the color grading effect is enabled.\n   */\n\n\n  get colorGradingEnabled() {\n    return this._colorGradingEnabled;\n  }\n  /**\n   * Sets whether the color grading effect is enabled.\n   */\n\n\n  set colorGradingEnabled(value) {\n    if (this._colorGradingEnabled === value) {\n      return;\n    }\n\n    this._colorGradingEnabled = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the color grading effect is using a green depth for the 3d Texture.\n   */\n\n\n  get colorGradingWithGreenDepth() {\n    return this._colorGradingWithGreenDepth;\n  }\n  /**\n   * Sets whether the color grading effect is using a green depth for the 3d Texture.\n   */\n\n\n  set colorGradingWithGreenDepth(value) {\n    if (this._colorGradingWithGreenDepth === value) {\n      return;\n    }\n\n    this._colorGradingWithGreenDepth = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the color grading texture contains BGR values.\n   */\n\n\n  get colorGradingBGR() {\n    return this._colorGradingBGR;\n  }\n  /**\n   * Sets whether the color grading texture contains BGR values.\n   */\n\n\n  set colorGradingBGR(value) {\n    if (this._colorGradingBGR === value) {\n      return;\n    }\n\n    this._colorGradingBGR = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets the Exposure used in the effect.\n   */\n\n\n  get exposure() {\n    return this._exposure;\n  }\n  /**\n   * Sets the Exposure used in the effect.\n   */\n\n\n  set exposure(value) {\n    if (this._exposure === value) {\n      return;\n    }\n\n    this._exposure = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the tone mapping effect is enabled.\n   */\n\n\n  get toneMappingEnabled() {\n    return this._toneMappingEnabled;\n  }\n  /**\n   * Sets whether the tone mapping effect is enabled.\n   */\n\n\n  set toneMappingEnabled(value) {\n    if (this._toneMappingEnabled === value) {\n      return;\n    }\n\n    this._toneMappingEnabled = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets the type of tone mapping effect.\n   */\n\n\n  get toneMappingType() {\n    return this._toneMappingType;\n  }\n  /**\n   * Sets the type of tone mapping effect used in BabylonJS.\n   */\n\n\n  set toneMappingType(value) {\n    if (this._toneMappingType === value) {\n      return;\n    }\n\n    this._toneMappingType = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets the contrast used in the effect.\n   */\n\n\n  get contrast() {\n    return this._contrast;\n  }\n  /**\n   * Sets the contrast used in the effect.\n   */\n\n\n  set contrast(value) {\n    if (this._contrast === value) {\n      return;\n    }\n\n    this._contrast = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Back Compat: Vignette center Y Offset.\n   * @deprecated use vignetteCenterY instead\n   */\n\n\n  get vignetteCentreY() {\n    return this.vignetteCenterY;\n  }\n\n  set vignetteCentreY(value) {\n    this.vignetteCenterY = value;\n  }\n  /**\n   * Back Compat: Vignette center X Offset.\n   * @deprecated use vignetteCenterX instead\n   */\n\n\n  get vignetteCentreX() {\n    return this.vignetteCenterX;\n  }\n\n  set vignetteCentreX(value) {\n    this.vignetteCenterX = value;\n  }\n  /**\n   * Gets the vignette blend mode allowing different kind of effect.\n   */\n\n\n  get vignetteBlendMode() {\n    return this._vignetteBlendMode;\n  }\n  /**\n   * Sets the vignette blend mode allowing different kind of effect.\n   */\n\n\n  set vignetteBlendMode(value) {\n    if (this._vignetteBlendMode === value) {\n      return;\n    }\n\n    this._vignetteBlendMode = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the vignette effect is enabled.\n   */\n\n\n  get vignetteEnabled() {\n    return this._vignetteEnabled;\n  }\n  /**\n   * Sets whether the vignette effect is enabled.\n   */\n\n\n  set vignetteEnabled(value) {\n    if (this._vignetteEnabled === value) {\n      return;\n    }\n\n    this._vignetteEnabled = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the dithering effect is enabled.\n   * The dithering effect can be used to reduce banding.\n   */\n\n\n  get ditheringEnabled() {\n    return this._ditheringEnabled;\n  }\n  /**\n   * Sets whether the dithering effect is enabled.\n   * The dithering effect can be used to reduce banding.\n   */\n\n\n  set ditheringEnabled(value) {\n    if (this._ditheringEnabled === value) {\n      return;\n    }\n\n    this._ditheringEnabled = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\n   */\n\n\n  get ditheringIntensity() {\n    return this._ditheringIntensity;\n  }\n  /**\n   * Sets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\n   */\n\n\n  set ditheringIntensity(value) {\n    if (this._ditheringIntensity === value) {\n      return;\n    }\n\n    this._ditheringIntensity = value;\n\n    this._updateParameters();\n  }\n  /**\n   * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\n   * Applies to PBR materials.\n   */\n\n\n  get skipFinalColorClamp() {\n    return this._skipFinalColorClamp;\n  }\n  /**\n   * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\n   * Applies to PBR materials.\n   */\n\n\n  set skipFinalColorClamp(value) {\n    if (this._skipFinalColorClamp === value) {\n      return;\n    }\n\n    this._skipFinalColorClamp = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the image processing is applied through a post process or not.\n   */\n\n\n  get applyByPostProcess() {\n    return this._applyByPostProcess;\n  }\n  /**\n   * Sets whether the image processing is applied through a post process or not.\n   */\n\n\n  set applyByPostProcess(value) {\n    if (this._applyByPostProcess === value) {\n      return;\n    }\n\n    this._applyByPostProcess = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Gets whether the image processing is enabled or not.\n   */\n\n\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  /**\n   * Sets whether the image processing is enabled or not.\n   */\n\n\n  set isEnabled(value) {\n    if (this._isEnabled === value) {\n      return;\n    }\n\n    this._isEnabled = value;\n\n    this._updateParameters();\n  }\n  /**\n   * Method called each time the image processing information changes requires to recompile the effect.\n   */\n\n\n  _updateParameters() {\n    this.onUpdateParameters.notifyObservers(this);\n  }\n  /**\n   * Gets the current class name.\n   * @returns \"ImageProcessingConfiguration\"\n   */\n\n\n  getClassName() {\n    return \"ImageProcessingConfiguration\";\n  }\n  /**\n   * Prepare the list of uniforms associated with the Image Processing effects.\n   * @param uniforms The list of uniforms used in the effect\n   * @param defines the list of defines currently in use\n   */\n\n\n  static PrepareUniforms(uniforms, defines) {\n    if (defines.EXPOSURE) {\n      uniforms.push(\"exposureLinear\");\n    }\n\n    if (defines.CONTRAST) {\n      uniforms.push(\"contrast\");\n    }\n\n    if (defines.COLORGRADING) {\n      uniforms.push(\"colorTransformSettings\");\n    }\n\n    if (defines.VIGNETTE || defines.DITHER) {\n      uniforms.push(\"vInverseScreenSize\");\n    }\n\n    if (defines.VIGNETTE) {\n      uniforms.push(\"vignetteSettings1\");\n      uniforms.push(\"vignetteSettings2\");\n    }\n\n    if (defines.COLORCURVES) {\n      _colorCurves.ColorCurves.PrepareUniforms(uniforms);\n    }\n\n    if (defines.DITHER) {\n      uniforms.push(\"ditherIntensity\");\n    }\n  }\n  /**\n   * Prepare the list of samplers associated with the Image Processing effects.\n   * @param samplersList The list of uniforms used in the effect\n   * @param defines the list of defines currently in use\n   */\n\n\n  static PrepareSamplers(samplersList, defines) {\n    if (defines.COLORGRADING) {\n      samplersList.push(\"txColorTransform\");\n    }\n  }\n  /**\n   * Prepare the list of defines associated to the shader.\n   * @param defines the list of defines to complete\n   * @param forPostProcess Define if we are currently in post process mode or not\n   */\n\n\n  prepareDefines(defines, forPostProcess = false) {\n    if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\n      defines.VIGNETTE = false;\n      defines.TONEMAPPING = false;\n      defines.TONEMAPPING_ACES = false;\n      defines.CONTRAST = false;\n      defines.EXPOSURE = false;\n      defines.COLORCURVES = false;\n      defines.COLORGRADING = false;\n      defines.COLORGRADING3D = false;\n      defines.DITHER = false;\n      defines.IMAGEPROCESSING = false;\n      defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\n      defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\n      return;\n    }\n\n    defines.VIGNETTE = this.vignetteEnabled;\n    defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\n    defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\n    defines.TONEMAPPING = this.toneMappingEnabled;\n\n    switch (this._toneMappingType) {\n      case ImageProcessingConfiguration.TONEMAPPING_ACES:\n        defines.TONEMAPPING_ACES = true;\n        break;\n\n      default:\n        defines.TONEMAPPING_ACES = false;\n        break;\n    }\n\n    defines.CONTRAST = this.contrast !== 1.0;\n    defines.EXPOSURE = this.exposure !== 1.0;\n    defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\n    defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\n\n    if (defines.COLORGRADING) {\n      defines.COLORGRADING3D = this.colorGradingTexture.is3D;\n    } else {\n      defines.COLORGRADING3D = false;\n    }\n\n    defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\n    defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\n    defines.DITHER = this._ditheringEnabled;\n    defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\n    defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\n    defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING || defines.DITHER;\n  }\n  /**\n   * Returns true if all the image processing information are ready.\n   * @returns True if ready, otherwise, false\n   */\n\n\n  isReady() {\n    // Color Grading texture can not be none blocking.\n    return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\n  }\n  /**\n   * Binds the image processing to the shader.\n   * @param effect The effect to bind to\n   * @param overrideAspectRatio Override the aspect ratio of the effect\n   */\n\n\n  bind(effect, overrideAspectRatio) {\n    // Color Curves\n    if (this._colorCurvesEnabled && this.colorCurves) {\n      _colorCurves.ColorCurves.Bind(this.colorCurves, effect);\n    } // Vignette and dither handled together due to common uniform.\n\n\n    if (this._vignetteEnabled || this._ditheringEnabled) {\n      const inverseWidth = 1 / effect.getEngine().getRenderWidth();\n      const inverseHeight = 1 / effect.getEngine().getRenderHeight();\n      effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\n\n      if (this._ditheringEnabled) {\n        effect.setFloat(\"ditherIntensity\", 0.5 * this._ditheringIntensity);\n      }\n\n      if (this._vignetteEnabled) {\n        const aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\n        let vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\n        let vignetteScaleX = vignetteScaleY * aspectRatio;\n        const vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\n        vignetteScaleX = _tools.Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\n        vignetteScaleY = _tools.Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\n        effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCenterX, -vignetteScaleY * this.vignetteCenterY);\n        const vignettePower = -2.0 * this.vignetteWeight;\n        effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\n      }\n    } // Exposure\n\n\n    effect.setFloat(\"exposureLinear\", this.exposure); // Contrast\n\n    effect.setFloat(\"contrast\", this.contrast); // Color transform settings\n\n    if (this.colorGradingTexture) {\n      effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\n      const textureSize = this.colorGradingTexture.getSize().height;\n      effect.setFloat4(\"colorTransformSettings\", (textureSize - 1) / textureSize, // textureScale\n      0.5 / textureSize, // textureOffset\n      textureSize, // textureSize\n      this.colorGradingTexture.level // weight\n      );\n    }\n  }\n  /**\n   * Clones the current image processing instance.\n   * @returns The cloned image processing\n   */\n\n\n  clone() {\n    return _decorators.SerializationHelper.Clone(() => new ImageProcessingConfiguration(), this);\n  }\n  /**\n   * Serializes the current image processing instance to a json representation.\n   * @returns a JSON representation\n   */\n\n\n  serialize() {\n    return _decorators.SerializationHelper.Serialize(this);\n  }\n  /**\n   * Parses the image processing from a json representation.\n   * @param source the JSON source to parse\n   * @returns The parsed image processing\n   */\n\n\n  static Parse(source) {\n    const parsed = _decorators.SerializationHelper.Parse(() => new ImageProcessingConfiguration(), source, null, null); // Backward compatibility\n\n\n    if (source.vignetteCentreX !== undefined) {\n      parsed.vignetteCenterX = source.vignetteCentreX;\n    }\n\n    if (source.vignetteCentreY !== undefined) {\n      parsed.vignetteCenterY = source.vignetteCentreY;\n    }\n\n    return parsed;\n  }\n  /**\n   * Used to apply the vignette as a mix with the pixel color.\n   */\n\n\n  static get VIGNETTEMODE_MULTIPLY() {\n    return this._VIGNETTEMODE_MULTIPLY;\n  }\n  /**\n   * Used to apply the vignette as a replacement of the pixel color.\n   */\n\n\n  static get VIGNETTEMODE_OPAQUE() {\n    return this._VIGNETTEMODE_OPAQUE;\n  }\n\n}\n/**\n * Default tone mapping applied in BabylonJS.\n */\n\n\nexports.ImageProcessingConfiguration = ImageProcessingConfiguration;\nImageProcessingConfiguration.TONEMAPPING_STANDARD = 0;\n/**\n * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\n * to other engines rendering to increase portability.\n */\n\nImageProcessingConfiguration.TONEMAPPING_ACES = 1; // Static constants associated to the image processing.\n\nImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY = 0;\nImageProcessingConfiguration._VIGNETTEMODE_OPAQUE = 1;\n(0, _tslibEs.__decorate)([(0, _decorators.serializeAsColorCurves)()], ImageProcessingConfiguration.prototype, \"colorCurves\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_colorCurvesEnabled\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serializeAsTexture)(\"colorGradingTexture\")], ImageProcessingConfiguration.prototype, \"_colorGradingTexture\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_colorGradingEnabled\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_colorGradingWithGreenDepth\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_colorGradingBGR\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_exposure\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_toneMappingEnabled\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_toneMappingType\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_contrast\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"vignetteStretch\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"vignetteCenterX\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"vignetteCenterY\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"vignetteWeight\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serializeAsColor4)()], ImageProcessingConfiguration.prototype, \"vignetteColor\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"vignetteCameraFov\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_vignetteBlendMode\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_vignetteEnabled\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_ditheringEnabled\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_ditheringIntensity\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_skipFinalColorClamp\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_applyByPostProcess\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], ImageProcessingConfiguration.prototype, \"_isEnabled\", void 0); // References the dependencies.\n\n_decorators.SerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ImageProcessingConfiguration","ImageProcessingConfigurationDefines","_tslibEs","_decorators","_observable","_tools","_mathColor","_materialDefines","_colorCurves","MaterialDefines","constructor","SKIPFINALCOLORCLAMP","EXPOSURE","IMAGEPROCESSINGPOSTPROCESS","DITHER","SAMPLER3DBGRMAP","SAMPLER3DGREENDEPTH","COLORGRADING3D","COLORGRADING","COLORCURVES","CONTRAST","TONEMAPPING_ACES","TONEMAPPING","VIGNETTEBLENDMODEOPAQUE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTE","IMAGEPROCESSING","rebuild","colorCurves","ColorCurves","_colorGradingEnabled","_colorCurvesEnabled","_colorGradingBGR","_colorGradingWithGreenDepth","_exposure","_toneMappingEnabled","_toneMappingType","TONEMAPPING_STANDARD","_contrast","vignetteCenterY","vignetteCenterX","vignetteStretch","vignetteWeight","vignetteColor","Color4","vignetteCameraFov","_vignetteBlendMode","VIGNETTEMODE_MULTIPLY","_ditheringEnabled","_vignetteEnabled","_ditheringIntensity","_applyByPostProcess","_skipFinalColorClamp","_isEnabled","onUpdateParameters","Observable","_updateParameters","_colorGradingTexture","notifyObservers","getClassName","PrepareUniforms","uniforms","defines","push","PrepareSamplers","samplersList","prepareDefines","forPostProcess","applyByPostProcess","vignetteEnabled","vignetteBlendMode","_VIGNETTEMODE_MULTIPLY","toneMappingEnabled","contrast","exposure","colorCurvesEnabled","colorGradingEnabled","colorGradingTexture","is3D","colorGradingWithGreenDepth","colorGradingBGR","skipFinalColorClamp","isReady","bind","effect","overrideAspectRatio","Bind","inverseWidth","getEngine","getRenderWidth","inverseHeight","getRenderHeight","setFloat2","setFloat","vignetteScaleY","Math","tan","vignetteScaleX","aspectRatio","vignetteScaleGeometricMean","sqrt","Tools","Mix","setFloat4","r","g","b","setTexture","textureSize","getSize","height","level","clone","SerializationHelper","Clone","serialize","Serialize","Parse","source","parsed","undefined","vignetteCentreX","vignetteCentreY","_VIGNETTEMODE_OPAQUE","__decorate","serializeAsColorCurves","prototype","serializeAsTexture","serializeAsColor4","_ImageProcessingConfigurationParser"]
}
