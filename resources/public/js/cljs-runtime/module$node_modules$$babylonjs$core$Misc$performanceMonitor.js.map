{
"version":3,
"file":"module$node_modules$$babylonjs$core$Misc$performanceMonitor.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Misc/performanceMonitor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Misc$performanceMonitor\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RollingAverage = exports.PerformanceMonitor = void 0;\n\nvar _precisionDate = require(\"./precisionDate.js\");\n\n/**\n * Performance monitor tracks rolling average frame-time and frame-time variance over a user defined sliding-window\n */\nclass PerformanceMonitor {\n  /**\n   * constructor\n   * @param frameSampleSize The number of samples required to saturate the sliding window\n   */\n  constructor(frameSampleSize = 30) {\n    this._enabled = true;\n    this._rollingFrameTime = new RollingAverage(frameSampleSize);\n  }\n  /**\n   * Samples current frame\n   * @param timeMs A timestamp in milliseconds of the current frame to compare with other frames\n   */\n\n\n  sampleFrame(timeMs = _precisionDate.PrecisionDate.Now) {\n    if (!this._enabled) {\n      return;\n    }\n\n    if (this._lastFrameTimeMs != null) {\n      const dt = timeMs - this._lastFrameTimeMs;\n\n      this._rollingFrameTime.add(dt);\n    }\n\n    this._lastFrameTimeMs = timeMs;\n  }\n  /**\n   * Returns the average frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\n   */\n\n\n  get averageFrameTime() {\n    return this._rollingFrameTime.average;\n  }\n  /**\n   * Returns the variance frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\n   */\n\n\n  get averageFrameTimeVariance() {\n    return this._rollingFrameTime.variance;\n  }\n  /**\n   * Returns the frame time of the most recent frame\n   */\n\n\n  get instantaneousFrameTime() {\n    return this._rollingFrameTime.history(0);\n  }\n  /**\n   * Returns the average framerate in frames per second over the sliding window (or the subset of frames sampled so far)\n   */\n\n\n  get averageFPS() {\n    return 1000.0 / this._rollingFrameTime.average;\n  }\n  /**\n   * Returns the average framerate in frames per second using the most recent frame time\n   */\n\n\n  get instantaneousFPS() {\n    const history = this._rollingFrameTime.history(0);\n\n    if (history === 0) {\n      return 0;\n    }\n\n    return 1000.0 / history;\n  }\n  /**\n   * Returns true if enough samples have been taken to completely fill the sliding window\n   */\n\n\n  get isSaturated() {\n    return this._rollingFrameTime.isSaturated();\n  }\n  /**\n   * Enables contributions to the sliding window sample set\n   */\n\n\n  enable() {\n    this._enabled = true;\n  }\n  /**\n   * Disables contributions to the sliding window sample set\n   * Samples will not be interpolated over the disabled period\n   */\n\n\n  disable() {\n    this._enabled = false; //clear last sample to avoid interpolating over the disabled period when next enabled\n\n    this._lastFrameTimeMs = null;\n  }\n  /**\n   * Returns true if sampling is enabled\n   */\n\n\n  get isEnabled() {\n    return this._enabled;\n  }\n  /**\n   * Resets performance monitor\n   */\n\n\n  reset() {\n    //clear last sample to avoid interpolating over the disabled period when next enabled\n    this._lastFrameTimeMs = null; //wipe record\n\n    this._rollingFrameTime.reset();\n  }\n\n}\n/**\n * RollingAverage\n *\n * Utility to efficiently compute the rolling average and variance over a sliding window of samples\n */\n\n\nexports.PerformanceMonitor = PerformanceMonitor;\n\nclass RollingAverage {\n  /**\n   * constructor\n   * @param length The number of samples required to saturate the sliding window\n   */\n  constructor(length) {\n    this._samples = new Array(length);\n    this.reset();\n  }\n  /**\n   * Adds a sample to the sample set\n   * @param v The sample value\n   */\n\n\n  add(v) {\n    //http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n    let delta; //we need to check if we've already wrapped round\n\n    if (this.isSaturated()) {\n      //remove bottom of stack from mean\n      const bottomValue = this._samples[this._pos];\n      delta = bottomValue - this.average;\n      this.average -= delta / (this._sampleCount - 1);\n      this._m2 -= delta * (bottomValue - this.average);\n    } else {\n      this._sampleCount++;\n    } //add new value to mean\n\n\n    delta = v - this.average;\n    this.average += delta / this._sampleCount;\n    this._m2 += delta * (v - this.average); //set the new variance\n\n    this.variance = this._m2 / (this._sampleCount - 1);\n    this._samples[this._pos] = v;\n    this._pos++;\n    this._pos %= this._samples.length; //positive wrap around\n  }\n  /**\n   * Returns previously added values or null if outside of history or outside the sliding window domain\n   * @param i Index in history. For example, pass 0 for the most recent value and 1 for the value before that\n   * @returns Value previously recorded with add() or null if outside of range\n   */\n\n\n  history(i) {\n    if (i >= this._sampleCount || i >= this._samples.length) {\n      return 0;\n    }\n\n    const i0 = this._wrapPosition(this._pos - 1.0);\n\n    return this._samples[this._wrapPosition(i0 - i)];\n  }\n  /**\n   * Returns true if enough samples have been taken to completely fill the sliding window\n   * @returns true if sample-set saturated\n   */\n\n\n  isSaturated() {\n    return this._sampleCount >= this._samples.length;\n  }\n  /**\n   * Resets the rolling average (equivalent to 0 samples taken so far)\n   */\n\n\n  reset() {\n    this.average = 0;\n    this.variance = 0;\n    this._sampleCount = 0;\n    this._pos = 0;\n    this._m2 = 0;\n  }\n  /**\n   * Wraps a value around the sample range boundaries\n   * @param i Position in sample range, for example if the sample length is 5, and i is -3, then 2 will be returned.\n   * @returns Wrapped position in sample range\n   */\n\n\n  _wrapPosition(i) {\n    const max = this._samples.length;\n    return (i % max + max) % max;\n  }\n\n}\n\nexports.RollingAverage = RollingAverage;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","RollingAverage","PerformanceMonitor","_precisionDate","constructor","frameSampleSize","_enabled","_rollingFrameTime","sampleFrame","timeMs","PrecisionDate","Now","_lastFrameTimeMs","add","average","variance","history","isSaturated","enable","disable","reset","length","_samples","Array","v","delta","bottomValue","_pos","_sampleCount","_m2","i","i0","_wrapPosition","max"]
}
