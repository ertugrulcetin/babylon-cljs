{
"version":3,
"file":"module$node_modules$$babylonjs$core$Lights$lightConstants.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,cAAR,CAAyB,IAAK,EAG9B,MAAMA,eAAN,CAOSC,4BAAqB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAGjC,MAAID,EAAEE,CAAAA,aAAN,GAAwBD,CAAEC,CAAAA,aAA1B,EACUD,CAAEC,CAAAA,aAAF,CAAkB,CAAlB,CAAsB,CADhC,GACsCF,CAAEE,CAAAA,aAAF,CAAkB,CAAlB,CAAsB,CAD5D,EAIOD,CAAEE,CAAAA,cAJT,CAI0BH,CAAEG,CAAAA,cAPK,CAPrC,CAwBAT,OAAQI,CAAAA,cAAR,CAAyBA,cACzBA,eAAeM,CAAAA,eAAf,CAAiC,CAKjCN,eAAeO,CAAAA,gBAAf,CAAkC,CAMlCP,eAAeQ,CAAAA,YAAf;AAA8B,CAM9BR,eAAeS,CAAAA,gBAAf,CAAkC,CASlCT,eAAeU,CAAAA,gBAAf,CAAkC,CAOlCV,eAAeW,CAAAA,iBAAf,CAAmC,CAOnCX,eAAeY,CAAAA,oBAAf,CAAsC,CAQtCZ,eAAea,CAAAA,uBAAf,CAAyC,CAKzCb,eAAec,CAAAA,2BAAf,CAA6C,CAK7Cd,eAAee,CAAAA,+BAAf,CAAiD,CAKjDf,eAAegB,CAAAA,yBAAf,CAA2C,CAK3ChB,eAAeiB,CAAAA,uBAAf,CAAyC,CAMzCjB,eAAekB,CAAAA,sBAAf,CAAwC,CAKxClB,eAAemB,CAAAA,4BAAf,CAA8C,CAK9CnB,eAAeoB,CAAAA,qBAAf,CAAuC,CAKvCpB,eAAeqB,CAAAA,4BAAf;AAA8C,CA3HwE;",
"sources":["node_modules/@babylonjs/core/Lights/lightConstants.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Lights$lightConstants\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LightConstants = void 0;\n\n/** Defines the cross module constantsused by lights to avoid circular dependencies */\nclass LightConstants {\n  /**\n   * Sort function to order lights for rendering.\n   * @param a First Light object to compare to second.\n   * @param b Second Light object to compare first.\n   * @returns -1 to reduce's a's index relative to be, 0 for no change, 1 to increase a's index relative to b.\n   */\n  static CompareLightsPriority(a, b) {\n    //shadow-casting lights have priority over non-shadow-casting lights\n    //the renderPriority is a secondary sort criterion\n    if (a.shadowEnabled !== b.shadowEnabled) {\n      return (b.shadowEnabled ? 1 : 0) - (a.shadowEnabled ? 1 : 0);\n    }\n\n    return b.renderPriority - a.renderPriority;\n  }\n\n}\n/**\n * Falloff Default: light is falling off following the material specification:\n * standard material is using standard falloff whereas pbr material can request special falloff per materials.\n */\n\n\nexports.LightConstants = LightConstants;\nLightConstants.FALLOFF_DEFAULT = 0;\n/**\n * Falloff Physical: light is falling off following the inverse squared distance law.\n */\n\nLightConstants.FALLOFF_PHYSICAL = 1;\n/**\n * Falloff gltf: light is falling off as described in the gltf moving to PBR document\n * to enhance interoperability with other engines.\n */\n\nLightConstants.FALLOFF_GLTF = 2;\n/**\n * Falloff Standard: light is falling off like in the standard material\n * to enhance interoperability with other materials.\n */\n\nLightConstants.FALLOFF_STANDARD = 3; //lightmapMode Consts\n\n/**\n * If every light affecting the material is in this lightmapMode,\n * material.lightmapTexture adds or multiplies\n * (depends on material.useLightmapAsShadowmap)\n * after every other light calculations.\n */\n\nLightConstants.LIGHTMAP_DEFAULT = 0;\n/**\n * material.lightmapTexture as only diffuse lighting from this light\n * adds only specular lighting from this light\n * adds dynamic shadows\n */\n\nLightConstants.LIGHTMAP_SPECULAR = 1;\n/**\n * material.lightmapTexture as only lighting\n * no light calculation from this light\n * only adds dynamic shadows from this light\n */\n\nLightConstants.LIGHTMAP_SHADOWSONLY = 2; // Intensity Mode Consts\n\n/**\n * Each light type uses the default quantity according to its type:\n *      point/spot lights use luminous intensity\n *      directional lights use illuminance\n */\n\nLightConstants.INTENSITYMODE_AUTOMATIC = 0;\n/**\n * lumen (lm)\n */\n\nLightConstants.INTENSITYMODE_LUMINOUSPOWER = 1;\n/**\n * candela (lm/sr)\n */\n\nLightConstants.INTENSITYMODE_LUMINOUSINTENSITY = 2;\n/**\n * lux (lm/m^2)\n */\n\nLightConstants.INTENSITYMODE_ILLUMINANCE = 3;\n/**\n * nit (cd/m^2)\n */\n\nLightConstants.INTENSITYMODE_LUMINANCE = 4; // Light types ids const.\n\n/**\n * Light type const id of the point light.\n */\n\nLightConstants.LIGHTTYPEID_POINTLIGHT = 0;\n/**\n * Light type const id of the directional light.\n */\n\nLightConstants.LIGHTTYPEID_DIRECTIONALLIGHT = 1;\n/**\n * Light type const id of the spot light.\n */\n\nLightConstants.LIGHTTYPEID_SPOTLIGHT = 2;\n/**\n * Light type const id of the hemispheric light.\n */\n\nLightConstants.LIGHTTYPEID_HEMISPHERICLIGHT = 3;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","LightConstants","CompareLightsPriority","a","b","shadowEnabled","renderPriority","FALLOFF_DEFAULT","FALLOFF_PHYSICAL","FALLOFF_GLTF","FALLOFF_STANDARD","LIGHTMAP_DEFAULT","LIGHTMAP_SPECULAR","LIGHTMAP_SHADOWSONLY","INTENSITYMODE_AUTOMATIC","INTENSITYMODE_LUMINOUSPOWER","INTENSITYMODE_LUMINOUSINTENSITY","INTENSITYMODE_ILLUMINANCE","INTENSITYMODE_LUMINANCE","LIGHTTYPEID_POINTLIGHT","LIGHTTYPEID_DIRECTIONALLIGHT","LIGHTTYPEID_SPOTLIGHT","LIGHTTYPEID_HEMISPHERICLIGHT"]
}
