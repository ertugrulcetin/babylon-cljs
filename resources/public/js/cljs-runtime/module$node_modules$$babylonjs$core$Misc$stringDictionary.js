shadow$provide.module$node_modules$$babylonjs$core$Misc$stringDictionary=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.StringDictionary=void 0;class StringDictionary{constructor(){this._count=0;this._data={}}copyFrom(source){this.clear();source.forEach((t,v)=>this.add(t,v))}get(key){key=this._data[key];if(void 0!==key)return key}getOrAddWithFactory(key,factory){let val=this.get(key);if(void 0!==val)return val;(val=factory(key))&&this.add(key,
val);return val}getOrAdd(key,val){const curVal=this.get(key);if(void 0!==curVal)return curVal;this.add(key,val);return val}contains(key){return void 0!==this._data[key]}add(key,value){if(void 0!==this._data[key])return!1;this._data[key]=value;++this._count;return!0}set(key,value){if(void 0===this._data[key])return!1;this._data[key]=value;return!0}getAndRemove(key){const val=this.get(key);return void 0!==val?(delete this._data[key],--this._count,val):null}remove(key){return this.contains(key)?(delete this._data[key],
--this._count,!0):!1}clear(){this._data={};this._count=0}get count(){return this._count}forEach(callback){for(const cur in this._data)callback(cur,this._data[cur])}first(callback){for(const cur in this._data){const res=callback(cur,this._data[cur]);if(res)return res}return null}}exports.StringDictionary=StringDictionary}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Misc$stringDictionary.js.map
