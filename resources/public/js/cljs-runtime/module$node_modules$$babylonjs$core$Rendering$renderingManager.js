shadow$provide.module$node_modules$$babylonjs$core$Rendering$renderingManager=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.RenderingManager=exports.RenderingGroupInfo=void 0;var _renderingGroup=require("module$node_modules$$babylonjs$core$Rendering$renderingGroup");class RenderingGroupInfo{}exports.RenderingGroupInfo=RenderingGroupInfo;class RenderingManager{get maintainStateBetweenFrames(){return this._maintainStateBetweenFrames}set maintainStateBetweenFrames(value){if(value!==
this._maintainStateBetweenFrames&&(this._maintainStateBetweenFrames=value,!this._maintainStateBetweenFrames)){for(const mesh of this._scene.meshes)if(mesh.subMeshes)for(const subMesh of mesh.subMeshes)subMesh._wasDispatched=!1;if(this._scene.spriteManagers)for(const spriteManager of this._scene.spriteManagers)spriteManager._wasDispatched=!1;for(const particleSystem of this._scene.particleSystems)particleSystem._wasDispatched=!1}}constructor(scene){this._useSceneAutoClearSetup=!1;this._renderingGroups=
[];this._autoClearDepthStencil={};this._customOpaqueSortCompareFn={};this._customAlphaTestSortCompareFn={};this._customTransparentSortCompareFn={};this._renderingGroupInfo=new RenderingGroupInfo;this._maintainStateBetweenFrames=!1;this._scene=scene;for(scene=RenderingManager.MIN_RENDERINGGROUPS;scene<RenderingManager.MAX_RENDERINGGROUPS;scene++)this._autoClearDepthStencil[scene]={autoClear:!0,depth:!0,stencil:!0}}getRenderingGroup(id){id=id||0;this._prepareRenderingGroup(id);return this._renderingGroups[id]}_clearDepthStencilBuffer(depth=
!0,stencil=!0){this._depthStencilBufferAlreadyCleaned||(this._scene.getEngine().clear(null,!1,depth,stencil),this._depthStencilBufferAlreadyCleaned=!0)}render(customRenderFunction,activeMeshes,renderParticles,renderSprites){const info=this._renderingGroupInfo;info.scene=this._scene;info.camera=this._scene.activeCamera;if(this._scene.spriteManagers&&renderSprites)for(var index=0;index<this._scene.spriteManagers.length;index++)this.dispatchSprites(this._scene.spriteManagers[index]);for(index=RenderingManager.MIN_RENDERINGGROUPS;index<
RenderingManager.MAX_RENDERINGGROUPS;index++){this._depthStencilBufferAlreadyCleaned=index===RenderingManager.MIN_RENDERINGGROUPS;const renderingGroup=this._renderingGroups[index];if(!renderingGroup||renderingGroup._empty)continue;const renderingGroupMask=Math.pow(2,index);info.renderingGroupId=index;this._scene.onBeforeRenderingGroupObservable.notifyObservers(info,renderingGroupMask);if(RenderingManager.AUTOCLEAR){const autoClear=this._useSceneAutoClearSetup?this._scene.getAutoClearDepthStencilSetup(index):
this._autoClearDepthStencil[index];autoClear&&autoClear.autoClear&&this._clearDepthStencilBuffer(autoClear.depth,autoClear.stencil)}for(const step of this._scene._beforeRenderingGroupDrawStage)step.action(index);renderingGroup.render(customRenderFunction,renderSprites,renderParticles,activeMeshes);for(const step of this._scene._afterRenderingGroupDrawStage)step.action(index);this._scene.onAfterRenderingGroupObservable.notifyObservers(info,renderingGroupMask)}}reset(){if(!this.maintainStateBetweenFrames)for(let index=
RenderingManager.MIN_RENDERINGGROUPS;index<RenderingManager.MAX_RENDERINGGROUPS;index++){const renderingGroup=this._renderingGroups[index];renderingGroup&&renderingGroup.prepare()}}resetSprites(){if(!this.maintainStateBetweenFrames)for(let index=RenderingManager.MIN_RENDERINGGROUPS;index<RenderingManager.MAX_RENDERINGGROUPS;index++){const renderingGroup=this._renderingGroups[index];renderingGroup&&renderingGroup.prepareSprites()}}dispose(){this.freeRenderingGroups();this._renderingGroups.length=0;
this._renderingGroupInfo=null}freeRenderingGroups(){for(let index=RenderingManager.MIN_RENDERINGGROUPS;index<RenderingManager.MAX_RENDERINGGROUPS;index++){const renderingGroup=this._renderingGroups[index];renderingGroup&&renderingGroup.dispose()}}_prepareRenderingGroup(renderingGroupId){void 0===this._renderingGroups[renderingGroupId]&&(this._renderingGroups[renderingGroupId]=new _renderingGroup.RenderingGroup(renderingGroupId,this._scene,this._customOpaqueSortCompareFn[renderingGroupId],this._customAlphaTestSortCompareFn[renderingGroupId],
this._customTransparentSortCompareFn[renderingGroupId]))}dispatchSprites(spriteManager){this.maintainStateBetweenFrames&&spriteManager._wasDispatched||(spriteManager._wasDispatched=!0,this.getRenderingGroup(spriteManager.renderingGroupId).dispatchSprites(spriteManager))}dispatchParticles(particleSystem){this.maintainStateBetweenFrames&&particleSystem._wasDispatched||(particleSystem._wasDispatched=!0,this.getRenderingGroup(particleSystem.renderingGroupId).dispatchParticles(particleSystem))}dispatch(subMesh,
mesh,material){void 0===mesh&&(mesh=subMesh.getMesh());this.maintainStateBetweenFrames&&subMesh._wasDispatched||(subMesh._wasDispatched=!0,this.getRenderingGroup(mesh.renderingGroupId).dispatch(subMesh,mesh,material))}setRenderingOrder(renderingGroupId,opaqueSortCompareFn=null,alphaTestSortCompareFn=null,transparentSortCompareFn=null){this._customOpaqueSortCompareFn[renderingGroupId]=opaqueSortCompareFn;this._customAlphaTestSortCompareFn[renderingGroupId]=alphaTestSortCompareFn;this._customTransparentSortCompareFn[renderingGroupId]=
transparentSortCompareFn;this._renderingGroups[renderingGroupId]&&(opaqueSortCompareFn=this._renderingGroups[renderingGroupId],opaqueSortCompareFn.opaqueSortCompareFn=this._customOpaqueSortCompareFn[renderingGroupId],opaqueSortCompareFn.alphaTestSortCompareFn=this._customAlphaTestSortCompareFn[renderingGroupId],opaqueSortCompareFn.transparentSortCompareFn=this._customTransparentSortCompareFn[renderingGroupId])}setRenderingAutoClearDepthStencil(renderingGroupId,autoClearDepthStencil,depth=!0,stencil=
!0){this._autoClearDepthStencil[renderingGroupId]={autoClear:autoClearDepthStencil,depth,stencil}}getAutoClearDepthStencilSetup(index){return this._autoClearDepthStencil[index]}}exports.RenderingManager=RenderingManager;RenderingManager.MAX_RENDERINGGROUPS=4;RenderingManager.MIN_RENDERINGGROUPS=0;RenderingManager.AUTOCLEAR=!0}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Rendering$renderingManager.js.map
