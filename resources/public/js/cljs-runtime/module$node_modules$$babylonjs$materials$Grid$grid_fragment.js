shadow$provide.module$node_modules$$babylonjs$materials$Grid$grid_fragment=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.gridPixelShader=void 0;global=require("module$node_modules$$babylonjs$core$Engines$shaderStore");require("module$node_modules$$babylonjs$core$Shaders$ShadersInclude$fogFragmentDeclaration");require("module$node_modules$$babylonjs$core$Shaders$ShadersInclude$fogFragment");require("module$node_modules$$babylonjs$core$Shaders$ShadersInclude$imageProcessingCompatibility");
global.ShaderStore.ShadersStore.gridPixelShader="#extension GL_OES_standard_derivatives : enable\n#define SQRT2 1.41421356\n#define PI 3.14159\nprecision highp float;\nuniform float visibility;\nuniform vec3 mainColor;\nuniform vec3 lineColor;\nuniform vec4 gridControl;\nuniform vec3 gridOffset;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n#include\x3cfogFragmentDeclaration\x3e\n#ifdef OPACITY\nvarying vec2 vOpacityUV;\nuniform sampler2D opacitySampler;\nuniform vec2 vOpacityInfos;\n#endif\nfloat getDynamicVisibility(float position) {\nfloat majorGridFrequency\x3dgridControl.y;\nif (floor(position+0.5)\x3d\x3dfloor(position/majorGridFrequency+0.5)*majorGridFrequency)\n{\nreturn 1.0;\n} \nreturn gridControl.z;\n}\nfloat getAnisotropicAttenuation(float differentialLength) {\nconst float maxNumberOfLines\x3d10.0;\nreturn clamp(1.0/(differentialLength+1.0)-1.0/maxNumberOfLines,0.0,1.0);\n}\nfloat isPointOnLine(float position,float differentialLength) {\nfloat fractionPartOfPosition\x3dposition-floor(position+0.5); \nfractionPartOfPosition/\x3ddifferentialLength; \nfractionPartOfPosition\x3dclamp(fractionPartOfPosition,-1.,1.);\nfloat result\x3d0.5+0.5*cos(fractionPartOfPosition*PI); \nreturn result; \n}\nfloat contributionOnAxis(float position) {\nfloat differentialLength\x3dlength(vec2(dFdx(position),dFdy(position)));\ndifferentialLength*\x3dSQRT2; \nfloat result\x3disPointOnLine(position,differentialLength);\nfloat dynamicVisibility\x3dgetDynamicVisibility(position);\nresult*\x3ddynamicVisibility;\nfloat anisotropicAttenuation\x3dgetAnisotropicAttenuation(differentialLength);\nresult*\x3danisotropicAttenuation;\nreturn result;\n}\nfloat normalImpactOnAxis(float x) {\nfloat normalImpact\x3dclamp(1.0-3.0*abs(x*x*x),0.0,1.0);\nreturn normalImpact;\n}\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\nfloat gridRatio\x3dgridControl.x;\nvec3 gridPos\x3d(vPosition+gridOffset.xyz)/gridRatio;\nfloat x\x3dcontributionOnAxis(gridPos.x);\nfloat y\x3dcontributionOnAxis(gridPos.y);\nfloat z\x3dcontributionOnAxis(gridPos.z);\nvec3 normal\x3dnormalize(vNormal);\nx*\x3dnormalImpactOnAxis(normal.x);\ny*\x3dnormalImpactOnAxis(normal.y);\nz*\x3dnormalImpactOnAxis(normal.z);\n#ifdef MAX_LINE \nfloat grid\x3dclamp(max(max(x,y),z),0.,1.);\n#else\nfloat grid\x3dclamp(x+y+z,0.,1.);\n#endif\nvec3 color\x3dmix(mainColor,lineColor,grid);\n#ifdef FOG\n#include\x3cfogFragment\x3e\n#endif\nfloat opacity\x3d1.0;\n#ifdef TRANSPARENT\nopacity\x3dclamp(grid,0.08,gridControl.w*grid);\n#endif \n#ifdef OPACITY\nopacity*\x3dtexture2D(opacitySampler,vOpacityUV).a;\n#endif \ngl_FragColor\x3dvec4(color.rgb,opacity*visibility);\n#ifdef TRANSPARENT\n#ifdef PREMULTIPLYALPHA\ngl_FragColor.rgb*\x3dopacity;\n#endif\n#else \n#endif\n#include\x3cimageProcessingCompatibility\x3e\n#define CUSTOM_FRAGMENT_MAIN_END\n}\n";
exports.gridPixelShader={name:"gridPixelShader",shader:"#extension GL_OES_standard_derivatives : enable\n#define SQRT2 1.41421356\n#define PI 3.14159\nprecision highp float;\nuniform float visibility;\nuniform vec3 mainColor;\nuniform vec3 lineColor;\nuniform vec4 gridControl;\nuniform vec3 gridOffset;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n#include\x3cfogFragmentDeclaration\x3e\n#ifdef OPACITY\nvarying vec2 vOpacityUV;\nuniform sampler2D opacitySampler;\nuniform vec2 vOpacityInfos;\n#endif\nfloat getDynamicVisibility(float position) {\nfloat majorGridFrequency\x3dgridControl.y;\nif (floor(position+0.5)\x3d\x3dfloor(position/majorGridFrequency+0.5)*majorGridFrequency)\n{\nreturn 1.0;\n} \nreturn gridControl.z;\n}\nfloat getAnisotropicAttenuation(float differentialLength) {\nconst float maxNumberOfLines\x3d10.0;\nreturn clamp(1.0/(differentialLength+1.0)-1.0/maxNumberOfLines,0.0,1.0);\n}\nfloat isPointOnLine(float position,float differentialLength) {\nfloat fractionPartOfPosition\x3dposition-floor(position+0.5); \nfractionPartOfPosition/\x3ddifferentialLength; \nfractionPartOfPosition\x3dclamp(fractionPartOfPosition,-1.,1.);\nfloat result\x3d0.5+0.5*cos(fractionPartOfPosition*PI); \nreturn result; \n}\nfloat contributionOnAxis(float position) {\nfloat differentialLength\x3dlength(vec2(dFdx(position),dFdy(position)));\ndifferentialLength*\x3dSQRT2; \nfloat result\x3disPointOnLine(position,differentialLength);\nfloat dynamicVisibility\x3dgetDynamicVisibility(position);\nresult*\x3ddynamicVisibility;\nfloat anisotropicAttenuation\x3dgetAnisotropicAttenuation(differentialLength);\nresult*\x3danisotropicAttenuation;\nreturn result;\n}\nfloat normalImpactOnAxis(float x) {\nfloat normalImpact\x3dclamp(1.0-3.0*abs(x*x*x),0.0,1.0);\nreturn normalImpact;\n}\n#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\nfloat gridRatio\x3dgridControl.x;\nvec3 gridPos\x3d(vPosition+gridOffset.xyz)/gridRatio;\nfloat x\x3dcontributionOnAxis(gridPos.x);\nfloat y\x3dcontributionOnAxis(gridPos.y);\nfloat z\x3dcontributionOnAxis(gridPos.z);\nvec3 normal\x3dnormalize(vNormal);\nx*\x3dnormalImpactOnAxis(normal.x);\ny*\x3dnormalImpactOnAxis(normal.y);\nz*\x3dnormalImpactOnAxis(normal.z);\n#ifdef MAX_LINE \nfloat grid\x3dclamp(max(max(x,y),z),0.,1.);\n#else\nfloat grid\x3dclamp(x+y+z,0.,1.);\n#endif\nvec3 color\x3dmix(mainColor,lineColor,grid);\n#ifdef FOG\n#include\x3cfogFragment\x3e\n#endif\nfloat opacity\x3d1.0;\n#ifdef TRANSPARENT\nopacity\x3dclamp(grid,0.08,gridControl.w*grid);\n#endif \n#ifdef OPACITY\nopacity*\x3dtexture2D(opacitySampler,vOpacityUV).a;\n#endif \ngl_FragColor\x3dvec4(color.rgb,opacity*visibility);\n#ifdef TRANSPARENT\n#ifdef PREMULTIPLYALPHA\ngl_FragColor.rgb*\x3dopacity;\n#endif\n#else \n#endif\n#include\x3cimageProcessingCompatibility\x3e\n#define CUSTOM_FRAGMENT_MAIN_END\n}\n"}}
//# sourceMappingURL=module$node_modules$$babylonjs$materials$Grid$grid_fragment.js.map
