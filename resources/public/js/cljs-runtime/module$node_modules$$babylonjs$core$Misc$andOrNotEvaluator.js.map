{
"version":3,
"file":"module$node_modules$$babylonjs$core$Misc$andOrNotEvaluator.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Misc/andOrNotEvaluator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Misc$andOrNotEvaluator\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AndOrNotEvaluator = void 0;\n\n/**\n * Class used to evaluate queries containing `and` and `or` operators\n */\nclass AndOrNotEvaluator {\n  /**\n   * Evaluate a query\n   * @param query defines the query to evaluate\n   * @param evaluateCallback defines the callback used to filter result\n   * @returns true if the query matches\n   */\n  static Eval(query, evaluateCallback) {\n    if (!query.match(/\\([^()]*\\)/g)) {\n      query = AndOrNotEvaluator._HandleParenthesisContent(query, evaluateCallback);\n    } else {\n      query = query.replace(/\\([^()]*\\)/g, r => {\n        // remove parenthesis\n        r = r.slice(1, r.length - 1);\n        return AndOrNotEvaluator._HandleParenthesisContent(r, evaluateCallback);\n      });\n    }\n\n    if (query === \"true\") {\n      return true;\n    }\n\n    if (query === \"false\") {\n      return false;\n    }\n\n    return AndOrNotEvaluator.Eval(query, evaluateCallback);\n  }\n\n  static _HandleParenthesisContent(parenthesisContent, evaluateCallback) {\n    evaluateCallback = evaluateCallback || (r => {\n      return r === \"true\" ? true : false;\n    });\n\n    let result;\n    const or = parenthesisContent.split(\"||\");\n\n    for (const i in or) {\n      if (Object.prototype.hasOwnProperty.call(or, i)) {\n        let ori = AndOrNotEvaluator._SimplifyNegation(or[i].trim());\n\n        const and = ori.split(\"&&\");\n\n        if (and.length > 1) {\n          for (let j = 0; j < and.length; ++j) {\n            const andj = AndOrNotEvaluator._SimplifyNegation(and[j].trim());\n\n            if (andj !== \"true\" && andj !== \"false\") {\n              if (andj[0] === \"!\") {\n                result = !evaluateCallback(andj.substring(1));\n              } else {\n                result = evaluateCallback(andj);\n              }\n            } else {\n              result = andj === \"true\" ? true : false;\n            }\n\n            if (!result) {\n              // no need to continue since 'false && ... && ...' will always return false\n              ori = \"false\";\n              break;\n            }\n          }\n        }\n\n        if (result || ori === \"true\") {\n          // no need to continue since 'true || ... || ...' will always return true\n          result = true;\n          break;\n        } // result equals false (or undefined)\n\n\n        if (ori !== \"true\" && ori !== \"false\") {\n          if (ori[0] === \"!\") {\n            result = !evaluateCallback(ori.substring(1));\n          } else {\n            result = evaluateCallback(ori);\n          }\n        } else {\n          result = ori === \"true\" ? true : false;\n        }\n      }\n    } // the whole parenthesis scope is replaced by 'true' or 'false'\n\n\n    return result ? \"true\" : \"false\";\n  }\n\n  static _SimplifyNegation(booleanString) {\n    booleanString = booleanString.replace(/^[\\s!]+/, r => {\n      // remove whitespaces\n      r = r.replace(/[\\s]/g, () => \"\");\n      return r.length % 2 ? \"!\" : \"\";\n    });\n    booleanString = booleanString.trim();\n\n    if (booleanString === \"!true\") {\n      booleanString = \"false\";\n    } else if (booleanString === \"!false\") {\n      booleanString = \"true\";\n    }\n\n    return booleanString;\n  }\n\n}\n\nexports.AndOrNotEvaluator = AndOrNotEvaluator;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","AndOrNotEvaluator","Eval","query","evaluateCallback","match","replace","r","slice","length","_HandleParenthesisContent","parenthesisContent","or","split","i","prototype","hasOwnProperty","call","ori","_SimplifyNegation","trim","and","j","andj","result","substring","booleanString"]
}
