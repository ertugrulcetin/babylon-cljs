shadow$provide.module$node_modules$$babylonjs$core$Materials$Textures$internalTexture=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.InternalTexture=exports.InternalTextureSource=void 0;var _observable=require("module$node_modules$$babylonjs$core$Misc$observable");global=require("module$node_modules$$babylonjs$core$Materials$Textures$textureSampler");var InternalTextureSource;exports.InternalTextureSource=InternalTextureSource;(function(InternalTextureSource){InternalTextureSource[InternalTextureSource.Unknown=
0]="Unknown";InternalTextureSource[InternalTextureSource.Url=1]="Url";InternalTextureSource[InternalTextureSource.Temp=2]="Temp";InternalTextureSource[InternalTextureSource.Raw=3]="Raw";InternalTextureSource[InternalTextureSource.Dynamic=4]="Dynamic";InternalTextureSource[InternalTextureSource.RenderTarget=5]="RenderTarget";InternalTextureSource[InternalTextureSource.MultiRenderTarget=6]="MultiRenderTarget";InternalTextureSource[InternalTextureSource.Cube=7]="Cube";InternalTextureSource[InternalTextureSource.CubeRaw=
8]="CubeRaw";InternalTextureSource[InternalTextureSource.CubePrefiltered=9]="CubePrefiltered";InternalTextureSource[InternalTextureSource.Raw3D=10]="Raw3D";InternalTextureSource[InternalTextureSource.Raw2DArray=11]="Raw2DArray";InternalTextureSource[InternalTextureSource.DepthStencil=12]="DepthStencil";InternalTextureSource[InternalTextureSource.CubeRawRGBD=13]="CubeRawRGBD";InternalTextureSource[InternalTextureSource.Depth=14]="Depth"})(InternalTextureSource||(exports.InternalTextureSource=InternalTextureSource=
{}));class InternalTexture extends global.TextureSampler{get useMipMaps(){return this.generateMipMaps}set useMipMaps(value){this.generateMipMaps=value}get uniqueId(){return this._uniqueId}_setUniqueId(id){this._uniqueId=id}getEngine(){return this._engine}get source(){return this._source}constructor(engine,source,delayAllocation=!1){super();this.isMultiview=this.is2DArray=this.is3D=this.isCube=this.isReady=!1;this.url="";this.generateMipMaps=!1;this.samples=0;this.format=this.type=-1;this.onLoadedObservable=
new _observable.Observable;this.onErrorObservable=new _observable.Observable;this.onRebuildCallback=null;this.baseDepth=this.baseHeight=this.baseWidth=this.depth=this.height=this.width=0;this._invertVScale=this.invertY=!1;this._associatedChannel=-1;this._bufferViewArrayArray=this._bufferViewArray=this._bufferView=this._buffer=null;this._size=0;this._extension="";this._cachedCoordinatesMode=this._workingContext=this._workingCanvas=this._files=null;this._isDisabled=!1;this._sphericalPolynomialPromise=
this._sphericalPolynomial=this._compression=null;this._sphericalPolynomialComputed=!1;this._lodGenerationOffset=this._lodGenerationScale=0;this._useSRGBBuffer=!1;this._lodTextureLow=this._lodTextureMid=this._lodTextureHigh=null;this._linearSpecularLOD=this._isRGBD=!1;this._maxLodLevel=this._hardwareTexture=this._irradianceTexture=null;this._references=1;this._gammaSpace=null;this._engine=engine;this._source=source;this._uniqueId=InternalTexture._Counter++;delayAllocation||(this._hardwareTexture=engine._createHardwareTexture())}incrementReferences(){this._references++}updateSize(width,
height,depth=1){this._engine.updateTextureDimensions(this,width,height,depth);this.width=width;this.height=height;this.depth=depth;this.baseWidth=width;this.baseHeight=height;this.baseDepth=depth;this._size=width*height*depth}_rebuild(){this.isReady=!1;this._cachedAnisotropicFilteringLevel=this._cachedWrapR=this._cachedWrapV=this._cachedWrapU=this._cachedCoordinatesMode=null;if(this.onRebuildCallback){const data=this.onRebuildCallback(this);var _a=proxyInternalTexture=>{proxyInternalTexture._swapAndDie(this,
!1);this.isReady=data.isReady};data.isAsync?data.proxy.then(_a):_a(data.proxy)}else switch(this.source){case InternalTextureSource.Url:var proxy=this._engine.createTexture(null!==(_a=this._originalUrl)&&void 0!==_a?_a:this.url,!this.generateMipMaps,this.invertY,null,this.samplingMode,temp=>{temp._swapAndDie(this,!1);this.isReady=!0},null,this._buffer,void 0,this.format,this._extension,void 0,void 0,void 0,this._useSRGBBuffer);break;case InternalTextureSource.Raw:proxy=this._engine.createRawTexture(this._bufferView,
this.baseWidth,this.baseHeight,this.format,this.generateMipMaps,this.invertY,this.samplingMode,this._compression,this.type,void 0,this._useSRGBBuffer);proxy._swapAndDie(this,!1);this.isReady=!0;break;case InternalTextureSource.Raw3D:proxy=this._engine.createRawTexture3D(this._bufferView,this.baseWidth,this.baseHeight,this.baseDepth,this.format,this.generateMipMaps,this.invertY,this.samplingMode,this._compression,this.type);proxy._swapAndDie(this,!1);this.isReady=!0;break;case InternalTextureSource.Raw2DArray:proxy=
this._engine.createRawTexture2DArray(this._bufferView,this.baseWidth,this.baseHeight,this.baseDepth,this.format,this.generateMipMaps,this.invertY,this.samplingMode,this._compression,this.type);proxy._swapAndDie(this,!1);this.isReady=!0;break;case InternalTextureSource.Dynamic:proxy=this._engine.createDynamicTexture(this.baseWidth,this.baseHeight,this.generateMipMaps,this.samplingMode);proxy._swapAndDie(this,!1);this._engine.updateDynamicTexture(this,this._engine.getRenderingCanvas(),this.invertY,
void 0,void 0,!0);break;case InternalTextureSource.Cube:proxy=this._engine.createCubeTexture(this.url,null,this._files,!this.generateMipMaps,()=>{proxy._swapAndDie(this,!1);this.isReady=!0},null,this.format,this._extension,!1,0,0,null,void 0,this._useSRGBBuffer);break;case InternalTextureSource.CubeRaw:proxy=this._engine.createRawCubeTexture(this._bufferViewArray,this.width,this.format,this.type,this.generateMipMaps,this.invertY,this.samplingMode,this._compression);proxy._swapAndDie(this,!1);this.isReady=
!0;break;case InternalTextureSource.CubePrefiltered:proxy=this._engine.createPrefilteredCubeTexture(this.url,null,this._lodGenerationScale,this._lodGenerationOffset,proxy=>{proxy&&proxy._swapAndDie(this,!1);this.isReady=!0},null,this.format,this._extension),proxy._sphericalPolynomial=this._sphericalPolynomial}}_swapAndDie(target,swapAll=!0){var _a;null===(_a=this._hardwareTexture)||void 0===_a?void 0:_a.setUsage(target._source,this.generateMipMaps,this.isCube,this.width,this.height);target._hardwareTexture=
this._hardwareTexture;swapAll&&(target._isRGBD=this._isRGBD);this._lodTextureHigh&&(target._lodTextureHigh&&target._lodTextureHigh.dispose(),target._lodTextureHigh=this._lodTextureHigh);this._lodTextureMid&&(target._lodTextureMid&&target._lodTextureMid.dispose(),target._lodTextureMid=this._lodTextureMid);this._lodTextureLow&&(target._lodTextureLow&&target._lodTextureLow.dispose(),target._lodTextureLow=this._lodTextureLow);this._irradianceTexture&&(target._irradianceTexture&&target._irradianceTexture.dispose(),
target._irradianceTexture=this._irradianceTexture);swapAll=this._engine.getLoadedTexturesCache();_a=swapAll.indexOf(this);-1!==_a&&swapAll.splice(_a,1);_a=swapAll.indexOf(target);-1===_a&&swapAll.push(target)}dispose(){this._references--;this.onLoadedObservable.clear();this.onErrorObservable.clear();0===this._references&&(this._engine._releaseTexture(this),this._hardwareTexture=null)}}exports.InternalTexture=InternalTexture;InternalTexture._Counter=0}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Materials$Textures$internalTexture.js.map
