{
"version":3,
"file":"module$node_modules$$babylonjs$core$DeviceInput$internalDeviceSourceManager.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/DeviceInput/internalDeviceSourceManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$DeviceInput$internalDeviceSourceManager\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InternalDeviceSourceManager = void 0;\n\nvar _deviceEnums = require(\"./InputDevices/deviceEnums.js\");\n\nvar _nativeDeviceInputSystem = require(\"./nativeDeviceInputSystem.js\");\n\nvar _webDeviceInputSystem = require(\"./webDeviceInputSystem.js\");\n\nvar _deviceSource = require(\"./InputDevices/deviceSource.js\");\n\n/** @internal */\nclass InternalDeviceSourceManager {\n  constructor(engine) {\n    this._registeredManagers = new Array();\n    this._refCount = 0; // Public Functions\n\n    this.registerManager = manager => {\n      for (let deviceType = 0; deviceType < this._devices.length; deviceType++) {\n        const device = this._devices[deviceType];\n\n        for (const deviceSlotKey in device) {\n          const deviceSlot = +deviceSlotKey;\n\n          manager._addDevice(new _deviceSource.DeviceSource(this._deviceInputSystem, deviceType, deviceSlot));\n        }\n      }\n\n      this._registeredManagers.push(manager);\n    };\n\n    this.unregisterManager = manager => {\n      const idx = this._registeredManagers.indexOf(manager);\n\n      if (idx > -1) {\n        this._registeredManagers.splice(idx, 1);\n      }\n    };\n\n    const numberOfDeviceTypes = Object.keys(_deviceEnums.DeviceType).length / 2;\n    this._devices = new Array(numberOfDeviceTypes);\n\n    const onDeviceConnected = (deviceType, deviceSlot) => {\n      if (!this._devices[deviceType]) {\n        this._devices[deviceType] = new Array();\n      }\n\n      if (!this._devices[deviceType][deviceSlot]) {\n        this._devices[deviceType][deviceSlot] = deviceSlot;\n      }\n\n      for (const manager of this._registeredManagers) {\n        const deviceSource = new _deviceSource.DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\n\n        manager._addDevice(deviceSource);\n      }\n    };\n\n    const onDeviceDisconnected = (deviceType, deviceSlot) => {\n      var _a;\n\n      if ((_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]) {\n        delete this._devices[deviceType][deviceSlot];\n      }\n\n      for (const manager of this._registeredManagers) {\n        manager._removeDevice(deviceType, deviceSlot);\n      }\n    };\n\n    const onInputChanged = (deviceType, deviceSlot, eventData) => {\n      if (eventData) {\n        for (const manager of this._registeredManagers) {\n          manager._onInputChanged(deviceType, deviceSlot, eventData);\n        }\n      }\n    };\n\n    if (typeof _native !== \"undefined\") {\n      this._deviceInputSystem = new _nativeDeviceInputSystem.NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged);\n    } else {\n      this._deviceInputSystem = new _webDeviceInputSystem.WebDeviceInputSystem(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged);\n    }\n  }\n\n  dispose() {\n    this._deviceInputSystem.dispose();\n  }\n\n}\n\nexports.InternalDeviceSourceManager = InternalDeviceSourceManager;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","InternalDeviceSourceManager","_deviceEnums","_nativeDeviceInputSystem","_webDeviceInputSystem","_deviceSource","constructor","engine","_registeredManagers","_refCount","registerManager","manager","this.registerManager","deviceType","_devices","length","device","deviceSlotKey","_addDevice","DeviceSource","_deviceInputSystem","deviceSlot","push","unregisterManager","this.unregisterManager","idx","indexOf","splice","numberOfDeviceTypes","keys","DeviceType","Array","onDeviceConnected","deviceSource","onDeviceDisconnected","_a","_removeDevice","onInputChanged","eventData","_onInputChanged","_native","NativeDeviceInputSystem","WebDeviceInputSystem","dispose"]
}
