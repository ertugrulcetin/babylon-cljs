shadow$provide.module$node_modules$$babylonjs$core$Misc$logger=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Logger=void 0;class Logger{static _CheckLimit(message,limit){let entry=Logger._LogLimitOutputs[message];entry?entry.current++:(entry={limit,current:1},Logger._LogLimitOutputs[message]=entry);return entry.current<=entry.limit}static _GenerateLimitMessage(message,level=1){var _a;if((message=Logger._LogLimitOutputs[message])&&Logger.MessageLimitReached&&
(level=this._Levels[level],message.current===message.limit))Logger[level.name](Logger.MessageLimitReached.replace(/%LIMIT%/g,""+message.limit).replace(/%TYPE%/g,null!==(_a=level.name)&&void 0!==_a?_a:""))}static _AddLogEntry(entry){Logger._LogCache=entry+Logger._LogCache;Logger.OnNewCacheEntry&&Logger.OnNewCacheEntry(entry)}static _FormatMessage(message){const padStr=i=>10>i?"0"+i:""+i,date=new Date;return"["+padStr(date.getHours())+":"+padStr(date.getMinutes())+":"+padStr(date.getSeconds())+"]: "+
message}static _LogDisabled(message,limit){}static _LogEnabled(level=1,message,limit){if(void 0===limit||Logger._CheckLimit(message,limit)){limit=Logger._FormatMessage(message);var type=this._Levels[level];type.logFunc&&type.logFunc("BJS - "+limit);Logger._AddLogEntry(`<div style='color:${type.color}'>${limit}</div><br>`);Logger._GenerateLimitMessage(message,level)}}static get LogCache(){return Logger._LogCache}static ClearLogCache(){Logger._LogCache="";Logger._LogLimitOutputs={};Logger.errorsCount=
0}static set LogLevels(level){Logger.Log=Logger._LogDisabled;Logger.Warn=Logger._LogDisabled;Logger.Error=Logger._LogDisabled;[Logger.MessageLogLevel,Logger.WarningLogLevel,Logger.ErrorLogLevel].forEach(l=>{(level&l)===l&&(Logger[this._Levels[l].name]=Logger._LogEnabled.bind(Logger,l))})}}exports.Logger=Logger;Logger.NoneLogLevel=0;Logger.MessageLogLevel=1;Logger.WarningLogLevel=2;Logger.ErrorLogLevel=4;Logger.AllLogLevel=7;Logger.MessageLimitReached="Too many %TYPE%s (%LIMIT%), no more %TYPE%s will be reported for this message.";
Logger._LogCache="";Logger._LogLimitOutputs={};Logger._Levels=[{},{color:"white",logFunc:console.log,name:"Log"},{color:"orange",logFunc:console.warn,name:"Warn"},{},{color:"red",logFunc:console.error,name:"Error"}];Logger.errorsCount=0;Logger.Log=Logger._LogEnabled.bind(Logger,Logger.MessageLogLevel);Logger.Warn=Logger._LogEnabled.bind(Logger,Logger.WarningLogLevel);Logger.Error=Logger._LogEnabled.bind(Logger,Logger.ErrorLogLevel)}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Misc$logger.js.map
