{
"version":3,
"file":"module$node_modules$$babylonjs$core$Engines$shaderStore.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAE3B,KAAIC,gBAAkBP,OAAA,CAAQ,8DAAR,CAKtB,MAAMM,YAAN,CAMSE,2BAAoB,CAACC,cAAA,CAAiBF,eAAgBG,CAAAA,cAAeC,CAAAA,IAAjD,CAAuD,CAChF,MAAOF,eAAA,GAAmBF,eAAgBG,CAAAA,cAAeC,CAAAA,IAAlD,CAAyDL,WAAYM,CAAAA,iBAArE,CAAyFN,WAAYO,CAAAA,qBAD5B,CAU3EC,sBAAe,CAACL,cAAA;AAAiBF,eAAgBG,CAAAA,cAAeC,CAAAA,IAAjD,CAAuD,CAC3E,MAAOF,eAAA,GAAmBF,eAAgBG,CAAAA,cAAeC,CAAAA,IAAlD,CAAyDL,WAAYS,CAAAA,YAArE,CAAoFT,WAAYU,CAAAA,gBAD5B,CAUtEC,8BAAuB,CAACR,cAAA,CAAiBF,eAAgBG,CAAAA,cAAeC,CAAAA,IAAjD,CAAuD,CACnF,MAAOF,eAAA,GAAmBF,eAAgBG,CAAAA,cAAeC,CAAAA,IAAlD,CAAyDL,WAAYY,CAAAA,oBAArE,CAA4FZ,WAAYa,CAAAA,wBAD5B,CA1BvF,CAoCAjB,OAAQI,CAAAA,WAAR,CAAsBA,WACtBA,YAAYM,CAAAA,iBAAZ,CAAgC,cAKhCN,YAAYS,CAAAA,YAAZ,CAA2B,EAK3BT,YAAYY,CAAAA,oBAAZ;AAAmC,EAKnCZ,YAAYO,CAAAA,qBAAZ,CAAoC,kBAKpCP,YAAYU,CAAAA,gBAAZ,CAA+B,EAK/BV,YAAYa,CAAAA,wBAAZ,CAAuC,EA3E6E;",
"sources":["node_modules/@babylonjs/core/Engines/shaderStore.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Engines$shaderStore\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShaderStore = void 0;\n\nvar _shaderLanguage = require(\"../Materials/shaderLanguage.js\");\n\n/**\n * Defines the shader related stores and directory\n */\nclass ShaderStore {\n  /**\n   * Gets the shaders repository path for a given shader language\n   * @param shaderLanguage the shader language\n   * @returns the path to the shaders repository\n   */\n  static GetShadersRepository(shaderLanguage = _shaderLanguage.ShaderLanguage.GLSL) {\n    return shaderLanguage === _shaderLanguage.ShaderLanguage.GLSL ? ShaderStore.ShadersRepository : ShaderStore.ShadersRepositoryWGSL;\n  }\n  /**\n   * Gets the shaders store of a given shader language\n   * @param shaderLanguage the shader language\n   * @returns the shaders store\n   */\n\n\n  static GetShadersStore(shaderLanguage = _shaderLanguage.ShaderLanguage.GLSL) {\n    return shaderLanguage === _shaderLanguage.ShaderLanguage.GLSL ? ShaderStore.ShadersStore : ShaderStore.ShadersStoreWGSL;\n  }\n  /**\n   * Gets the include shaders store of a given shader language\n   * @param shaderLanguage the shader language\n   * @returns the include shaders store\n   */\n\n\n  static GetIncludesShadersStore(shaderLanguage = _shaderLanguage.ShaderLanguage.GLSL) {\n    return shaderLanguage === _shaderLanguage.ShaderLanguage.GLSL ? ShaderStore.IncludesShadersStore : ShaderStore.IncludesShadersStoreWGSL;\n  }\n\n}\n/**\n * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\n */\n\n\nexports.ShaderStore = ShaderStore;\nShaderStore.ShadersRepository = \"src/Shaders/\";\n/**\n * Store of each shader (The can be looked up using effect.key)\n */\n\nShaderStore.ShadersStore = {};\n/**\n * Store of each included file for a shader (The can be looked up using effect.key)\n */\n\nShaderStore.IncludesShadersStore = {};\n/**\n * Gets or sets the relative url used to load shaders (WGSL) if using the engine in non-minified mode\n */\n\nShaderStore.ShadersRepositoryWGSL = \"src/ShadersWGSL/\";\n/**\n * Store of each shader  (WGSL)\n */\n\nShaderStore.ShadersStoreWGSL = {};\n/**\n * Store of each included file for a shader (WGSL)\n */\n\nShaderStore.IncludesShadersStoreWGSL = {};\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ShaderStore","_shaderLanguage","GetShadersRepository","shaderLanguage","ShaderLanguage","GLSL","ShadersRepository","ShadersRepositoryWGSL","GetShadersStore","ShadersStore","ShadersStoreWGSL","GetIncludesShadersStore","IncludesShadersStore","IncludesShadersStoreWGSL"]
}
