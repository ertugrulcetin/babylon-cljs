shadow$provide.module$node_modules$$babylonjs$core$Engines$Processors$shaderCodeNode=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.ShaderCodeNode=void 0;class ShaderCodeNode{constructor(){this.children=[]}isValid(preprocessors){return!0}process(preprocessors,options){var _a,_b,_c,_d,_e,_f,_g;let result="";if(this.line){let value=this.line;const processor=options.processor;if(processor){processor.lineProcessor&&(value=processor.lineProcessor(value,
options.isFragment,options.processingContext));const attributeKeyword=null!==(_b=null===(_a=options.processor)||void 0===_a?void 0:_a.attributeKeywordName)&&void 0!==_b?_b:"attribute";_a=options.isFragment&&(null===(_c=options.processor)||void 0===_c?0:_c.varyingFragmentKeywordName)?null===(_d=options.processor)||void 0===_d?void 0:_d.varyingFragmentKeywordName:!options.isFragment&&(null===(_e=options.processor)||void 0===_e?0:_e.varyingVertexKeywordName)?null===(_f=options.processor)||void 0===_f?
void 0:_f.varyingVertexKeywordName:"varying";!options.isFragment&&processor.attributeProcessor&&this.line.startsWith(attributeKeyword)?value=processor.attributeProcessor(this.line,preprocessors,options.processingContext):processor.varyingProcessor&&((null===(_g=processor.varyingCheck)||void 0===_g?0:_g.call(processor,this.line,options.isFragment))||!processor.varyingCheck&&this.line.startsWith(_a))?value=processor.varyingProcessor(this.line,options.isFragment,preprocessors,options.processingContext):
processor.uniformProcessor&&processor.uniformRegexp&&processor.uniformRegexp.test(this.line)?options.lookForClosingBracketForUniformBuffer||(value=processor.uniformProcessor(this.line,options.isFragment,preprocessors,options.processingContext)):processor.uniformBufferProcessor&&processor.uniformBufferRegexp&&processor.uniformBufferRegexp.test(this.line)?options.lookForClosingBracketForUniformBuffer||(value=processor.uniformBufferProcessor(this.line,options.isFragment,options.processingContext),options.lookForClosingBracketForUniformBuffer=
!0):processor.textureProcessor&&processor.textureRegexp&&processor.textureRegexp.test(this.line)?value=processor.textureProcessor(this.line,options.isFragment,preprocessors,options.processingContext):(processor.uniformProcessor||processor.uniformBufferProcessor)&&this.line.startsWith("uniform")&&!options.lookForClosingBracketForUniformBuffer&&(/uniform\s+(?:(?:highp)?|(?:lowp)?)\s*(\S+)\s+(\S+)\s*;/.test(this.line)?processor.uniformProcessor&&(value=processor.uniformProcessor(this.line,options.isFragment,
preprocessors,options.processingContext)):processor.uniformBufferProcessor&&(value=processor.uniformBufferProcessor(this.line,options.isFragment,options.processingContext),options.lookForClosingBracketForUniformBuffer=!0));options.lookForClosingBracketForUniformBuffer&&-1!==this.line.indexOf("}")&&(options.lookForClosingBracketForUniformBuffer=!1,processor.endOfUniformBufferProcessor&&(value=processor.endOfUniformBufferProcessor(this.line,options.isFragment,options.processingContext)))}result+=value+
"\r\n"}this.children.forEach(child=>{result+=child.process(preprocessors,options)});this.additionalDefineKey&&(preprocessors[this.additionalDefineKey]=this.additionalDefineValue||"true");return result}}exports.ShaderCodeNode=ShaderCodeNode}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Engines$Processors$shaderCodeNode.js.map
