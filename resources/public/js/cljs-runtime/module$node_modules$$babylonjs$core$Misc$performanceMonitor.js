shadow$provide.module$node_modules$$babylonjs$core$Misc$performanceMonitor=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.RollingAverage=exports.PerformanceMonitor=void 0;var _precisionDate=require("module$node_modules$$babylonjs$core$Misc$precisionDate");class PerformanceMonitor{constructor(frameSampleSize=30){this._enabled=!0;this._rollingFrameTime=new RollingAverage(frameSampleSize)}sampleFrame(timeMs=_precisionDate.PrecisionDate.Now){this._enabled&&
(null!=this._lastFrameTimeMs&&this._rollingFrameTime.add(timeMs-this._lastFrameTimeMs),this._lastFrameTimeMs=timeMs)}get averageFrameTime(){return this._rollingFrameTime.average}get averageFrameTimeVariance(){return this._rollingFrameTime.variance}get instantaneousFrameTime(){return this._rollingFrameTime.history(0)}get averageFPS(){return 1E3/this._rollingFrameTime.average}get instantaneousFPS(){const history=this._rollingFrameTime.history(0);return 0===history?0:1E3/history}get isSaturated(){return this._rollingFrameTime.isSaturated()}enable(){this._enabled=
!0}disable(){this._enabled=!1;this._lastFrameTimeMs=null}get isEnabled(){return this._enabled}reset(){this._lastFrameTimeMs=null;this._rollingFrameTime.reset()}}exports.PerformanceMonitor=PerformanceMonitor;class RollingAverage{constructor(length){this._samples=Array(length);this.reset()}add(v){let delta;if(this.isSaturated()){const bottomValue=this._samples[this._pos];delta=bottomValue-this.average;this.average-=delta/(this._sampleCount-1);this._m2-=delta*(bottomValue-this.average)}else this._sampleCount++;
delta=v-this.average;this.average+=delta/this._sampleCount;this._m2+=delta*(v-this.average);this.variance=this._m2/(this._sampleCount-1);this._samples[this._pos]=v;this._pos++;this._pos%=this._samples.length}history(i){if(i>=this._sampleCount||i>=this._samples.length)return 0;const i0=this._wrapPosition(this._pos-1);return this._samples[this._wrapPosition(i0-i)]}isSaturated(){return this._sampleCount>=this._samples.length}reset(){this._m2=this._pos=this._sampleCount=this.variance=this.average=0}_wrapPosition(i){const max=
this._samples.length;return(i%max+max)%max}}exports.RollingAverage=RollingAverage}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Misc$performanceMonitor.js.map
