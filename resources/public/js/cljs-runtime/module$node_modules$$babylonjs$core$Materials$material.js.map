{
"version":3,
"file":"module$node_modules$$babylonjs$core$Materials$material.js",
"lineCount":46,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,QAAR,CAAmB,IAAK,EAEpBC,OAAAA,CAAWP,OAAA,CAAQ,+CAAR,CAEf,KAAIQ,YAAcR,OAAA,CAAQ,qDAAR,CAAlB,CAEIS,OAAST,OAAA,CAAQ,gDAAR,CAFb,CAIIU,YAAcV,OAAA,CAAQ,qDAAR,CAJlB,CAMIW,aAAeX,OAAA,CAAQ,yDAAR,CANnB;AAQIY,SAAWZ,OAAA,CAAQ,oDAAR,CARf,CAUIa,eAAiBb,OAAA,CAAQ,6DAAR,CAVrB,CAYIc,QAAUd,OAAA,CAAQ,iDAAR,CAZd,CAcIe,WAAaf,OAAA,CAAQ,sDAAR,CAdjB,CAgBIgB,gBAAkBhB,OAAA,CAAQ,8DAAR,CAhBtB,CAkBIiB,aAAejB,OAAA,CAAQ,2DAAR,CAlBnB,CAoBIkB,sBAAwBlB,OAAA,CAAQ,oEAAR,CApB5B;AAsBImB,OAASnB,OAAA,CAAQ,2CAAR,CAtBb,CAwBIoB,qBAAuBpB,OAAA,CAAQ,mEAAR,CAK3B,MAAMM,SAAN,CAIM,kBAAiB,EAAA,CAGnB,MAAO,CAAA,CAHY,CAUjB,SAAK,CAACD,KAAD,CAAQ,CACf,GAAI,IAAKgB,CAAAA,MAAT,GAAoBhB,KAApB,CAAA,CAIA,IAAMiB,SAAW,IAAKD,CAAAA,MACtB,KAAKA,CAAAA,MAAL,CAAchB,KAEG,EAAjB,GAAIiB,QAAJ,EAAgC,CAAhC,GAAsBjB,KAAtB,EACE,IAAKkB,CAAAA,WAAL,CAAiBjB,QAASkB,CAAAA,aAA1B,CAA0ClB,QAASmB,CAAAA,gBAAnD,CARF,CADe,CAiBb,SAAQ,EAAA,CACV,MAAO,KAAKJ,CAAAA,MADF,CAQR,mBAAe,CAAChB,KAAD,CAAQ,CACrB,IAAKqB,CAAAA,gBAAT,GAA8BrB,KAA9B,GAIA,IAAKqB,CAAAA,gBACL,CADwBrB,KACxB,CAAA,IAAKkB,CAAAA,WAAL,CAAiBjB,QAASqB,CAAAA,gBAA1B,CALA,CADyB,CAavB,mBAAkB,EAAA,CACpB,MAAO,KAAKD,CAAAA,gBADQ,CAQlB,iBAAa,CAACrB,KAAD,CAAQ,CACnB,IAAKuB,CAAAA,cAAT;AAA4BvB,KAA5B,GAIA,IAAKuB,CAAAA,cACL,CADsBvB,KACtB,CAAA,IAAKkB,CAAAA,WAAL,CAAiBjB,QAASqB,CAAAA,gBAA1B,CALA,CADuB,CAarB,iBAAgB,EAAA,CAClB,MAAO,KAAKC,CAAAA,cADM,CAShB,uBAAsB,EAAA,CACxB,MAAO,KAAKC,CAAAA,oBADY,CAItB,uBAAmB,CAACxB,KAAD,CAAQ,CACzB,IAAKwB,CAAAA,oBAAT,GAAkCxB,KAAlC,IAIA,IAAKwB,CAAAA,oBAJL,CAI4BxB,KAJ5B,GAOE,IAAKyB,CAAAA,SAAL,EAPF,CAD6B,CAmB/BC,qBAAqB,CAACC,QAAD,CAAW,CAC9B,IAAKC,CAAAA,mBAAL,CAA2B,CAAA,CAE3B,IAAI,CACFD,QAAA,CAAS,IAAT,CADE,CAAJ,OAEU,CACR,IAAKC,CAAAA,mBAAL,CAA2B,CAAA,CADnB,CALoB,CAc5B,2BAA0B,EAAA,CAC5B,IAAKC,CAAAA,UAAWC,CAAAA,uBAAhB,CAA0C,CAAA,CAE1C,KAAKC,CAAAA,2CAAL,CAAiD,IAAKF,CAAAA,UAAtD,CAEA;MAAO,KAAKA,CAAAA,UAAWC,CAAAA,uBALK,CAY1B,aAAS,CAACH,QAAD,CAAW,CAClB,IAAKK,CAAAA,kBAAT,EACE,IAAKC,CAAAA,mBAAoBC,CAAAA,MAAzB,CAAgC,IAAKF,CAAAA,kBAArC,CAGF,KAAKA,CAAAA,kBAAL,CAA0B,IAAKC,CAAAA,mBAAoBE,CAAAA,GAAzB,CAA6BR,QAA7B,CALJ,CAYpB,oBAAmB,EAAA,CAChB,IAAKS,CAAAA,iBAAV,GACE,IAAKA,CAAAA,iBADP,CAC2B,IAAI/B,WAAYgC,CAAAA,UAD3C,CAIA,OAAO,KAAKD,CAAAA,iBALS,CAYnB,UAAM,CAACT,QAAD,CAAW,CACf,IAAKW,CAAAA,eAAT,EACE,IAAKC,CAAAA,gBAAiBL,CAAAA,MAAtB,CAA6B,IAAKI,CAAAA,eAAlC,CAGF,KAAKA,CAAAA,eAAL,CAAuB,IAAKC,CAAAA,gBAAiBJ,CAAAA,GAAtB,CAA0BR,QAA1B,CALJ,CAYjB,sBAAqB,EAAA,CAClB,IAAKa,CAAAA,mBAAV;CACE,IAAKA,CAAAA,mBADP,CAC6B,IAAInC,WAAYgC,CAAAA,UAD7C,CAIA,OAAO,KAAKG,CAAAA,mBALW,CAYrB,6BAA4B,EAAA,CACzB,IAAKC,CAAAA,0BAAV,GACE,IAAKA,CAAAA,0BADP,CACoC,IAAIpC,WAAYgC,CAAAA,UADpD,CAIA,OAAO,KAAKI,CAAAA,0BALkB,CA2B5B,aAAS,CAACzC,KAAD,CAAQ,CACf,IAAK0C,CAAAA,UAAT,GAAwB1C,KAAxB,GAIA,IAAK0C,CAAAA,UACL,CADkB1C,KAClB,CAAA,IAAKkB,CAAAA,WAAL,CAAiBjB,QAASqB,CAAAA,gBAA1B,CALA,CADmB,CAajB,aAAY,EAAA,CACd,MAAO,KAAKoB,CAAAA,UADE,CAQZ,oBAAgB,CAAC1C,KAAD,CAAQ,CACtB,IAAK2C,CAAAA,iBAAT,GAA+B3C,KAA/B,GAIA,IAAK2C,CAAAA,iBAJL,CAIyB3C,KAJzB,IAOE,IAAK4C,CAAAA,qBAPP;AAO+B,CAAA,CAP/B,CAD0B,CAgBxB,oBAAmB,EAAA,CACrB,MAAO,KAAKD,CAAAA,iBADS,CAQnB,oBAAmB,EAAA,CACrB,MAAO,CAAA,CADc,CAQnB,cAAU,CAAC3C,KAAD,CAAQ,CAChB,IAAK6C,CAAAA,WAAT,GAAyB7C,KAAzB,GAIA,IAAK6C,CAAAA,WACL,CADmB7C,KACnB,CAAA,IAAKkB,CAAAA,WAAL,CAAiBjB,QAASkB,CAAAA,aAA1B,CALA,CADoB,CAalB,cAAa,EAAA,CACf,MAAO,KAAK0B,CAAAA,WADG,CAIb,aAAY,EAAA,CACd,OAAQ,IAAKC,CAAAA,SAAb,EACE,KAAK7C,QAAS8C,CAAAA,iBAAd,CACA,KAAK9C,QAAS+C,CAAAA,gBAAd,CACA,KAAK/C,QAASgD,CAAAA,gBAAd,CACA,KAAKhD,QAASiD,CAAAA,iBAAd,CACE,MAAO,CAAA,CALX,CAQA,MAAO,KAAKpC,CAAAA,MAAOqC,CAAAA,cATL,CAgBZ,aAAS,CAACnD,KAAD,CAAQ,CACnB,IAAKoD,CAAAA,QAAL,CAAgBpD,KAAA,CAAQC,QAAS8C,CAAAA,iBAAjB;AAAqC9C,QAASoD,CAAAA,gBAD3C,CAQjB,eAAc,EAAA,CAChB,OAAQ,IAAKP,CAAAA,SAAb,EACE,KAAK7C,QAASqD,CAAAA,aAAd,CACA,KAAKrD,QAASsD,CAAAA,iBAAd,CACE,MAAO,CAAA,CAHX,CAMA,MAAO,KAAKzC,CAAAA,MAAO0C,CAAAA,gBAPH,CAcd,eAAW,CAACxD,KAAD,CAAQ,CACrB,IAAKoD,CAAAA,QAAL,CAAgBpD,KAAA,CAAQC,QAASqD,CAAAA,aAAjB,CAAiCrD,QAASoD,CAAAA,gBADrC,CAQnB,YAAW,EAAA,CACb,MAAO,KAAKP,CAAAA,SADC,CAQX,YAAQ,CAAC9C,KAAD,CAAQ,CACd,IAAK8C,CAAAA,SAAT,GAAuB9C,KAAvB,GAIA,IAAK8C,CAAAA,SACL,CADiB9C,KACjB,CAAA,IAAKkB,CAAAA,WAAL,CAAiBjB,QAASkB,CAAAA,aAA1B,CALA,CADkB,CAWpBsC,eAAe,EAAG,CAChB,MAAO,KAAK7C,CAAAA,YADI,CAQlB8C,eAAe,CAACC,WAAD,CAAc,CAC3B,IAAK/C,CAAAA,YAAL,CAAoB+C,WADO,CAW7BC,WAAW,CAACC,IAAD;AAAOC,KAAP,CAAcC,QAAd,CAAwB,CAIjC,IAAKC,CAAAA,kBAAL,CAA0B,IAO1B,KAAKC,CAAAA,sBAAL,CAA8B,CAAA,CAU9B,KAAKC,CAAAA,iBAAL,CALA,IAAKC,CAAAA,QAKL,CALgB,IAehB,KAAKC,CAAAA,kBAAL,CALA,IAAKxB,CAAAA,qBAKL,CAL6B,CAAA,CAU7B,KAAKyB,CAAAA,KAAL,CAAa,EAKb,KAAKrD,CAAAA,MAAL,CAAc,CAUd,KAAKO,CAAAA,cAAL,CALA,IAAKF,CAAAA,gBAKL,CALwB,CAAA,CAMxB,KAAKG,CAAAA,oBAAL,CAA4B,CAAA,CAe5B,KAAK8C,CAAAA,uBAAL,CALA,IAAKC,CAAAA,OAKL,CAVA,IAAKC,CAAAA,UAUL,CAVkB,IAoBlB,KAAKC,CAAAA,uBAAL,CALA,IAAKC,CAAAA,cAKL,CALsB,CAAA,CAUtB,KAAKC,CAAAA,UAAL,CAAkB,IAKlB,KAAK1C,CAAAA,mBAAL,CAA2B,IAAI5B,WAAYgC,CAAAA,UAW3C,KAAKC,CAAAA,eAAL,CALA,IAAKE,CAAAA,mBAKL;AANA,IAAKR,CAAAA,kBAML,CAN0B,IAW1B,KAAKU,CAAAA,UAAL,CAAkB,CAoBlB,KAAKkC,CAAAA,eAAL,CALA,IAAKC,CAAAA,iBAKL,CAVA,IAAKC,CAAAA,iBAUL,CAfA,IAAKnC,CAAAA,iBAeL,CAfyB,CAAA,CAoBzB,KAAKoC,CAAAA,aAAL,CAAqB,CAKrB,KAAKC,CAAAA,mBAAL,CAA2B,CAAA,CAK3B,KAAKnC,CAAAA,WAAL,CAAmB,CAAA,CAKnB,KAAKoC,CAAAA,SAAL,CAAiB,CAUjB,KAAKC,CAAAA,YAAL,CALA,IAAKC,CAAAA,OAKL,CALe,CAUf,KAAKC,CAAAA,OAAL,CAAe,IAAIvE,qBAAsBwE,CAAAA,oBAKzC,KAAKC,CAAAA,OAAL,CAAe,CAAA,CAKf,KAAKxC,CAAAA,SAAL,CAAiB7C,QAASoD,CAAAA,gBAU1B,KAAKkC,CAAAA,sBAAL,CALA,IAAKC,CAAAA,sBAKL,CAL8B,CAAA,CAU9B,KAAKC,CAAAA,yBAAL,CAAiC,CAGjC,KAAKC,CAAAA,0BAAL,CAAkC,CAAC,CAMnC;IAAKC,CAAAA,gBAAL,CAHA,IAAKC,CAAAA,OAGL,CAHe,IAMf,KAAKC,CAAAA,yBAAL,CAAiC,CAAA,CACjC,KAAKhE,CAAAA,UAAL,CAAkB,EAIlB,KAAKiE,CAAAA,2BAAL,CAAmC,EAAAC,EAAM,EAIzC,KAAKC,CAAAA,qCAAL,CAA6C,EAAAC,EAAM,EAInD,KAAKC,CAAAA,kCAAL,CAA0C,EAAAC,EAAM,EAIhD,KAAKC,CAAAA,kDAAL,CAA0D,EAAAC,EAAM,EAIhE,KAAKC,CAAAA,sCAAL,CAA8C,EAAAC,EAAM,EAIpD,KAAKC,CAAAA,kCAAL,CAA0C,EAAAC,EAAM,EAIhD,KAAK1E,CAAAA,2CAAL,CAAmD,EAAA2E,EAAM,EAIzD,KAAKC,CAAAA,4CAAL,CAAoD,EAAAC;AAAM,EAM1D,KAAKC,CAAAA,eAAL,CAAuB,CAAA,CAKvB,KAAKC,CAAAA,iBAAL,CAAyB,IACzB,KAAKjD,CAAAA,IAAL,CAAYA,IAGZ,IAFMkD,KAEN,CAFiBjD,KAEjB,EAF0BxD,YAAa0G,CAAAA,WAAYC,CAAAA,gBAEnD,CAIA,IAAKnG,CAAAA,MAgCL,CAhCciG,KAgCd,CA/BA,IAAKG,CAAAA,eA+BL,CA/BuB,EA+BvB,CA9BA,IAAKA,CAAAA,eAAL,CAAqB,CAArB,CA8BA,CA9B0B,IAAKC,CAAAA,gCAAiCC,CAAAA,IAAtC,CAA2C,IAA3C,CA8B1B,CA7BA,IAAKF,CAAAA,eAAL,CAAqB,CAArB,CA6BA,CA7B0B,IAAKG,CAAAA,8BAA+BD,CAAAA,IAApC,CAAyC,IAAzC,CA6B1B,CA5BA,IAAKF,CAAAA,eAAL,CAAqB,CAArB,CA4BA,CA5B0B,IAAKI,CAAAA,+BAAgCF,CAAAA,IAArC,CAA0C,IAA1C,CA4B1B,CA3BA,IAAKF,CAAAA,eAAL,CAAqB,CAArB,CA2BA,CA3B0B,IAAKK,CAAAA,kCAAmCH,CAAAA,IAAxC,CAA6C,IAA7C,CA2B1B,CA1BA,IAAKF,CAAAA,eAAL,CAAqB,EAArB,CA0BA,CA1B2B,IAAKM,CAAAA,4BAA6BJ,CAAAA,IAAlC,CAAuC,IAAvC,CA0B3B;AAzBA,IAAKF,CAAAA,eAAL,CAAqB,EAArB,CAyBA,CAzB2B,IAAKO,CAAAA,+BAAgCL,CAAAA,IAArC,CAA0C,IAA1C,CAyB3B,CAxBA,IAAKF,CAAAA,eAAL,CAAqB,EAArB,CAwBA,CAxB2B,IAAKQ,CAAAA,2BAA4BN,CAAAA,IAAjC,CAAsC,IAAtC,CAwB3B,CAvBA,IAAKO,CAAAA,EAuBL,CAvBU9D,IAuBV,EAvBkBzD,MAAOwH,CAAAA,KAAMC,CAAAA,QAAb,EAuBlB,CAtBA,IAAKC,CAAAA,QAsBL,CAtBgB,IAAKhH,CAAAA,MAAOiH,CAAAA,WAAZ,EAsBhB,CArBA,IAAKC,CAAAA,gBAqBL,CArBwB,IAAKlH,CAAAA,MAAOmH,CAAAA,SAAZ,EAAwBC,CAAAA,qBAAxB,EAqBxB,CApBA,IAAKtH,CAAAA,YAoBL,CApBoB,IAAIA,YAAauH,CAAAA,WAAjB,CAA6B,IAAKrH,CAAAA,MAAOmH,CAAAA,SAAZ,EAA7B,CAAsD,CAAA,CAAtD,CAoBpB,CAnBA,IAAKrH,CAAAA,YAAawH,CAAAA,eAmBlB,CAnBoC,IAAKJ,CAAAA,gBAmBzC,CAhBE,IAAKK,CAAAA,eAgBP,CAjBI,IAAKvH,CAAAA,MAAOwH,CAAAA,oBAAhB,CACyBrI,QAASsI,CAAAA,wBADlC;AAGyBtI,QAASuI,CAAAA,+BAclC,CAXA,IAAKhI,CAAAA,cAWL,CAXsB,IAAIA,cAAeiI,CAAAA,aAAnB,CAAiC,IAAK3H,CAAAA,MAAOmH,CAAAA,SAAZ,EAAjC,CAA0DS,IAAAA,EAA1D,CAAqEA,IAAAA,EAArE,CAAgF7E,IAAhF,CAWtB,CAVA,IAAKyB,CAAAA,OAUL,CAVe,IAAKqD,CAAAA,QAAL,EAAgBV,CAAAA,SAAhB,EAA4BW,CAAAA,sBAU3C,CARK7E,QAQL,EAPE,IAAKjD,CAAAA,MAAO+H,CAAAA,WAAZ,CAAwB,IAAxB,CAOF,CAJI,IAAK/H,CAAAA,MAAOgI,CAAAA,kBAIhB,GAHE,IAAKlD,CAAAA,OAGP,CAHiB,EAGjB,EAAA3F,QAAS8I,CAAAA,iBAAkBC,CAAAA,eAA3B,CAA2C,IAA3C,CAAiDjI,oBAAqBkI,CAAAA,mBAAoBC,CAAAA,OAA1F,CAvRiC,CAiSnCC,QAAQ,CAACC,WAAD,CAAc,CAEpB,MADY,QACZ,CADuB,IAAKvF,CAAAA,IADR,CAUtBwF,YAAY,EAAG,CACb,MAAO,UADM,CAMX,eAAc,EAAA,CAChB,MAAO,CAAA,CADS,CAQd,YAAW,EAAA,CACb,MAAO,KAAKjF,CAAAA,kBADC,CAQfkF,MAAM,EAAG,CACP,IAAK7H,CAAAA,SAAL,EACA;IAAK2C,CAAAA,kBAAL,CAA0B,CAAA,CAFnB,CASTmF,QAAQ,EAAG,CACT,IAAK9H,CAAAA,SAAL,EACA,KAAK2C,CAAAA,kBAAL,CAA0B,CAAA,CAFjB,CAaXoF,OAAO,CAACC,IAAD,CAAOC,YAAP,CAAqB,CAC1B,MAAO,CAAA,CADmB,CAa5BC,iBAAiB,CAACF,IAAD,CAAOG,OAAP,CAAgBF,YAAhB,CAA8B,CACvCG,IAAAA,CAAUD,OAAQE,CAAAA,eAExB,IAAI,CAACD,IAAL,CACE,MAAO,CAAA,CAGT,KAAKhI,CAAAA,UAAW8H,CAAAA,iBAAhB,CAAoC,CAAA,CACpC,KAAK9H,CAAAA,UAAWgI,CAAAA,OAAhB,CAA0BA,IAE1B,KAAK7D,CAAAA,qCAAL,CAA2C,IAAKnE,CAAAA,UAAhD,CAEA,OAAO,KAAKA,CAAAA,UAAW8H,CAAAA,iBAZsB,CAoB/CI,SAAS,EAAG,CACV,MAAO,KAAKnJ,CAAAA,YAAaoJ,CAAAA,MADf,CASZrB,QAAQ,EAAG,CACT,MAAO,KAAK7H,CAAAA,MADH,CAQP,oBAAmB,EAAA,CACrB,MAAO,KAAKgG,CAAAA,iBADS,CAgBnB,oBAAgB,CAAC9G,KAAD,CAAQ,CACtB,IAAK8G,CAAAA,iBAAT;AAA+B9G,KAA/B,GAIA,IAAK8G,CAAAA,iBAGL,CAHyB9G,KAGzB,CAFA,IAAK6G,CAAAA,eAEL,CAFuB7G,KAEvB,GAFiCC,QAASgK,CAAAA,0BAE1C,CAAA,IAAKC,CAAAA,uCAAL,EAPA,CAD0B,CAexB,yBAAwB,EAAA,CAC1B,MAAO,KAAKpD,CAAAA,iBAAZ,GAAkC7G,QAASkK,CAAAA,eAA3C,EAA8D,IAAKrD,CAAAA,iBAAnE,GAAyF7G,QAASmK,CAAAA,kBADxE,CAS5BC,iBAAiB,EAAG,CAClB,MAAI,KAAKC,CAAAA,qBAAT,CACS,CAAA,CADT,CAIoB,CAJpB,CAIO,IAAKC,CAAAA,KALM,CAcpBC,wBAAwB,CAACf,IAAD,CAAO,CAC7B,MAAsB,EAAtB,CAAIA,IAAKgB,CAAAA,UAAT,CACS,CAAA,CADT,CAII,IAAKH,CAAAA,qBAAT,CACS,CAAA,CADT,CAIOb,IAAKiB,CAAAA,cAJZ,EAI8B,IAAKL,CAAAA,iBAAL,EATD,CAiB/BM,gBAAgB,EAAG,CACjB,MAAI,KAAK9D,CAAAA,eAAT;AACS,CAAA,CADT,CAIO,CAAA,CALU,CAanB+D,sBAAsB,CAACnB,IAAD,CAAO,CAC3B,MAAO,CAAC,IAAKe,CAAAA,wBAAL,CAA8Bf,IAA9B,CAAR,EAA+C,IAAKkB,CAAAA,gBAAL,EADpB,CAS7BE,mBAAmB,EAAG,CACpB,MAAO,KADa,CAStBpJ,SAAS,CAACqJ,kBAAA,CAAqB,CAAA,CAAtB,CAA6B,CACpC,MAAMC,OAAS,IAAKpC,CAAAA,QAAL,EAAgBoC,CAAAA,MAE/B,KAAK,MAAMtB,IAAX,GAAmBsB,OAAnB,CACE,GAAKtB,IAAKuB,CAAAA,SAAV,CAIA,IAAK,MAAMpB,OAAX,GAAsBH,KAAKuB,CAAAA,SAA3B,CACMpB,OAAQqB,CAAAA,WAAR,EAAJ,GAA8B,IAA9B,EAIKrB,OAAQI,CAAAA,MAJb,GAQAJ,OAAQI,CAAAA,MAAOkB,CAAAA,mBAEf,CAFqC,CAAA,CAErC,CADAtB,OAAQI,CAAAA,MAAOmB,CAAAA,4BACf,CAD8C,IAC9C,CAAAvB,OAAQI,CAAAA,MAAOoB,CAAAA,sBAAf,CAAwCN,kBAVxC,CAcAA,mBAAJ,EACE,IAAK5J,CAAAA,WAAL,CAAiBjB,QAASoL,CAAAA,YAA1B,CAxBkC,CAgCtCC,QAAQ,CAACtB,MAAD;AAASuB,mBAAA,CAAsB,IAA/B,CAAqC,CAC3C,MAAMC,OAAS,IAAK1K,CAAAA,MAAOmH,CAAAA,SAAZ,EAGTwD,oBAAAA,EADqC,IAAvBC,EAAAH,mBAAAG,CAA8B,IAAKrD,CAAAA,eAAnCqD,CAAqDH,mBACnEE,IAA0BxL,QAASsI,CAAAA,wBACzCiD,OAAOG,CAAAA,YAAP,CAAoB3B,MAAA,CAASA,MAAT,CAAkB,IAAKvG,CAAAA,eAAL,EAAtC,CACA+H,OAAOI,CAAAA,QAAP,CAAgB,IAAKC,CAAAA,eAArB,CAAsC,IAAK1G,CAAAA,OAA3C,CAAoD,CAAA,CAApD,CAA2DsG,mBAA3D,CAAoE,IAAK3K,CAAAA,MAAOgL,CAAAA,uBAAZ,CAAsC,CAAC,IAAKC,CAAAA,aAA5C,CAA4D,IAAKA,CAAAA,aAArI,CAAoJ,IAAK3G,CAAAA,OAAzJ,CAAkK,IAAKF,CAAAA,YAAvK,CACA,OAAOuG,oBAPoC,CAiB7CrE,IAAI,CAAC4E,KAAD,CAAQvC,IAAR,CAAc,EAMlBwC,kBAAkB,EAAG,CACnB,MAAMC;AAAM,IAAK1L,CAAAA,cACjB,KAAKqB,CAAAA,UAAWqK,CAAAA,GAAhB,CAAsBA,GAEtB,KAAKpG,CAAAA,2BAAL,CAAiC/E,oBAAqBkI,CAAAA,mBAAoBkD,CAAAA,oBAA1E,CAAgG,IAAKtK,CAAAA,UAArG,CAEAqK,IAAIE,CAAAA,MAAJ,EACA,KAAKvG,CAAAA,yBAAL,CAAiC,CAAA,CAPd,CAiBrBwG,cAAc,CAACL,KAAD,CAAQvC,IAAR,CAAcG,OAAd,CAAuB,CAGnC,GAFMI,KAEN,CAFeJ,OAAQI,CAAAA,MAEvB,CAIA,IAAKnI,CAAAA,UAAW+H,CAAAA,OAIhB,CAJ0BA,OAI1B,CAFA,IAAKpD,CAAAA,kCAAL,CAAwC,IAAK3E,CAAAA,UAA7C,CAEA,CAAAmI,KAAOoB,CAAAA,sBAAP,CAAgC,CAAA,CAXG,CAoBrCkB,mBAAmB,CAACN,KAAD,CAAQ,EAO3BO,QAAQ,CAACvC,MAAD,CAAS,CACV,IAAK1E,CAAAA,OAAV,CAGE,IAAKkH,CAAAA,mBAHP,CAG6B,CAAA,CAH7B,CACExC,MAAOyC,CAAAA,SAAP,CAAiB,MAAjB,CAAyB,IAAK9D,CAAAA,QAAL,EAAgB+D,CAAAA,aAAhB,EAAzB,CAFa,CAajBC,kBAAkB,CAAC3C,MAAD,CAAS,CACpB,IAAK1E,CAAAA,OAAV;AAIE,IAAKkH,CAAAA,mBAJP,CAI6B,CAAA,CAJ7B,EACExC,MAAOyC,CAAAA,SAAP,CAAiB,gBAAjB,CAAmC,IAAK9D,CAAAA,QAAL,EAAgBiE,CAAAA,kBAAhB,EAAnC,CACA,CAAA5C,MAAOyC,CAAAA,SAAP,CAAiB,YAAjB,CAA+B,IAAK9D,CAAAA,QAAL,EAAgBkE,CAAAA,mBAAhB,EAA/B,CAFF,CADyB,CAe3BC,eAAe,CAAC9C,MAAD,CAAS+C,YAAT,CAAuB,CAC/B,IAAKzH,CAAAA,OAAV,CAGE,IAAKkH,CAAAA,mBAHP,CAG6B,CAAA,CAH7B,CACE,IAAK1L,CAAAA,MAAOgM,CAAAA,eAAZ,CAA4B9C,MAA5B,CAAoC+C,YAApC,CAFkC,CActCC,UAAU,CAACvD,IAAD,CAAOO,MAAA,CAAS,IAAhB,CAAsB,CAC9B,IAAKlJ,CAAAA,MAAOmM,CAAAA,eAAZ,CAA8B,IAE1B,KAAKT,CAAAA,mBAAT,EACMxC,MADN,GAEI,IAAKwC,CAAAA,mBAIL,CAJ2B,CAAA,CAI3B,CAFA7L,eAAgBuM,CAAAA,cAAeC,CAAAA,sBAA/B,CAAsDnD,MAAtD,CAA8D,IAAKrB,CAAAA,QAAL,EAAgByE,CAAAA,qBAAhB,EAA9D,CAEA;AAAA,IAAKtM,CAAAA,MAAOuM,CAAAA,gBAAZ,EANJ,CAWE,KAAKvM,CAAAA,MAAOwM,CAAAA,iBAAZ,CADE7D,IAAJ,CACkCA,IAAKgB,CAAAA,UADvC,CAGkC,CAG9B,KAAKrI,CAAAA,iBAAT,EAA8BqH,IAA9B,EACE,IAAKrH,CAAAA,iBAAkB4G,CAAAA,eAAvB,CAAuCS,IAAvC,CAGE,KAAK3E,CAAAA,iBAAT,GACQ0G,IAGN,CAHe,IAAK1K,CAAAA,MAAOmH,CAAAA,SAAZ,EAGf,CADA,IAAKzC,CAAAA,sBACL,CAD8BgG,IAAO+B,CAAAA,aAAP,EAC9B,CAAA/B,IAAOgC,CAAAA,aAAP,CAAqB,CAAA,CAArB,CAJF,CAOI,KAAK3I,CAAAA,iBAAT,GACQ2G,IAGN,CAHe,IAAK1K,CAAAA,MAAOmH,CAAAA,SAAZ,EAGf,CADA,IAAK1C,CAAAA,sBACL,CAD8BiG,IAAOiC,CAAAA,aAAP,EAC9B,CAAAjC,IAAOkC,CAAAA,aAAP,CAAqB,CAAA,CAArB,CAJF,CAO2B,EAA3B,GAAI,IAAK3I,CAAAA,aAAT,GACQyG,IAGN,CAHe,IAAK1K,CAAAA,MAAOmH,CAAAA,SAAZ,EAGf,CADA,IAAKxC,CAAAA,yBACL,CADiC+F,IAAOmC,CAAAA,gBAAP,EACjC;AAD8D,CAC9D,CAAAnC,IAAOoC,CAAAA,gBAAP,CAAwB,IAAK7I,CAAAA,aAA7B,CAJF,CArC8B,CAiDhC8I,MAAM,EAAG,CACH,IAAKrL,CAAAA,mBAAT,EACE,IAAKA,CAAAA,mBAAoBwG,CAAAA,eAAzB,CAAyC,IAAzC,CAGyB,EAA3B,GAAI,IAAKjE,CAAAA,aAAT,EACiB,IAAKjE,CAAAA,MAAOmH,CAAAA,SAAZuD,EAERoC,CAAAA,gBAAP,CAAwB,IAAKnI,CAAAA,yBAA7B,CAGE,KAAKX,CAAAA,iBAAT,EACiB,IAAKhE,CAAAA,MAAOmH,CAAAA,SAAZuD,EAERgC,CAAAA,aAAP,CAAqB,IAAKhI,CAAAA,sBAA1B,CAGE,KAAKX,CAAAA,iBAAT,EACiB,IAAK/D,CAAAA,MAAOmH,CAAAA,SAAZuD,EAERkC,CAAAA,aAAP,CAAqB,IAAKnI,CAAAA,sBAA1B,CApBK,CA6BTuI,cAAc,EAAG,CACf,IAAKjM,CAAAA,UAAWkM,CAAAA,WAAhB,CAA8B,EAE9B,KAAKjI,CAAAA,2BAAL,CAAiC/E,oBAAqBkI,CAAAA,mBAAoB+E,CAAAA,cAA1E;AAA0F,IAAKnM,CAAAA,UAA/F,CAEA,OAAO,KAAKA,CAAAA,UAAWkM,CAAAA,WALR,CAajBE,iBAAiB,EAAG,CAClB,IAAKpM,CAAAA,UAAWqM,CAAAA,cAAhB,CAAiC,EAEjC,KAAKpI,CAAAA,2BAAL,CAAiC/E,oBAAqBkI,CAAAA,mBAAoBkF,CAAAA,iBAA1E,CAA6F,IAAKtM,CAAAA,UAAlG,CAEA,OAAO,KAAKA,CAAAA,UAAWqM,CAAAA,cALL,CAcpBE,UAAU,CAACC,OAAD,CAAU,CAClB,IAAKxM,CAAAA,UAAWuM,CAAAA,UAAhB,CAA6B,CAAA,CAC7B,KAAKvM,CAAAA,UAAWwM,CAAAA,OAAhB,CAA0BA,OAE1B,KAAKvI,CAAAA,2BAAL,CAAiC/E,oBAAqBkI,CAAAA,mBAAoBqF,CAAAA,UAA1E,CAAsF,IAAKzM,CAAAA,UAA3F,CAEA,OAAO,KAAKA,CAAAA,UAAWuM,CAAAA,UANL,CAgBpBG,KAAK,CAAC1K,IAAD,CAAO,CACV,MAAO,KADG,CAIZ2K,aAAa,CAACC,cAAD;AAAiBC,OAAjB,CAA0B,CACrC,MAAMC,oBAAsB,EAE5B,KAAKC,CAAAA,iBAAL,CAAuBD,mBAAvB,CAEA1O,SAAS4O,CAAAA,aAAT,CAAuBF,mBAAvB,CAA4CF,cAA5C,CAA4D,IAAK3N,CAAAA,MAAjE,CAAyE4N,OAAzE,CAGA,IAAI,IAAKI,CAAAA,aAAT,CACE,IAAK,MAAMC,MAAX,GAAqB,KAAKD,CAAAA,aAAcE,CAAAA,QAAxC,CACQC,OACN,CADqBR,cAAeK,CAAAA,aAAcI,CAAAA,SAA7B,CAAuCH,MAAOlL,CAAAA,IAA9C,CACrB,CAAAkL,MAAOI,CAAAA,MAAP,CAAcF,OAAd,CAXiC,CAqBvCG,eAAe,EAAG,CAChB,GAAI,IAAKxJ,CAAAA,OAAT,CAAkB,CAChB,MAAMyJ,OAAS,EAEf,KAAK,MAAMC,MAAX,GAAqB,KAAK1J,CAAAA,OAA1B,CAAmC,CACjC,MAAM6D,KAAO,IAAK7D,CAAAA,OAAL,CAAa0J,MAAb,CAET7F,KAAJ,EACE4F,MAAOE,CAAAA,IAAP,CAAY9F,IAAZ,CAJ+B,CAQnC,MAAO4F,OAXS,CAchB,MADe,KAAKvO,CAAAA,MAAOiK,CAAAA,MACbyE,CAAAA,MAAP,CAAc/F,IAAA;AAAQA,IAAKgG,CAAAA,QAAb,GAA0B,IAAxC,CAfO,CA2BlBC,gBAAgB,CAACjG,IAAD,CAAOjF,UAAP,CAAmBmL,OAAnB,CAA4BpL,OAA5B,CAAqC,CACnD,MAAMqL,aAAe9P,MAAO+P,CAAAA,MAAP,CAAc,CACjCC,UAAW,CAAA,CADsB,CAEjCpG,aAAc,CAAA,CAFmB,CAAd,CAGlBiG,OAHkB,CAArB,CAIM7L,MAAQ,IAAK6E,CAAAA,QAAL,EAJd,CAKMoH,uBAAyB,IAAK9L,CAAAA,sBACpC,KAAKA,CAAAA,sBAAL,CAA8B,CAAA,CAE9B,OAAM+L,WAAa,EAAAA,EAAM,CACvB,GAAK,IAAKlP,CAAAA,MAAV,EAAqB,IAAKA,CAAAA,MAAOmH,CAAAA,SAAZ,EAArB,CAAA,CAIA,IAAMgI,eAAiBnM,KAAMgM,CAAAA,SAEzBF,aAAaE,CAAAA,SAAjB,GACEhM,KAAMgM,CAAAA,SADR,CACoB,IAAIpP,UAAWwP,CAAAA,KAAf,CAAqB,CAArB,CAAwB,CAAxB,CAA2B,CAA3B,CAA8B,CAA9B,CADpB,CAIA,IAAI,IAAKzL,CAAAA,uBAAT,CAAkC,CAAA,IAC5B0L,QAAU,CAAA,CADkB,CAE5BC,UAAY,IAEhB,IAAI3G,IAAKuB,CAAAA,SAAT,CAAoB,CAClB,MAAMqF;AAAc,IAAI9P,QAAS+P,CAAAA,OAAb,CAAqB,CAArB,CAAwB,CAAxB,CAA2B,CAA3B,CAA8B,CAA9B,CAAiC,CAAjC,CAAoC7G,IAApC,CAA0Cf,IAAAA,EAA1C,CAAqD,CAAA,CAArD,CAA4D,CAAA,CAA5D,CAEhB2H,YAAYvG,CAAAA,eAAhB,GACEuG,WAAYvG,CAAAA,eAAgByG,CAAAA,SAD9B,CAC0C,CAAC,CAD3C,CAIK,KAAK5G,CAAAA,iBAAL,CAAuBF,IAAvB,CAA6B4G,WAA7B,CAA0CT,YAAalG,CAAAA,YAAvD,CAAL,GACM2G,WAAYrG,CAAAA,MAAhB,EAA0BqG,WAAYrG,CAAAA,MAAOwG,CAAAA,mBAAnB,EAA1B,EAAsEH,WAAYrG,CAAAA,MAAOyG,CAAAA,qBAAnB,EAAtE,CACEL,SADF,CACcC,WAAYrG,CAAAA,MAAOwG,CAAAA,mBAAnB,EADd,EAGEL,OACA,CADU,CAAA,CACV,CAAAO,UAAA,CAAWV,UAAX,CAAuB,EAAvB,CAJF,CADF,CAPkB,CAiBhBG,OAAJ,GACE,IAAKlM,CAAAA,sBAQL,CAR8B8L,sBAQ9B,CANIK,SAMJ,EALM7L,OAKN,EAJIA,OAAA,CAAQ6L,SAAR,CAIJ,CAAI5L,UAAJ,EACEA,UAAA,CAAW,IAAX,CAVJ,CArBgC,CAAlC,IAmCM,KAAKgF,CAAAA,OAAL,EAAJ;CACE,IAAKvF,CAAAA,sBAEL,CAF8B8L,sBAE9B,CAAIvL,UAAJ,EACEA,UAAA,CAAW,IAAX,CAJJ,EAOEkM,UAAA,CAAWV,UAAX,CAAuB,EAAvB,CAIAJ,aAAaE,CAAAA,SAAjB,GACEhM,KAAMgM,CAAAA,SADR,CACoBG,cADpB,CAxDA,CADuB,CA8DzBD,WAAA,EAvEmD,CAiFrDW,qBAAqB,CAAClH,IAAD,CAAOkG,OAAP,CAAgB,CACnC,MAAO,KAAIiB,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,CAAA,EAAqB,CACtC,IAAKpB,CAAAA,gBAAL,CAAsBjG,IAAtB,CAA4B,EAAA,EAAM,CAChCoH,OAAA,EADgC,CAAlC,CAEGlB,OAFH,CAEYoB,MAAA,EAAU,CACpBD,MAAA,CAAOC,MAAP,CADoB,CAFtB,CADsC,CAAjC,CAD4B,CAerC7P,WAAW,CAAC8P,IAAD,CAAO,CACZ,IAAKrI,CAAAA,QAAL,EAAgBsI,CAAAA,2BAApB,EAAmD,IAAKzP,CAAAA,oBAAxD,GAIAvB,QAASiR,CAAAA,mBAAoBC,CAAAA,MA8B7B,CA9BsC,CA8BtC,CA5BIH,IA4BJ,CA5BW/Q,QAASqB,CAAAA,gBA4BpB,EA3BErB,QAASiR,CAAAA,mBAAoB3B,CAAAA,IAA7B,CAAkCtP,QAASmR,CAAAA,qBAA3C,CA2BF;AAxBIJ,IAwBJ,CAxBW/Q,QAASoR,CAAAA,cAwBpB,EAvBEpR,QAASiR,CAAAA,mBAAoB3B,CAAAA,IAA7B,CAAkCtP,QAASqR,CAAAA,oBAA3C,CAuBF,CApBIN,IAoBJ,CApBW/Q,QAASsR,CAAAA,gBAoBpB,EAnBEtR,QAASiR,CAAAA,mBAAoB3B,CAAAA,IAA7B,CAAkCtP,QAASuR,CAAAA,qBAA3C,CAmBF,CAhBIR,IAgBJ,CAhBW/Q,QAASwR,CAAAA,mBAgBpB,EAfExR,QAASiR,CAAAA,mBAAoB3B,CAAAA,IAA7B,CAAkCtP,QAASyR,CAAAA,uBAA3C,CAeF,CAZIV,IAYJ,CAZW/Q,QAASkB,CAAAA,aAYpB,EAXElB,QAASiR,CAAAA,mBAAoB3B,CAAAA,IAA7B,CAAkCtP,QAAS0R,CAAAA,kBAA3C,CAWF,CARIX,IAQJ,CARW/Q,QAASmB,CAAAA,gBAQpB,EAPEnB,QAASiR,CAAAA,mBAAoB3B,CAAAA,IAA7B,CAAkCtP,QAAS2R,CAAAA,qBAA3C,CAOF,CAJI3R,QAASiR,CAAAA,mBAAoBC,CAAAA,MAIjC;AAHE,IAAKU,CAAAA,wBAAL,CAA8B5R,QAAS6R,CAAAA,kBAAvC,CAGF,CAAA,IAAKnJ,CAAAA,QAAL,EAAgBoJ,CAAAA,mBAAhB,EAlCA,CADgB,CA0ClBC,cAAc,EAAG,CACf,MAAMjH,OAAS,IAAKpC,CAAAA,QAAL,EAAgBoC,CAAAA,MAE/B,KAAK,MAAMtB,IAAX,GAAmBsB,OAAnB,CACE,GAAKtB,IAAKuB,CAAAA,SAAV,CAIA,IAAK,MAAMpB,OAAX,GAAsBH,KAAKuB,CAAAA,SAA3B,CACMpB,OAAQqB,CAAAA,WAAR,EAAJ,GAA8B,IAA9B,EAIArB,OAAQoI,CAAAA,cAAR,EAbW,CAuBjBH,wBAAwB,CAACI,IAAD,CAAO,CAC7B,GAAoBhB,CAAhB,IAAKtI,CAAAA,QAAL,EAAgBsI,CAAAA,2BAApB,EAAwDzP,CAAL,IAAKA,CAAAA,oBAAxD,CAAA,CAIA,IAAMuJ,OAAS,IAAKpC,CAAAA,QAAL,EAAgBoC,CAAAA,MAE/B,KAAK,MAAMtB,IAAX,GAAmBsB,OAAnB,CACE,GAAKtB,IAAKuB,CAAAA,SAAV,CAIA,IAAK,MAAMpB,OAAX,GAAsBH,KAAKuB,CAAAA,SAA3B,CAEE,GAAIpB,OAAQqB,CAAAA,WAAR,CAAoB,CAAA,CAApB,CAAJ;AAAmC,IAAnC,CAIA,IAAK,MAAMtH,WAAX,GAA0BiG,QAAQsI,CAAAA,aAAlC,CACOvO,WAAL,EAAqBA,WAAYkG,CAAAA,OAAjC,EAA6ClG,WAAYkG,CAAAA,OAAQsI,CAAAA,cAAjE,EAII,IAAKnK,CAAAA,gBAJT,GAI8BrE,WAAYyE,CAAAA,eAJ1C,EAKE6J,IAAA,CAAKtO,WAAYkG,CAAAA,OAAjB,CAvBR,CAD6B,CAmC/BuI,sBAAsB,EAAG,CACvB,GAAoBnB,CAAhB,IAAKtI,CAAAA,QAAL,EAAgBsI,CAAAA,2BAApB,EAAwDzP,CAAL,IAAKA,CAAAA,oBAAxD,CAAA,CAIA,IAAM6Q,gBAAkB,IAAK1J,CAAAA,QAAL,EAAgB2J,CAAAA,qBAAhB,EAEpBD,gBAAJ,EACEA,eAAgBnR,CAAAA,WAAhB,EAPF,CADuB,CAgBzBwG,2BAA2B,EAAG,CAC5B,IAAKmK,CAAAA,wBAAL,CAA8B5R,QAASsS,CAAAA,iBAAvC,CAD4B,CAQ9BC,uCAAuC,EAAG,CACxC,IAAKX,CAAAA,wBAAL,CAA8B5R,QAASwS,CAAAA,6BAAvC,CADwC,CAQ1CtL,gCAAgC,EAAG,CACjC,IAAK0K,CAAAA,wBAAL,CAA8B5R,QAASmR,CAAAA,qBAAvC,CADiC,CAQnC9J,+BAA+B,EAAG,CAChC,IAAKuK,CAAAA,wBAAL,CAA8B5R,QAASuR,CAAAA,qBAAvC,CADgC,CAQlCkB,sCAAsC,EAAG,CACvC,IAAKb,CAAAA,wBAAL,CAA8B5R,QAAS0S,CAAAA,4BAAvC,CADuC,CAQzCtL,8BAA8B,EAAG,CAC/B,IAAKwK,CAAAA,wBAAL,CAA8B5R,QAASqR,CAAAA,oBAAvC,CAD+B,CAQjC/J,kCAAkC,EAAG,CACnC,IAAKsK,CAAAA,wBAAL,CAA8B5R,QAASyR,CAAAA,uBAAvC,CADmC,CAQrClK,4BAA4B,EAAG,CAC7B,IAAKqK,CAAAA,wBAAL,CAA8B5R,QAAS0R,CAAAA,kBAAvC,CAD6B,CAQ/BlK,+BAA+B,EAAG,CAChC,IAAKoK,CAAAA,wBAAL,CAA8B5R,QAAS0R,CAAAA,kBAAvC,CADgC,CAQlCzH,uCAAuC,EAAG,CACxC,IAAK2H,CAAAA,wBAAL,CAA8B5R,QAAS2S,CAAAA,4BAAvC,CADwC,CAI1CC,8BAA8B,EAAG,CAC/B,GAAI,IAAK/R,CAAAA,MAAOgS,CAAAA,mBAAhB;AAAwChS,MAAOiS,CAAAA,wBAAyBC,CAAAA,kBAAxE,CAA4F,CAC1F,IAAK5O,CAAAA,kBAAL,CAA0B,CAAA,CAE1B,OAAM6O,SAAW,IAAKnS,CAAAA,MAAOoS,CAAAA,2CAA4CC,CAAAA,OAAxD,CAAgE,EAAA,EAAM,CACrF,IAAK/O,CAAAA,kBAAL,CAA0B,CAAA,CAD2D,CAAtE,CAKjB,KAAKnC,CAAAA,mBAAoBE,CAAAA,GAAzB,CAA6B,EAAA,EAAM,CACjC,IAAKrB,CAAAA,MAAOoS,CAAAA,2CAA4ChR,CAAAA,MAAxD,CAA+D+Q,QAA/D,CADiC,CAAnC,CAR0F,CAD7D,CAsBjCG,kBAAkB,CAACf,eAAD,CAAkB,CAElC,MAAO,CAAA,CAF2B,CAYpCgB,OAAO,CAACC,kBAAD,CAAqBC,oBAArB,CAA2CC,cAA3C,CAA2D,CAChE,MAAM1P,MAAQ,IAAK6E,CAAAA,QAAL,EAEd7E,MAAM2P,CAAAA,aAAN,CAAoB,IAApB,CACA3P,MAAM4P,CAAAA,sBAAN,EAEA5P,MAAM6P,CAAAA,cAAN,CAAqB,IAArB,CACA;IAAK9R,CAAAA,UAAW0R,CAAAA,oBAAhB,CAAuCA,oBAEvC,KAAKzN,CAAAA,2BAAL,CAAiC/E,oBAAqBkI,CAAAA,mBAAoB2K,CAAAA,QAA1E,CAAoF,IAAK/R,CAAAA,UAAzF,CAEI,KAAK8D,CAAAA,gBAAT,GACQkO,oBAMN,CANc,IAAKlO,CAAAA,gBAAiBmO,CAAAA,SAAUC,CAAAA,OAAhC,CAAwC,IAAxC,CAMd,CAJY,CAAC,CAIb,CAJIF,oBAIJ,EAHE,IAAKlO,CAAAA,gBAAiBmO,CAAAA,SAAUE,CAAAA,MAAhC,CAAuCH,oBAAvC,CAA8C,CAA9C,CAGF,CAAA,IAAKlO,CAAAA,gBAAL,CAAwB,IAP1B,CAUA,IAAuB,CAAA,CAAvB,GAAI6N,cAAJ,CAEE,GAAI,IAAK5N,CAAAA,OAAT,CACE,IAAK,IAAM0J,MAAX,GAAqB,KAAK1J,CAAAA,OAA1B,CAAmC,CACjC,IAAM6D,KAAO,IAAK7D,CAAAA,OAAL,CAAa0J,MAAb,CAET7F,KAAJ,GACEA,IAAKgG,CAAAA,QAEL,CAFgB,IAEhB,CAAA,IAAKwE,CAAAA,wBAAL,CAA8BxK,IAA9B;AAAoC6J,kBAApC,CAHF,CAHiC,CADrC,IAUO,CACCvI,MAAAA,CAASjH,KAAMiH,CAAAA,MAErB,KAAWtB,IAAX,GAAmBsB,OAAnB,CACMtB,IAAKgG,CAAAA,QAAT,GAAsB,IAAtB,EAA+BhG,IAAKyK,CAAAA,UAApC,GACEzK,IAAKgG,CAAAA,QACL,CADgB,IAChB,CAAA,IAAKwE,CAAAA,wBAAL,CAA8BxK,IAA9B,CAAoC6J,kBAApC,CAFF,CAJG,CAYT,IAAK9S,CAAAA,cAAe6S,CAAAA,OAApB,EAGIC,mBAAJ,EAA0B,IAAK1S,CAAAA,YAAaoJ,CAAAA,MAA5C,GACO,IAAKvF,CAAAA,uBAIV,EAHE,IAAK7D,CAAAA,YAAaoJ,CAAAA,MAAOqJ,CAAAA,OAAzB,EAGF,CAAA,IAAKzS,CAAAA,YAAaoJ,CAAAA,MAAlB,CAA2B,IAL7B,CAQA,KAAK7F,CAAAA,QAAL,CAAgB,IAEhB,KAAKlC,CAAAA,mBAAoB+G,CAAAA,eAAzB,CAAyC,IAAzC,CACA,KAAK/G,CAAAA,mBAAoBkS,CAAAA,KAAzB,EAEI,KAAK/R,CAAAA,iBAAT,EACE,IAAKA,CAAAA,iBAAkB+R,CAAAA,KAAvB,EAGE;IAAK3R,CAAAA,mBAAT,EACE,IAAKA,CAAAA,mBAAoB2R,CAAAA,KAAzB,EAGE,KAAK1R,CAAAA,0BAAT,EACE,IAAKA,CAAAA,0BAA2B0R,CAAAA,KAAhC,EAGE,KAAKtS,CAAAA,UAAT,GACE,IAAKA,CAAAA,UADP,CACoB,EADpB,CAzEgE,CAmFlEoS,wBAAwB,CAACxK,IAAD,CAAO6J,kBAAP,CAA2B,CACjD,GAAI7J,IAAK2K,CAAAA,QAAT,CAAmB,CACjB,MAAMA,SAAW3K,IAAK2K,CAAAA,QAEtB,IAAI,IAAK3P,CAAAA,uBAAT,CACE,IAAK,MAAMmF,OAAX,GAAsBH,KAAKuB,CAAAA,SAA3B,CACEoJ,QAASC,CAAAA,yBAAT,CAAmCzK,OAAQI,CAAAA,MAA3C,CAEA,CAAIsJ,kBAAJ,EAA0B1J,OAAQI,CAAAA,MAAlC,EACEJ,OAAQI,CAAAA,MAAOqJ,CAAAA,OAAf,EALN,KASEe,SAASC,CAAAA,yBAAT,CAAmC,IAAKzT,CAAAA,YAAaoJ,CAAAA,MAArD,CAZe,CAD8B,CAuBnDsK,SAAS,EAAG,CACV,MAAM3F;AAAsBxO,WAAYoU,CAAAA,mBAAoBC,CAAAA,SAAhC,CAA0C,IAA1C,CAE5B7F,oBAAoBvJ,CAAAA,OAApB,CAA8B,IAAKA,CAAAA,OAAQkP,CAAAA,SAAb,EAC9B3F,oBAAoB7G,CAAAA,QAApB,CAA+B,IAAKA,CAAAA,QAEpC,KAAK8G,CAAAA,iBAAL,CAAuBD,mBAAvB,CAEA,OAAOA,oBARG,CAWZC,iBAAiB,CAACD,mBAAD,CAAsB,CACrCA,mBAAoB8F,CAAAA,OAApB,CAA8B,EAE9B,IAAI,IAAK3F,CAAAA,aAAT,CACE,IAAK,MAAMC,MAAX,GAAqB,KAAKD,CAAAA,aAAcE,CAAAA,QAAxC,CACEL,mBAAoB8F,CAAAA,OAApB,CAA4B1F,MAAO1F,CAAAA,YAAP,EAA5B,CAAA,CAAqD0F,MAAOuF,CAAAA,SAAP,EALpB,CAkBhCI,YAAK,CAACC,cAAD,CAAiB7Q,KAAjB,CAAwB4K,OAAxB,CAAiC,CAC3C,GAAI,CAACiG,cAAeC,CAAAA,UAApB,CACED,cAAeC,CAAAA,UAAf;AAA4B,0BAD9B,KAEO,IAAkC,qBAAlC,GAAID,cAAeC,CAAAA,UAAnB,EAA2DD,cAAeE,CAAAA,gBAA1E,GACLF,cAAeC,CAAAA,UAEX,CAFwB,2BAExB,CAAA,CAACE,OAAQC,CAAAA,iBAHR,EAMH,MAFAtU,QAAQuU,CAAAA,MAAOC,CAAAA,KAAf,CAAqB,kHAArB,CAEO,CAAA,IAMLxF,MAAAA,CAFerP,MAAOwH,CAAAA,KAAMsN,CAAAA,WAAbC,CAAyBR,cAAeC,CAAAA,UAAxCO,CAEST,CAAAA,KAAb,CAAmBC,cAAnB,CAAmC7Q,KAAnC,CAA0C4K,OAA1C,CACjBe,MAAS2F,CAAAA,eAAT,CAA2BT,cAAe7M,CAAAA,QAC1C,OAAO2H,MAjBoC,CAoBtCZ,oBAAa,CAACF,mBAAD;AAAsBc,QAAtB,CAAgC3L,KAAhC,CAAuC4K,OAAvC,CAAgD,CAClE,IAAI2G,EAEJ,IAAK1G,mBAAoB8F,CAAAA,OAAzB,CAIA,IAAK,MAAMa,eAAX,GAA8B3G,oBAAoB8F,CAAAA,OAAlD,CAA2D,CACzD,MAAMc,WAAa5G,mBAAoB8F,CAAAA,OAApB,CAA4Ba,eAA5B,CACnB,KAAIvG,OAA2C,IAAlC,IAACsG,EAAD,CAAM5F,QAASX,CAAAA,aAAf,GAAiD,IAAK,EAAtD,GAA0CuG,EAA1C,CAA0D,IAAK,EAA/D,CAAmEA,EAAGnG,CAAAA,SAAH,CAAaqG,UAAW1R,CAAAA,IAAxB,CAEhF,IAAI,CAACkL,MAAL,CAAa,CACX,MAAMyG,gBAAkBpV,MAAOwH,CAAAA,KAAMsN,CAAAA,WAAb,CAAyB,UAAzB,CAAsCI,eAAtC,CAEpBE,gBAAJ,GACEzG,MADF,CACW,IAAIyG,eAAJ,CAAoB/F,QAApB,CADX,CAHW,CAQF,IAAX,GAAAV,MAAA,EAA8B,IAAK,EAAnC,GAAmBA,MAAnB,CAAuC,IAAK,EAA5C,CAAgDA,MAAO0G,CAAAA,KAAP,CAAaF,UAAb,CAAyBzR,KAAzB,CAAgC4K,OAAhC,CAZS,CAPO,CA9mDtE,CA2oDA7O,OAAQI,CAAAA,QAAR;AAAmBA,QACnBA,SAASoD,CAAAA,gBAAT,CAA4B,CAK5BpD,SAAS8C,CAAAA,iBAAT,CAA6B,CAK7B9C,SAASqD,CAAAA,aAAT,CAAyB,CAKzBrD,SAASsD,CAAAA,iBAAT,CAA6B,CAK7BtD,SAAS+C,CAAAA,gBAAT,CAA4B,CAK5B/C,SAASgD,CAAAA,gBAAT,CAA4B,CAK5BhD,SAASiD,CAAAA,iBAAT,CAA6B,CAK7BjD,SAASyV,CAAAA,qBAAT,CAAiC,CAKjCzV,SAAS0V,CAAAA,mBAAT,CAA+B,CAK/B1V,SAASsI,CAAAA,wBAAT,CAAoC,CAKpCtI,SAASuI,CAAAA,+BAAT,CAA2C,CAK3CvI,SAASqB,CAAAA,gBAAT,CAA4B,CAK5BrB,SAASoR,CAAAA,cAAT,CAA0B,CAK1BpR,SAASsR,CAAAA,gBAAT,CAA4B,CAK5BtR,SAASwR,CAAAA,mBAAT,CAA+B,CAK/BxR,SAASkB,CAAAA,aAAT,CAAyB,EAKzBlB,SAASmB,CAAAA,gBAAT;AAA4B,EAK5BnB,SAASoL,CAAAA,YAAT,CAAwB,EAKxBpL,SAASkK,CAAAA,eAAT,CAA2B,CAK3BlK,SAASmK,CAAAA,kBAAT,CAA8B,CAK9BnK,SAAS2V,CAAAA,mBAAT,CAA+B,CAM/B3V,SAASgK,CAAAA,0BAAT,CAAsC,CAMtChK,SAAS4V,CAAAA,mCAAT,CAA+C,CAM/C5V,SAAS6V,CAAAA,8BAAT,CAA0C,CAK1C7V,SAAS8I,CAAAA,iBAAT,CAA6B,IAAI1I,WAAYgC,CAAAA,UAE7CpC,SAASsS,CAAAA,iBAAT,CAA6B1I,OAAAkM,EAAWlM,OAAQsI,CAAAA,cAAR,EAExClS,SAASwS,CAAAA,6BAAT,CAAyC5I,OAAAmM,EAAWnM,OAAQoM,CAAAA,0BAAR,EAEpDhW,SAASmR,CAAAA,qBAAT,CAAiCvH,OAAAqM,EAAWrM,OAAQsM,CAAAA,mBAAR,EAE5ClW;QAASuR,CAAAA,qBAAT,CAAiC3H,OAAAuM,EAAWvM,OAAQwM,CAAAA,kBAAR,EAE5CpW,SAAS0R,CAAAA,kBAAT,CAA8B9H,OAAAyM,EAAWzM,OAAQ0M,CAAAA,eAAR,EAEzCtW,SAAS2R,CAAAA,qBAAT,CAAiC/H,OAAA2M,EAAW3M,OAAQ4M,CAAAA,kBAAR,EAE5CxW,SAASqR,CAAAA,oBAAT,CAAgCzH,OAAA6M,EAAW7M,OAAQ8M,CAAAA,gBAAR,EAE3C1W,SAASyR,CAAAA,uBAAT,CAAmC7H,OAAA+M,EAAW/M,OAAQgN,CAAAA,qBAAR,EAE9C5W,SAAS0S,CAAAA,4BAAT,CAAwC9I,OAAAiN,EAAW,CACjD7W,QAASuR,CAAAA,qBAAT,CAA+B3H,OAA/B,CAEA5J,SAAS0R,CAAAA,kBAAT,CAA4B9H,OAA5B,CAHiD,CAMnD5J,SAAS2S,CAAAA,4BAAT;AAAwC/I,OAAAkN,EAAW,CACjD9W,QAASmR,CAAAA,qBAAT,CAA+BvH,OAA/B,CAEA5J,SAAS0R,CAAAA,kBAAT,CAA4B9H,OAA5B,CAHiD,CAMnD5J,SAASiR,CAAAA,mBAAT,CAA+B,EAE/BjR,SAAS6R,CAAAA,kBAAT,CAA8BjI,OAAAmN,EAAW,CACvC,IAAK,MAAMC,EAAX,GAAiBhX,SAASiR,CAAAA,mBAA1B,CACE+F,EAAA,CAAGpN,OAAH,CAFqC,CAMzC,IAAI3J,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,IAA7E,CAAmF,IAAK,EAAxF,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,UAA7E,CAAyF,IAAK,EAA9F,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,MAA7E,CAAqF,IAAK,EAA1F,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB;AAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,UAA7E,CAAyF,IAAK,EAA9F,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,uBAA7E,CAAsG,IAAK,EAA3G,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,oBAA7E,CAAmG,IAAK,EAAxG,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,OAA7E,CAAsF,IAAK,EAA3F,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,EAA2B,OAA3B,CAAD,CAAzB,CAAgErU,QAASkX,CAAAA,SAAzE,CAAoF,QAApF,CAA8F,IAAK,EAAnG,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,EAA2B,iBAA3B,CAAD,CAAzB,CAA0ErU,QAASkX,CAAAA,SAAnF;AAA8F,kBAA9F,CAAkH,IAAK,EAAvH,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,EAA2B,eAA3B,CAAD,CAAzB,CAAwErU,QAASkX,CAAAA,SAAjF,CAA4F,gBAA5F,CAA8G,IAAK,EAAnH,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,iBAA7E,CAAgG,IAAK,EAArG,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,EAA2B,WAA3B,CAAD,CAAzB,CAAoErU,QAASkX,CAAAA,SAA7E,CAAwF,YAAxF,CAAsG,IAAK,EAA3G,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,mBAA7E,CAAkG,IAAK,EAAvG,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE;AAA6E,mBAA7E,CAAkG,IAAK,EAAvG,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,mBAA7E,CAAkG,IAAK,EAAvG,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,iBAA7E,CAAgG,IAAK,EAArG,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,eAA7E,CAA8F,IAAK,EAAnG,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,qBAA7E,CAAoG,IAAK,EAAzG,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,EAA2B,YAA3B,CAAD,CAAzB,CAAqErU,QAASkX,CAAAA,SAA9E;AAAyF,aAAzF,CAAwG,IAAK,EAA7G,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,WAA7E,CAA0F,IAAK,EAA/F,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,SAA7E,CAAwF,IAAK,EAA7F,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,cAA7E,CAA6F,IAAK,EAAlG,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,aAA7E,CAA4F,IAA5F,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB,CAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,UAA7E,CAAyF,IAAzF,CACA,IAAIjX,MAASgX,CAAAA,UAAb,EAAyB,CAAC,GAAI/W,WAAYmU,CAAAA,SAAhB,GAAD,CAAzB;AAAyDrU,QAASkX,CAAAA,SAAlE,CAA6E,kBAA7E,CAAiG,IAAjG,CA52DmH;",
"sources":["node_modules/@babylonjs/core/Materials/material.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Materials$material\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Material = void 0;\n\nvar _tslibEs = require(\"../tslib.es6.js\");\n\nvar _decorators = require(\"../Misc/decorators.js\");\n\nvar _tools = require(\"../Misc/tools.js\");\n\nvar _observable = require(\"../Misc/observable.js\");\n\nvar _engineStore = require(\"../Engines/engineStore.js\");\n\nvar _subMesh = require(\"../Meshes/subMesh.js\");\n\nvar _uniformBuffer = require(\"./uniformBuffer.js\");\n\nvar _logger = require(\"../Misc/logger.js\");\n\nvar _mathPlane = require(\"../Maths/math.plane.js\");\n\nvar _materialHelper = require(\"./materialHelper.js\");\n\nvar _drawWrapper = require(\"./drawWrapper.js\");\n\nvar _materialStencilState = require(\"./materialStencilState.js\");\n\nvar _scene = require(\"../scene.js\");\n\nvar _materialPluginEvent = require(\"./materialPluginEvent.js\");\n\n/**\n * Base class for the main features of a material in Babylon.js\n */\nclass Material {\n  /**\n   * If the material can be rendered to several textures with MRT extension\n   */\n  get canRenderToMRT() {\n    // By default, shaders are not compatible with MRTs\n    // Base classes should override that if their shader supports MRT\n    return false;\n  }\n  /**\n   * Sets the alpha value of the material\n   */\n\n\n  set alpha(value) {\n    if (this._alpha === value) {\n      return;\n    }\n\n    const oldValue = this._alpha;\n    this._alpha = value; // Only call dirty when there is a state change (no alpha / alpha)\n\n    if (oldValue === 1 || value === 1) {\n      this.markAsDirty(Material.MiscDirtyFlag + Material.PrePassDirtyFlag);\n    }\n  }\n  /**\n   * Gets the alpha value of the material\n   */\n\n\n  get alpha() {\n    return this._alpha;\n  }\n  /**\n   * Sets the culling state (true to enable culling, false to disable)\n   */\n\n\n  set backFaceCulling(value) {\n    if (this._backFaceCulling === value) {\n      return;\n    }\n\n    this._backFaceCulling = value;\n    this.markAsDirty(Material.TextureDirtyFlag);\n  }\n  /**\n   * Gets the culling state\n   */\n\n\n  get backFaceCulling() {\n    return this._backFaceCulling;\n  }\n  /**\n   * Sets the type of faces that should be culled (true for back faces, false for front faces)\n   */\n\n\n  set cullBackFaces(value) {\n    if (this._cullBackFaces === value) {\n      return;\n    }\n\n    this._cullBackFaces = value;\n    this.markAsDirty(Material.TextureDirtyFlag);\n  }\n  /**\n   * Gets the type of faces that should be culled\n   */\n\n\n  get cullBackFaces() {\n    return this._cullBackFaces;\n  }\n  /**\n   * Block the dirty-mechanism for this specific material\n   * When set to false after being true the material will be marked as dirty.\n   */\n\n\n  get blockDirtyMechanism() {\n    return this._blockDirtyMechanism;\n  }\n\n  set blockDirtyMechanism(value) {\n    if (this._blockDirtyMechanism === value) {\n      return;\n    }\n\n    this._blockDirtyMechanism = value;\n\n    if (!value) {\n      this.markDirty();\n    }\n  }\n  /**\n   * This allows you to modify the material without marking it as dirty after every change.\n   * This function should be used if you need to make more than one dirty-enabling change to the material - adding a texture, setting a new fill mode and so on.\n   * The callback will pass the material as an argument, so you can make your changes to it.\n   * @param callback the callback to be executed that will update the material\n   */\n\n\n  atomicMaterialsUpdate(callback) {\n    this.blockDirtyMechanism = true;\n\n    try {\n      callback(this);\n    } finally {\n      this.blockDirtyMechanism = false;\n    }\n  }\n  /**\n   * Gets a boolean indicating that current material needs to register RTT\n   */\n\n\n  get hasRenderTargetTextures() {\n    this._eventInfo.hasRenderTargetTextures = false;\n\n    this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n\n    return this._eventInfo.hasRenderTargetTextures;\n  }\n  /**\n   * Called during a dispose event\n   */\n\n\n  set onDispose(callback) {\n    if (this._onDisposeObserver) {\n      this.onDisposeObservable.remove(this._onDisposeObserver);\n    }\n\n    this._onDisposeObserver = this.onDisposeObservable.add(callback);\n  }\n  /**\n   * An event triggered when the material is bound\n   */\n\n\n  get onBindObservable() {\n    if (!this._onBindObservable) {\n      this._onBindObservable = new _observable.Observable();\n    }\n\n    return this._onBindObservable;\n  }\n  /**\n   * Called during a bind event\n   */\n\n\n  set onBind(callback) {\n    if (this._onBindObserver) {\n      this.onBindObservable.remove(this._onBindObserver);\n    }\n\n    this._onBindObserver = this.onBindObservable.add(callback);\n  }\n  /**\n   * An event triggered when the material is unbound\n   */\n\n\n  get onUnBindObservable() {\n    if (!this._onUnBindObservable) {\n      this._onUnBindObservable = new _observable.Observable();\n    }\n\n    return this._onUnBindObservable;\n  }\n  /**\n   * An event triggered when the effect is (re)created\n   */\n\n\n  get onEffectCreatedObservable() {\n    if (!this._onEffectCreatedObservable) {\n      this._onEffectCreatedObservable = new _observable.Observable();\n    }\n\n    return this._onEffectCreatedObservable;\n  }\n  /**\n   * Sets the value of the alpha mode.\n   *\n   * | Value | Type | Description |\n   * | --- | --- | --- |\n   * | 0 | ALPHA_DISABLE |   |\n   * | 1 | ALPHA_ADD |   |\n   * | 2 | ALPHA_COMBINE |   |\n   * | 3 | ALPHA_SUBTRACT |   |\n   * | 4 | ALPHA_MULTIPLY |   |\n   * | 5 | ALPHA_MAXIMIZED |   |\n   * | 6 | ALPHA_ONEONE |   |\n   * | 7 | ALPHA_PREMULTIPLIED |   |\n   * | 8 | ALPHA_PREMULTIPLIED_PORTERDUFF |   |\n   * | 9 | ALPHA_INTERPOLATE |   |\n   * | 10 | ALPHA_SCREENMODE |   |\n   *\n   */\n\n\n  set alphaMode(value) {\n    if (this._alphaMode === value) {\n      return;\n    }\n\n    this._alphaMode = value;\n    this.markAsDirty(Material.TextureDirtyFlag);\n  }\n  /**\n   * Gets the value of the alpha mode\n   */\n\n\n  get alphaMode() {\n    return this._alphaMode;\n  }\n  /**\n   * Sets the need depth pre-pass value\n   */\n\n\n  set needDepthPrePass(value) {\n    if (this._needDepthPrePass === value) {\n      return;\n    }\n\n    this._needDepthPrePass = value;\n\n    if (this._needDepthPrePass) {\n      this.checkReadyOnEveryCall = true;\n    }\n  }\n  /**\n   * Gets the depth pre-pass value\n   */\n\n\n  get needDepthPrePass() {\n    return this._needDepthPrePass;\n  }\n  /**\n   * Can this material render to prepass\n   */\n\n\n  get isPrePassCapable() {\n    return false;\n  }\n  /**\n   * Sets the state for enabling fog\n   */\n\n\n  set fogEnabled(value) {\n    if (this._fogEnabled === value) {\n      return;\n    }\n\n    this._fogEnabled = value;\n    this.markAsDirty(Material.MiscDirtyFlag);\n  }\n  /**\n   * Gets the value of the fog enabled state\n   */\n\n\n  get fogEnabled() {\n    return this._fogEnabled;\n  }\n\n  get wireframe() {\n    switch (this._fillMode) {\n      case Material.WireFrameFillMode:\n      case Material.LineListDrawMode:\n      case Material.LineLoopDrawMode:\n      case Material.LineStripDrawMode:\n        return true;\n    }\n\n    return this._scene.forceWireframe;\n  }\n  /**\n   * Sets the state of wireframe mode\n   */\n\n\n  set wireframe(value) {\n    this.fillMode = value ? Material.WireFrameFillMode : Material.TriangleFillMode;\n  }\n  /**\n   * Gets the value specifying if point clouds are enabled\n   */\n\n\n  get pointsCloud() {\n    switch (this._fillMode) {\n      case Material.PointFillMode:\n      case Material.PointListDrawMode:\n        return true;\n    }\n\n    return this._scene.forcePointsCloud;\n  }\n  /**\n   * Sets the state of point cloud mode\n   */\n\n\n  set pointsCloud(value) {\n    this.fillMode = value ? Material.PointFillMode : Material.TriangleFillMode;\n  }\n  /**\n   * Gets the material fill mode\n   */\n\n\n  get fillMode() {\n    return this._fillMode;\n  }\n  /**\n   * Sets the material fill mode\n   */\n\n\n  set fillMode(value) {\n    if (this._fillMode === value) {\n      return;\n    }\n\n    this._fillMode = value;\n    this.markAsDirty(Material.MiscDirtyFlag);\n  }\n  /** @internal */\n\n\n  _getDrawWrapper() {\n    return this._drawWrapper;\n  }\n  /**\n   * @internal\n   */\n\n\n  _setDrawWrapper(drawWrapper) {\n    this._drawWrapper = drawWrapper;\n  }\n  /**\n   * Creates a material instance\n   * @param name defines the name of the material\n   * @param scene defines the scene to reference\n   * @param doNotAdd specifies if the material should be added to the scene\n   */\n\n\n  constructor(name, scene, doNotAdd) {\n    /**\n     * Custom shadow depth material to use for shadow rendering instead of the in-built one\n     */\n    this.shadowDepthWrapper = null;\n    /**\n     * Gets or sets a boolean indicating that the material is allowed (if supported) to do shader hot swapping.\n     * This means that the material can keep using a previous shader while a new one is being compiled.\n     * This is mostly used when shader parallel compilation is supported (true by default)\n     */\n\n    this.allowShaderHotSwapping = true;\n    /**\n     * Gets or sets user defined metadata\n     */\n\n    this.metadata = null;\n    /**\n     * For internal use only. Please do not use.\n     */\n\n    this.reservedDataStore = null;\n    /**\n     * Specifies if the ready state should be checked on each call\n     */\n\n    this.checkReadyOnEveryCall = false;\n    /**\n     * Specifies if the ready state should be checked once\n     */\n\n    this.checkReadyOnlyOnce = false;\n    /**\n     * The state of the material\n     */\n\n    this.state = \"\";\n    /**\n     * The alpha value of the material\n     */\n\n    this._alpha = 1.0;\n    /**\n     * Specifies if back face culling is enabled\n     */\n\n    this._backFaceCulling = true;\n    /**\n     * Specifies if back or front faces should be culled (when culling is enabled)\n     */\n\n    this._cullBackFaces = true;\n    this._blockDirtyMechanism = false;\n    /**\n     * Callback triggered when the material is compiled\n     */\n\n    this.onCompiled = null;\n    /**\n     * Callback triggered when an error occurs\n     */\n\n    this.onError = null;\n    /**\n     * Callback triggered to get the render target textures\n     */\n\n    this.getRenderTargetTextures = null;\n    /**\n     * Specifies if the material should be serialized\n     */\n\n    this.doNotSerialize = false;\n    /**\n     * @internal\n     */\n\n    this._storeEffectOnSubMeshes = false;\n    /**\n     * Stores the animations for the material\n     */\n\n    this.animations = null;\n    /**\n     * An event triggered when the material is disposed\n     */\n\n    this.onDisposeObservable = new _observable.Observable();\n    /**\n     * An observer which watches for dispose events\n     */\n\n    this._onDisposeObserver = null;\n    this._onUnBindObservable = null;\n    /**\n     * An observer which watches for bind events\n     */\n\n    this._onBindObserver = null;\n    /**\n     * Stores the value of the alpha mode\n     */\n\n    this._alphaMode = 2;\n    /**\n     * Stores the state of the need depth pre-pass value\n     */\n\n    this._needDepthPrePass = false;\n    /**\n     * Specifies if depth writing should be disabled\n     */\n\n    this.disableDepthWrite = false;\n    /**\n     * Specifies if color writing should be disabled\n     */\n\n    this.disableColorWrite = false;\n    /**\n     * Specifies if depth writing should be forced\n     */\n\n    this.forceDepthWrite = false;\n    /**\n     * Specifies the depth function that should be used. 0 means the default engine function\n     */\n\n    this.depthFunction = 0;\n    /**\n     * Specifies if there should be a separate pass for culling\n     */\n\n    this.separateCullingPass = false;\n    /**\n     * Stores the state specifying if fog should be enabled\n     */\n\n    this._fogEnabled = true;\n    /**\n     * Stores the size of points\n     */\n\n    this.pointSize = 1.0;\n    /**\n     * Stores the z offset Factor value\n     */\n\n    this.zOffset = 0;\n    /**\n     * Stores the z offset Units value\n     */\n\n    this.zOffsetUnits = 0;\n    /**\n     * Gives access to the stencil properties of the material\n     */\n\n    this.stencil = new _materialStencilState.MaterialStencilState();\n    /**\n     * Specifies if uniform buffers should be used\n     */\n\n    this._useUBO = false;\n    /**\n     * Stores the fill mode state\n     */\n\n    this._fillMode = Material.TriangleFillMode;\n    /**\n     * Specifies if the depth write state should be cached\n     */\n\n    this._cachedDepthWriteState = false;\n    /**\n     * Specifies if the color write state should be cached\n     */\n\n    this._cachedColorWriteState = false;\n    /**\n     * Specifies if the depth function state should be cached\n     */\n\n    this._cachedDepthFunctionState = 0;\n    /** @internal */\n\n    this._indexInSceneMaterialArray = -1;\n    /** @internal */\n\n    this.meshMap = null;\n    /** @internal */\n\n    this._parentContainer = null;\n    /** @internal */\n\n    this._uniformBufferLayoutBuilt = false;\n    this._eventInfo = {}; // will be initialized before each event notification\n\n    /** @internal */\n\n    this._callbackPluginEventGeneric = () => void 0;\n    /** @internal */\n\n\n    this._callbackPluginEventIsReadyForSubMesh = () => void 0;\n    /** @internal */\n\n\n    this._callbackPluginEventPrepareDefines = () => void 0;\n    /** @internal */\n\n\n    this._callbackPluginEventPrepareDefinesBeforeAttributes = () => void 0;\n    /** @internal */\n\n\n    this._callbackPluginEventHardBindForSubMesh = () => void 0;\n    /** @internal */\n\n\n    this._callbackPluginEventBindForSubMesh = () => void 0;\n    /** @internal */\n\n\n    this._callbackPluginEventHasRenderTargetTextures = () => void 0;\n    /** @internal */\n\n\n    this._callbackPluginEventFillRenderTargetTextures = () => void 0;\n    /**\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\n     */\n\n\n    this._forceAlphaTest = false;\n    /**\n     * The transparency mode of the material.\n     */\n\n    this._transparencyMode = null;\n    this.name = name;\n    const setScene = scene || _engineStore.EngineStore.LastCreatedScene;\n\n    if (!setScene) {\n      return;\n    }\n\n    this._scene = setScene;\n    this._dirtyCallbacks = {};\n    this._dirtyCallbacks[1] = this._markAllSubMeshesAsTexturesDirty.bind(this);\n    this._dirtyCallbacks[2] = this._markAllSubMeshesAsLightsDirty.bind(this);\n    this._dirtyCallbacks[4] = this._markAllSubMeshesAsFresnelDirty.bind(this);\n    this._dirtyCallbacks[8] = this._markAllSubMeshesAsAttributesDirty.bind(this);\n    this._dirtyCallbacks[16] = this._markAllSubMeshesAsMiscDirty.bind(this);\n    this._dirtyCallbacks[32] = this._markAllSubMeshesAsPrePassDirty.bind(this);\n    this._dirtyCallbacks[63] = this._markAllSubMeshesAsAllDirty.bind(this);\n    this.id = name || _tools.Tools.RandomId();\n    this.uniqueId = this._scene.getUniqueId();\n    this._materialContext = this._scene.getEngine().createMaterialContext();\n    this._drawWrapper = new _drawWrapper.DrawWrapper(this._scene.getEngine(), false);\n    this._drawWrapper.materialContext = this._materialContext;\n\n    if (this._scene.useRightHandedSystem) {\n      this.sideOrientation = Material.ClockWiseSideOrientation;\n    } else {\n      this.sideOrientation = Material.CounterClockWiseSideOrientation;\n    }\n\n    this._uniformBuffer = new _uniformBuffer.UniformBuffer(this._scene.getEngine(), undefined, undefined, name);\n    this._useUBO = this.getScene().getEngine().supportsUniformBuffers;\n\n    if (!doNotAdd) {\n      this._scene.addMaterial(this);\n    }\n\n    if (this._scene.useMaterialMeshMap) {\n      this.meshMap = {};\n    }\n\n    Material.OnEventObservable.notifyObservers(this, _materialPluginEvent.MaterialPluginEvent.Created);\n  }\n  /**\n   * Returns a string representation of the current material\n   * @param fullDetails defines a boolean indicating which levels of logging is desired\n   * @returns a string with material information\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toString(fullDetails) {\n    const ret = \"Name: \" + this.name;\n    return ret;\n  }\n  /**\n   * Gets the class name of the material\n   * @returns a string with the class name of the material\n   */\n\n\n  getClassName() {\n    return \"Material\";\n  }\n  /** @internal */\n\n\n  get _isMaterial() {\n    return true;\n  }\n  /**\n   * Specifies if updates for the material been locked\n   */\n\n\n  get isFrozen() {\n    return this.checkReadyOnlyOnce;\n  }\n  /**\n   * Locks updates for the material\n   */\n\n\n  freeze() {\n    this.markDirty();\n    this.checkReadyOnlyOnce = true;\n  }\n  /**\n   * Unlocks updates for the material\n   */\n\n\n  unfreeze() {\n    this.markDirty();\n    this.checkReadyOnlyOnce = false;\n  }\n  /**\n   * Specifies if the material is ready to be used\n   * @param mesh defines the mesh to check\n   * @param useInstances specifies if instances should be used\n   * @returns a boolean indicating if the material is ready to be used\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  isReady(mesh, useInstances) {\n    return true;\n  }\n  /**\n   * Specifies that the submesh is ready to be used\n   * @param mesh defines the mesh to check\n   * @param subMesh defines which submesh to check\n   * @param useInstances specifies that instances should be used\n   * @returns a boolean indicating that the submesh is ready or not\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  isReadyForSubMesh(mesh, subMesh, useInstances) {\n    const defines = subMesh.materialDefines;\n\n    if (!defines) {\n      return false;\n    }\n\n    this._eventInfo.isReadyForSubMesh = true;\n    this._eventInfo.defines = defines;\n\n    this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n\n    return this._eventInfo.isReadyForSubMesh;\n  }\n  /**\n   * Returns the material effect\n   * @returns the effect associated with the material\n   */\n\n\n  getEffect() {\n    return this._drawWrapper.effect;\n  }\n  /**\n   * Returns the current scene\n   * @returns a Scene\n   */\n\n\n  getScene() {\n    return this._scene;\n  }\n  /**\n   * Gets the current transparency mode.\n   */\n\n\n  get transparencyMode() {\n    return this._transparencyMode;\n  }\n  /**\n   * Sets the transparency mode of the material.\n   *\n   * | Value | Type                                | Description |\n   * | ----- | ----------------------------------- | ----------- |\n   * | 0     | OPAQUE                              |             |\n   * | 1     | ALPHATEST                           |             |\n   * | 2     | ALPHABLEND                          |             |\n   * | 3     | ALPHATESTANDBLEND                   |             |\n   *\n   */\n\n\n  set transparencyMode(value) {\n    if (this._transparencyMode === value) {\n      return;\n    }\n\n    this._transparencyMode = value;\n    this._forceAlphaTest = value === Material.MATERIAL_ALPHATESTANDBLEND;\n\n    this._markAllSubMeshesAsTexturesAndMiscDirty();\n  }\n  /**\n   * Returns true if alpha blending should be disabled.\n   */\n\n\n  get _disableAlphaBlending() {\n    return this._transparencyMode === Material.MATERIAL_OPAQUE || this._transparencyMode === Material.MATERIAL_ALPHATEST;\n  }\n  /**\n   * Specifies whether or not this material should be rendered in alpha blend mode.\n   * @returns a boolean specifying if alpha blending is needed\n   */\n\n\n  needAlphaBlending() {\n    if (this._disableAlphaBlending) {\n      return false;\n    }\n\n    return this.alpha < 1.0;\n  }\n  /**\n   * Specifies if the mesh will require alpha blending\n   * @param mesh defines the mesh to check\n   * @returns a boolean specifying if alpha blending is needed for the mesh\n   */\n\n\n  needAlphaBlendingForMesh(mesh) {\n    if (mesh.visibility < 1.0) {\n      return true;\n    }\n\n    if (this._disableAlphaBlending) {\n      return false;\n    }\n\n    return mesh.hasVertexAlpha || this.needAlphaBlending();\n  }\n  /**\n   * Specifies whether or not this material should be rendered in alpha test mode.\n   * @returns a boolean specifying if an alpha test is needed.\n   */\n\n\n  needAlphaTesting() {\n    if (this._forceAlphaTest) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Specifies if material alpha testing should be turned on for the mesh\n   * @param mesh defines the mesh to check\n   */\n\n\n  _shouldTurnAlphaTestOn(mesh) {\n    return !this.needAlphaBlendingForMesh(mesh) && this.needAlphaTesting();\n  }\n  /**\n   * Gets the texture used for the alpha test\n   * @returns the texture to use for alpha testing\n   */\n\n\n  getAlphaTestTexture() {\n    return null;\n  }\n  /**\n   * Marks the material to indicate that it needs to be re-calculated\n   * @param forceMaterialDirty - Forces the material to be marked as dirty for all components (same as this.markAsDirty(Material.AllDirtyFlag)). You should use this flag if the material is frozen and you want to force a recompilation.\n   */\n\n\n  markDirty(forceMaterialDirty = false) {\n    const meshes = this.getScene().meshes;\n\n    for (const mesh of meshes) {\n      if (!mesh.subMeshes) {\n        continue;\n      }\n\n      for (const subMesh of mesh.subMeshes) {\n        if (subMesh.getMaterial() !== this) {\n          continue;\n        }\n\n        if (!subMesh.effect) {\n          continue;\n        }\n\n        subMesh.effect._wasPreviouslyReady = false;\n        subMesh.effect._wasPreviouslyUsingInstances = null;\n        subMesh.effect._forceRebindOnNextCall = forceMaterialDirty;\n      }\n    }\n\n    if (forceMaterialDirty) {\n      this.markAsDirty(Material.AllDirtyFlag);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _preBind(effect, overrideOrientation = null) {\n    const engine = this._scene.getEngine();\n\n    const orientation = overrideOrientation == null ? this.sideOrientation : overrideOrientation;\n    const reverse = orientation === Material.ClockWiseSideOrientation;\n    engine.enableEffect(effect ? effect : this._getDrawWrapper());\n    engine.setState(this.backFaceCulling, this.zOffset, false, reverse, this._scene._mirroredCameraPosition ? !this.cullBackFaces : this.cullBackFaces, this.stencil, this.zOffsetUnits);\n    return reverse;\n  }\n  /**\n   * Binds the material to the mesh\n   * @param world defines the world transformation matrix\n   * @param mesh defines the mesh to bind the material to\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  bind(world, mesh) {}\n  /**\n   * Initializes the uniform buffer layout for the shader.\n   */\n\n\n  buildUniformLayout() {\n    const ubo = this._uniformBuffer;\n    this._eventInfo.ubo = ubo;\n\n    this._callbackPluginEventGeneric(_materialPluginEvent.MaterialPluginEvent.PrepareUniformBuffer, this._eventInfo);\n\n    ubo.create();\n    this._uniformBufferLayoutBuilt = true;\n  }\n  /**\n   * Binds the submesh to the material\n   * @param world defines the world transformation matrix\n   * @param mesh defines the mesh containing the submesh\n   * @param subMesh defines the submesh to bind the material to\n   */\n\n\n  bindForSubMesh(world, mesh, subMesh) {\n    const effect = subMesh.effect;\n\n    if (!effect) {\n      return;\n    }\n\n    this._eventInfo.subMesh = subMesh;\n\n    this._callbackPluginEventBindForSubMesh(this._eventInfo);\n\n    effect._forceRebindOnNextCall = false;\n  }\n  /**\n   * Binds the world matrix to the material\n   * @param world defines the world transformation matrix\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  bindOnlyWorldMatrix(world) {}\n  /**\n   * Binds the view matrix to the effect\n   * @param effect defines the effect to bind the view matrix to\n   */\n\n\n  bindView(effect) {\n    if (!this._useUBO) {\n      effect.setMatrix(\"view\", this.getScene().getViewMatrix());\n    } else {\n      this._needToBindSceneUbo = true;\n    }\n  }\n  /**\n   * Binds the view projection and projection matrices to the effect\n   * @param effect defines the effect to bind the view projection and projection matrices to\n   */\n\n\n  bindViewProjection(effect) {\n    if (!this._useUBO) {\n      effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n      effect.setMatrix(\"projection\", this.getScene().getProjectionMatrix());\n    } else {\n      this._needToBindSceneUbo = true;\n    }\n  }\n  /**\n   * Binds the view matrix to the effect\n   * @param effect defines the effect to bind the view matrix to\n   * @param variableName name of the shader variable that will hold the eye position\n   */\n\n\n  bindEyePosition(effect, variableName) {\n    if (!this._useUBO) {\n      this._scene.bindEyePosition(effect, variableName);\n    } else {\n      this._needToBindSceneUbo = true;\n    }\n  }\n  /**\n   * Processes to execute after binding the material to a mesh\n   * @param mesh defines the rendered mesh\n   * @param effect\n   */\n\n\n  _afterBind(mesh, effect = null) {\n    this._scene._cachedMaterial = this;\n\n    if (this._needToBindSceneUbo) {\n      if (effect) {\n        this._needToBindSceneUbo = false;\n\n        _materialHelper.MaterialHelper.BindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\n\n        this._scene.finalizeSceneUbo();\n      }\n    }\n\n    if (mesh) {\n      this._scene._cachedVisibility = mesh.visibility;\n    } else {\n      this._scene._cachedVisibility = 1;\n    }\n\n    if (this._onBindObservable && mesh) {\n      this._onBindObservable.notifyObservers(mesh);\n    }\n\n    if (this.disableDepthWrite) {\n      const engine = this._scene.getEngine();\n\n      this._cachedDepthWriteState = engine.getDepthWrite();\n      engine.setDepthWrite(false);\n    }\n\n    if (this.disableColorWrite) {\n      const engine = this._scene.getEngine();\n\n      this._cachedColorWriteState = engine.getColorWrite();\n      engine.setColorWrite(false);\n    }\n\n    if (this.depthFunction !== 0) {\n      const engine = this._scene.getEngine();\n\n      this._cachedDepthFunctionState = engine.getDepthFunction() || 0;\n      engine.setDepthFunction(this.depthFunction);\n    }\n  }\n  /**\n   * Unbinds the material from the mesh\n   */\n\n\n  unbind() {\n    if (this._onUnBindObservable) {\n      this._onUnBindObservable.notifyObservers(this);\n    }\n\n    if (this.depthFunction !== 0) {\n      const engine = this._scene.getEngine();\n\n      engine.setDepthFunction(this._cachedDepthFunctionState);\n    }\n\n    if (this.disableDepthWrite) {\n      const engine = this._scene.getEngine();\n\n      engine.setDepthWrite(this._cachedDepthWriteState);\n    }\n\n    if (this.disableColorWrite) {\n      const engine = this._scene.getEngine();\n\n      engine.setColorWrite(this._cachedColorWriteState);\n    }\n  }\n  /**\n   * Returns the animatable textures.\n   * @returns - Array of animatable textures.\n   */\n\n\n  getAnimatables() {\n    this._eventInfo.animatables = [];\n\n    this._callbackPluginEventGeneric(_materialPluginEvent.MaterialPluginEvent.GetAnimatables, this._eventInfo);\n\n    return this._eventInfo.animatables;\n  }\n  /**\n   * Gets the active textures from the material\n   * @returns an array of textures\n   */\n\n\n  getActiveTextures() {\n    this._eventInfo.activeTextures = [];\n\n    this._callbackPluginEventGeneric(_materialPluginEvent.MaterialPluginEvent.GetActiveTextures, this._eventInfo);\n\n    return this._eventInfo.activeTextures;\n  }\n  /**\n   * Specifies if the material uses a texture\n   * @param texture defines the texture to check against the material\n   * @returns a boolean specifying if the material uses the texture\n   */\n\n\n  hasTexture(texture) {\n    this._eventInfo.hasTexture = false;\n    this._eventInfo.texture = texture;\n\n    this._callbackPluginEventGeneric(_materialPluginEvent.MaterialPluginEvent.HasTexture, this._eventInfo);\n\n    return this._eventInfo.hasTexture;\n  }\n  /**\n   * Makes a duplicate of the material, and gives it a new name\n   * @param name defines the new name for the duplicated material\n   * @returns the cloned material\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  clone(name) {\n    return null;\n  }\n\n  _clonePlugins(targetMaterial, rootUrl) {\n    const serializationObject = {}; // Create plugins in targetMaterial in case they don't exist\n\n    this._serializePlugins(serializationObject);\n\n    Material._parsePlugins(serializationObject, targetMaterial, this._scene, rootUrl); // Copy the properties of the current plugins to the cloned material's plugins\n\n\n    if (this.pluginManager) {\n      for (const plugin of this.pluginManager._plugins) {\n        const targetPlugin = targetMaterial.pluginManager.getPlugin(plugin.name);\n        plugin.copyTo(targetPlugin);\n      }\n    }\n  }\n  /**\n   * Gets the meshes bound to the material\n   * @returns an array of meshes bound to the material\n   */\n\n\n  getBindedMeshes() {\n    if (this.meshMap) {\n      const result = new Array();\n\n      for (const meshId in this.meshMap) {\n        const mesh = this.meshMap[meshId];\n\n        if (mesh) {\n          result.push(mesh);\n        }\n      }\n\n      return result;\n    } else {\n      const meshes = this._scene.meshes;\n      return meshes.filter(mesh => mesh.material === this);\n    }\n  }\n  /**\n   * Force shader compilation\n   * @param mesh defines the mesh associated with this material\n   * @param onCompiled defines a function to execute once the material is compiled\n   * @param options defines the options to configure the compilation\n   * @param onError defines a function to execute if the material fails compiling\n   */\n\n\n  forceCompilation(mesh, onCompiled, options, onError) {\n    const localOptions = Object.assign({\n      clipPlane: false,\n      useInstances: false\n    }, options);\n    const scene = this.getScene();\n    const currentHotSwapingState = this.allowShaderHotSwapping;\n    this.allowShaderHotSwapping = false; // Turned off to let us evaluate the real compilation state\n\n    const checkReady = () => {\n      if (!this._scene || !this._scene.getEngine()) {\n        return;\n      }\n\n      const clipPlaneState = scene.clipPlane;\n\n      if (localOptions.clipPlane) {\n        scene.clipPlane = new _mathPlane.Plane(0, 0, 0, 1);\n      }\n\n      if (this._storeEffectOnSubMeshes) {\n        let allDone = true,\n            lastError = null;\n\n        if (mesh.subMeshes) {\n          const tempSubMesh = new _subMesh.SubMesh(0, 0, 0, 0, 0, mesh, undefined, false, false);\n\n          if (tempSubMesh.materialDefines) {\n            tempSubMesh.materialDefines._renderId = -1;\n          }\n\n          if (!this.isReadyForSubMesh(mesh, tempSubMesh, localOptions.useInstances)) {\n            if (tempSubMesh.effect && tempSubMesh.effect.getCompilationError() && tempSubMesh.effect.allFallbacksProcessed()) {\n              lastError = tempSubMesh.effect.getCompilationError();\n            } else {\n              allDone = false;\n              setTimeout(checkReady, 16);\n            }\n          }\n        }\n\n        if (allDone) {\n          this.allowShaderHotSwapping = currentHotSwapingState;\n\n          if (lastError) {\n            if (onError) {\n              onError(lastError);\n            }\n          }\n\n          if (onCompiled) {\n            onCompiled(this);\n          }\n        }\n      } else {\n        if (this.isReady()) {\n          this.allowShaderHotSwapping = currentHotSwapingState;\n\n          if (onCompiled) {\n            onCompiled(this);\n          }\n        } else {\n          setTimeout(checkReady, 16);\n        }\n      }\n\n      if (localOptions.clipPlane) {\n        scene.clipPlane = clipPlaneState;\n      }\n    };\n\n    checkReady();\n  }\n  /**\n   * Force shader compilation\n   * @param mesh defines the mesh that will use this material\n   * @param options defines additional options for compiling the shaders\n   * @returns a promise that resolves when the compilation completes\n   */\n\n\n  forceCompilationAsync(mesh, options) {\n    return new Promise((resolve, reject) => {\n      this.forceCompilation(mesh, () => {\n        resolve();\n      }, options, reason => {\n        reject(reason);\n      });\n    });\n  }\n  /**\n   * Marks a define in the material to indicate that it needs to be re-computed\n   * @param flag defines a flag used to determine which parts of the material have to be marked as dirty\n   */\n\n\n  markAsDirty(flag) {\n    if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\n      return;\n    }\n\n    Material._DirtyCallbackArray.length = 0;\n\n    if (flag & Material.TextureDirtyFlag) {\n      Material._DirtyCallbackArray.push(Material._TextureDirtyCallBack);\n    }\n\n    if (flag & Material.LightDirtyFlag) {\n      Material._DirtyCallbackArray.push(Material._LightsDirtyCallBack);\n    }\n\n    if (flag & Material.FresnelDirtyFlag) {\n      Material._DirtyCallbackArray.push(Material._FresnelDirtyCallBack);\n    }\n\n    if (flag & Material.AttributesDirtyFlag) {\n      Material._DirtyCallbackArray.push(Material._AttributeDirtyCallBack);\n    }\n\n    if (flag & Material.MiscDirtyFlag) {\n      Material._DirtyCallbackArray.push(Material._MiscDirtyCallBack);\n    }\n\n    if (flag & Material.PrePassDirtyFlag) {\n      Material._DirtyCallbackArray.push(Material._PrePassDirtyCallBack);\n    }\n\n    if (Material._DirtyCallbackArray.length) {\n      this._markAllSubMeshesAsDirty(Material._RunDirtyCallBacks);\n    }\n\n    this.getScene().resetCachedMaterial();\n  }\n  /**\n   * Resets the draw wrappers cache for all submeshes that are using this material\n   */\n\n\n  resetDrawCache() {\n    const meshes = this.getScene().meshes;\n\n    for (const mesh of meshes) {\n      if (!mesh.subMeshes) {\n        continue;\n      }\n\n      for (const subMesh of mesh.subMeshes) {\n        if (subMesh.getMaterial() !== this) {\n          continue;\n        }\n\n        subMesh.resetDrawCache();\n      }\n    }\n  }\n  /**\n   * Marks all submeshes of a material to indicate that their material defines need to be re-calculated\n   * @param func defines a function which checks material defines against the submeshes\n   */\n\n\n  _markAllSubMeshesAsDirty(func) {\n    if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\n      return;\n    }\n\n    const meshes = this.getScene().meshes;\n\n    for (const mesh of meshes) {\n      if (!mesh.subMeshes) {\n        continue;\n      }\n\n      for (const subMesh of mesh.subMeshes) {\n        // We want to skip the submeshes which are not using this material or which have not yet rendered at least once\n        if (subMesh.getMaterial(false) !== this) {\n          continue;\n        }\n\n        for (const drawWrapper of subMesh._drawWrappers) {\n          if (!drawWrapper || !drawWrapper.defines || !drawWrapper.defines.markAllAsDirty) {\n            continue;\n          }\n\n          if (this._materialContext === drawWrapper.materialContext) {\n            func(drawWrapper.defines);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Indicates that the scene should check if the rendering now needs a prepass\n   */\n\n\n  _markScenePrePassDirty() {\n    if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\n      return;\n    }\n\n    const prePassRenderer = this.getScene().enablePrePassRenderer();\n\n    if (prePassRenderer) {\n      prePassRenderer.markAsDirty();\n    }\n  }\n  /**\n   * Indicates that we need to re-calculated for all submeshes\n   */\n\n\n  _markAllSubMeshesAsAllDirty() {\n    this._markAllSubMeshesAsDirty(Material._AllDirtyCallBack);\n  }\n  /**\n   * Indicates that image processing needs to be re-calculated for all submeshes\n   */\n\n\n  _markAllSubMeshesAsImageProcessingDirty() {\n    this._markAllSubMeshesAsDirty(Material._ImageProcessingDirtyCallBack);\n  }\n  /**\n   * Indicates that textures need to be re-calculated for all submeshes\n   */\n\n\n  _markAllSubMeshesAsTexturesDirty() {\n    this._markAllSubMeshesAsDirty(Material._TextureDirtyCallBack);\n  }\n  /**\n   * Indicates that fresnel needs to be re-calculated for all submeshes\n   */\n\n\n  _markAllSubMeshesAsFresnelDirty() {\n    this._markAllSubMeshesAsDirty(Material._FresnelDirtyCallBack);\n  }\n  /**\n   * Indicates that fresnel and misc need to be re-calculated for all submeshes\n   */\n\n\n  _markAllSubMeshesAsFresnelAndMiscDirty() {\n    this._markAllSubMeshesAsDirty(Material._FresnelAndMiscDirtyCallBack);\n  }\n  /**\n   * Indicates that lights need to be re-calculated for all submeshes\n   */\n\n\n  _markAllSubMeshesAsLightsDirty() {\n    this._markAllSubMeshesAsDirty(Material._LightsDirtyCallBack);\n  }\n  /**\n   * Indicates that attributes need to be re-calculated for all submeshes\n   */\n\n\n  _markAllSubMeshesAsAttributesDirty() {\n    this._markAllSubMeshesAsDirty(Material._AttributeDirtyCallBack);\n  }\n  /**\n   * Indicates that misc needs to be re-calculated for all submeshes\n   */\n\n\n  _markAllSubMeshesAsMiscDirty() {\n    this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\n  }\n  /**\n   * Indicates that prepass needs to be re-calculated for all submeshes\n   */\n\n\n  _markAllSubMeshesAsPrePassDirty() {\n    this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\n  }\n  /**\n   * Indicates that textures and misc need to be re-calculated for all submeshes\n   */\n\n\n  _markAllSubMeshesAsTexturesAndMiscDirty() {\n    this._markAllSubMeshesAsDirty(Material._TextureAndMiscDirtyCallBack);\n  }\n\n  _checkScenePerformancePriority() {\n    if (this._scene.performancePriority !== _scene.ScenePerformancePriority.BackwardCompatible) {\n      this.checkReadyOnlyOnce = true; // re-set the flag when the perf priority changes\n\n      const observer = this._scene.onScenePerformancePriorityChangedObservable.addOnce(() => {\n        this.checkReadyOnlyOnce = false;\n      }); // if this material is disposed before the scene is disposed, cleanup the observer\n\n\n      this.onDisposeObservable.add(() => {\n        this._scene.onScenePerformancePriorityChangedObservable.remove(observer);\n      });\n    }\n  }\n  /**\n   * Sets the required values to the prepass renderer.\n   * @param prePassRenderer defines the prepass renderer to setup.\n   * @returns true if the pre pass is needed.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  setPrePassRenderer(prePassRenderer) {\n    // Do Nothing by default\n    return false;\n  }\n  /**\n   * Disposes the material\n   * @param forceDisposeEffect specifies if effects should be forcefully disposed\n   * @param forceDisposeTextures specifies if textures should be forcefully disposed\n   * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\n   */\n\n\n  dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {\n    const scene = this.getScene(); // Animations\n\n    scene.stopAnimation(this);\n    scene.freeProcessedMaterials(); // Remove from scene\n\n    scene.removeMaterial(this);\n    this._eventInfo.forceDisposeTextures = forceDisposeTextures;\n\n    this._callbackPluginEventGeneric(_materialPluginEvent.MaterialPluginEvent.Disposed, this._eventInfo);\n\n    if (this._parentContainer) {\n      const index = this._parentContainer.materials.indexOf(this);\n\n      if (index > -1) {\n        this._parentContainer.materials.splice(index, 1);\n      }\n\n      this._parentContainer = null;\n    }\n\n    if (notBoundToMesh !== true) {\n      // Remove from meshes\n      if (this.meshMap) {\n        for (const meshId in this.meshMap) {\n          const mesh = this.meshMap[meshId];\n\n          if (mesh) {\n            mesh.material = null; // will set the entry in the map to undefined\n\n            this.releaseVertexArrayObject(mesh, forceDisposeEffect);\n          }\n        }\n      } else {\n        const meshes = scene.meshes;\n\n        for (const mesh of meshes) {\n          if (mesh.material === this && !mesh.sourceMesh) {\n            mesh.material = null;\n            this.releaseVertexArrayObject(mesh, forceDisposeEffect);\n          }\n        }\n      }\n    }\n\n    this._uniformBuffer.dispose(); // Shader are kept in cache for further use but we can get rid of this by using forceDisposeEffect\n\n\n    if (forceDisposeEffect && this._drawWrapper.effect) {\n      if (!this._storeEffectOnSubMeshes) {\n        this._drawWrapper.effect.dispose();\n      }\n\n      this._drawWrapper.effect = null;\n    }\n\n    this.metadata = null; // Callback\n\n    this.onDisposeObservable.notifyObservers(this);\n    this.onDisposeObservable.clear();\n\n    if (this._onBindObservable) {\n      this._onBindObservable.clear();\n    }\n\n    if (this._onUnBindObservable) {\n      this._onUnBindObservable.clear();\n    }\n\n    if (this._onEffectCreatedObservable) {\n      this._onEffectCreatedObservable.clear();\n    }\n\n    if (this._eventInfo) {\n      this._eventInfo = {};\n    }\n  }\n  /**\n   * @internal\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  releaseVertexArrayObject(mesh, forceDisposeEffect) {\n    if (mesh.geometry) {\n      const geometry = mesh.geometry;\n\n      if (this._storeEffectOnSubMeshes) {\n        for (const subMesh of mesh.subMeshes) {\n          geometry._releaseVertexArrayObject(subMesh.effect);\n\n          if (forceDisposeEffect && subMesh.effect) {\n            subMesh.effect.dispose();\n          }\n        }\n      } else {\n        geometry._releaseVertexArrayObject(this._drawWrapper.effect);\n      }\n    }\n  }\n  /**\n   * Serializes this material\n   * @returns the serialized material object\n   */\n\n\n  serialize() {\n    const serializationObject = _decorators.SerializationHelper.Serialize(this);\n\n    serializationObject.stencil = this.stencil.serialize();\n    serializationObject.uniqueId = this.uniqueId;\n\n    this._serializePlugins(serializationObject);\n\n    return serializationObject;\n  }\n\n  _serializePlugins(serializationObject) {\n    serializationObject.plugins = {};\n\n    if (this.pluginManager) {\n      for (const plugin of this.pluginManager._plugins) {\n        serializationObject.plugins[plugin.getClassName()] = plugin.serialize();\n      }\n    }\n  }\n  /**\n   * Creates a material from parsed material data\n   * @param parsedMaterial defines parsed material data\n   * @param scene defines the hosting scene\n   * @param rootUrl defines the root URL to use to load textures\n   * @returns a new material\n   */\n\n\n  static Parse(parsedMaterial, scene, rootUrl) {\n    if (!parsedMaterial.customType) {\n      parsedMaterial.customType = \"BABYLON.StandardMaterial\";\n    } else if (parsedMaterial.customType === \"BABYLON.PBRMaterial\" && parsedMaterial.overloadedAlbedo) {\n      parsedMaterial.customType = \"BABYLON.LegacyPBRMaterial\";\n\n      if (!BABYLON.LegacyPBRMaterial) {\n        _logger.Logger.Error(\"Your scene is trying to load a legacy version of the PBRMaterial, please, include it from the materials library.\");\n\n        return null;\n      }\n    }\n\n    const materialType = _tools.Tools.Instantiate(parsedMaterial.customType);\n\n    const material = materialType.Parse(parsedMaterial, scene, rootUrl);\n    material._loadedUniqueId = parsedMaterial.uniqueId;\n    return material;\n  }\n\n  static _parsePlugins(serializationObject, material, scene, rootUrl) {\n    var _a;\n\n    if (!serializationObject.plugins) {\n      return;\n    }\n\n    for (const pluginClassName in serializationObject.plugins) {\n      const pluginData = serializationObject.plugins[pluginClassName];\n      let plugin = (_a = material.pluginManager) === null || _a === void 0 ? void 0 : _a.getPlugin(pluginData.name);\n\n      if (!plugin) {\n        const pluginClassType = _tools.Tools.Instantiate(\"BABYLON.\" + pluginClassName);\n\n        if (pluginClassType) {\n          plugin = new pluginClassType(material);\n        }\n      }\n\n      plugin === null || plugin === void 0 ? void 0 : plugin.parse(pluginData, scene, rootUrl);\n    }\n  }\n\n}\n/**\n * Returns the triangle fill mode\n */\n\n\nexports.Material = Material;\nMaterial.TriangleFillMode = 0;\n/**\n * Returns the wireframe mode\n */\n\nMaterial.WireFrameFillMode = 1;\n/**\n * Returns the point fill mode\n */\n\nMaterial.PointFillMode = 2;\n/**\n * Returns the point list draw mode\n */\n\nMaterial.PointListDrawMode = 3;\n/**\n * Returns the line list draw mode\n */\n\nMaterial.LineListDrawMode = 4;\n/**\n * Returns the line loop draw mode\n */\n\nMaterial.LineLoopDrawMode = 5;\n/**\n * Returns the line strip draw mode\n */\n\nMaterial.LineStripDrawMode = 6;\n/**\n * Returns the triangle strip draw mode\n */\n\nMaterial.TriangleStripDrawMode = 7;\n/**\n * Returns the triangle fan draw mode\n */\n\nMaterial.TriangleFanDrawMode = 8;\n/**\n * Stores the clock-wise side orientation\n */\n\nMaterial.ClockWiseSideOrientation = 0;\n/**\n * Stores the counter clock-wise side orientation\n */\n\nMaterial.CounterClockWiseSideOrientation = 1;\n/**\n * The dirty texture flag value\n */\n\nMaterial.TextureDirtyFlag = 1;\n/**\n * The dirty light flag value\n */\n\nMaterial.LightDirtyFlag = 2;\n/**\n * The dirty fresnel flag value\n */\n\nMaterial.FresnelDirtyFlag = 4;\n/**\n * The dirty attribute flag value\n */\n\nMaterial.AttributesDirtyFlag = 8;\n/**\n * The dirty misc flag value\n */\n\nMaterial.MiscDirtyFlag = 16;\n/**\n * The dirty prepass flag value\n */\n\nMaterial.PrePassDirtyFlag = 32;\n/**\n * The all dirty flag value\n */\n\nMaterial.AllDirtyFlag = 63;\n/**\n * MaterialTransparencyMode: No transparency mode, Alpha channel is not use.\n */\n\nMaterial.MATERIAL_OPAQUE = 0;\n/**\n * MaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\n */\n\nMaterial.MATERIAL_ALPHATEST = 1;\n/**\n * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n */\n\nMaterial.MATERIAL_ALPHABLEND = 2;\n/**\n * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n * They are also discarded below the alpha cutoff threshold to improve performances.\n */\n\nMaterial.MATERIAL_ALPHATESTANDBLEND = 3;\n/**\n * The Whiteout method is used to blend normals.\n * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\n */\n\nMaterial.MATERIAL_NORMALBLENDMETHOD_WHITEOUT = 0;\n/**\n * The Reoriented Normal Mapping method is used to blend normals.\n * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\n */\n\nMaterial.MATERIAL_NORMALBLENDMETHOD_RNM = 1;\n/**\n * Event observable which raises global events common to all materials (like MaterialPluginEvent.Created)\n */\n\nMaterial.OnEventObservable = new _observable.Observable();\n\nMaterial._AllDirtyCallBack = defines => defines.markAllAsDirty();\n\nMaterial._ImageProcessingDirtyCallBack = defines => defines.markAsImageProcessingDirty();\n\nMaterial._TextureDirtyCallBack = defines => defines.markAsTexturesDirty();\n\nMaterial._FresnelDirtyCallBack = defines => defines.markAsFresnelDirty();\n\nMaterial._MiscDirtyCallBack = defines => defines.markAsMiscDirty();\n\nMaterial._PrePassDirtyCallBack = defines => defines.markAsPrePassDirty();\n\nMaterial._LightsDirtyCallBack = defines => defines.markAsLightDirty();\n\nMaterial._AttributeDirtyCallBack = defines => defines.markAsAttributesDirty();\n\nMaterial._FresnelAndMiscDirtyCallBack = defines => {\n  Material._FresnelDirtyCallBack(defines);\n\n  Material._MiscDirtyCallBack(defines);\n};\n\nMaterial._TextureAndMiscDirtyCallBack = defines => {\n  Material._TextureDirtyCallBack(defines);\n\n  Material._MiscDirtyCallBack(defines);\n};\n\nMaterial._DirtyCallbackArray = [];\n\nMaterial._RunDirtyCallBacks = defines => {\n  for (const cb of Material._DirtyCallbackArray) {\n    cb(defines);\n  }\n};\n\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"id\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"uniqueId\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"name\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"metadata\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"checkReadyOnEveryCall\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"checkReadyOnlyOnce\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"state\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)(\"alpha\")], Material.prototype, \"_alpha\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)(\"backFaceCulling\")], Material.prototype, \"_backFaceCulling\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)(\"cullBackFaces\")], Material.prototype, \"_cullBackFaces\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"sideOrientation\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)(\"alphaMode\")], Material.prototype, \"_alphaMode\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"_needDepthPrePass\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"disableDepthWrite\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"disableColorWrite\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"forceDepthWrite\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"depthFunction\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"separateCullingPass\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)(\"fogEnabled\")], Material.prototype, \"_fogEnabled\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"pointSize\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"zOffset\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"zOffsetUnits\", void 0);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"pointsCloud\", null);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"fillMode\", null);\n(0, _tslibEs.__decorate)([(0, _decorators.serialize)()], Material.prototype, \"transparencyMode\", null);\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Material","_tslibEs","_decorators","_tools","_observable","_engineStore","_subMesh","_uniformBuffer","_logger","_mathPlane","_materialHelper","_drawWrapper","_materialStencilState","_scene","_materialPluginEvent","_alpha","oldValue","markAsDirty","MiscDirtyFlag","PrePassDirtyFlag","_backFaceCulling","TextureDirtyFlag","_cullBackFaces","_blockDirtyMechanism","markDirty","atomicMaterialsUpdate","callback","blockDirtyMechanism","_eventInfo","hasRenderTargetTextures","_callbackPluginEventHasRenderTargetTextures","_onDisposeObserver","onDisposeObservable","remove","add","_onBindObservable","Observable","_onBindObserver","onBindObservable","_onUnBindObservable","_onEffectCreatedObservable","_alphaMode","_needDepthPrePass","checkReadyOnEveryCall","_fogEnabled","_fillMode","WireFrameFillMode","LineListDrawMode","LineLoopDrawMode","LineStripDrawMode","forceWireframe","fillMode","TriangleFillMode","PointFillMode","PointListDrawMode","forcePointsCloud","_getDrawWrapper","_setDrawWrapper","drawWrapper","constructor","name","scene","doNotAdd","shadowDepthWrapper","allowShaderHotSwapping","reservedDataStore","metadata","checkReadyOnlyOnce","state","getRenderTargetTextures","onError","onCompiled","_storeEffectOnSubMeshes","doNotSerialize","animations","forceDepthWrite","disableColorWrite","disableDepthWrite","depthFunction","separateCullingPass","pointSize","zOffsetUnits","zOffset","stencil","MaterialStencilState","_useUBO","_cachedColorWriteState","_cachedDepthWriteState","_cachedDepthFunctionState","_indexInSceneMaterialArray","_parentContainer","meshMap","_uniformBufferLayoutBuilt","_callbackPluginEventGeneric","this._callbackPluginEventGeneric","_callbackPluginEventIsReadyForSubMesh","this._callbackPluginEventIsReadyForSubMesh","_callbackPluginEventPrepareDefines","this._callbackPluginEventPrepareDefines","_callbackPluginEventPrepareDefinesBeforeAttributes","this._callbackPluginEventPrepareDefinesBeforeAttributes","_callbackPluginEventHardBindForSubMesh","this._callbackPluginEventHardBindForSubMesh","_callbackPluginEventBindForSubMesh","this._callbackPluginEventBindForSubMesh","this._callbackPluginEventHasRenderTargetTextures","_callbackPluginEventFillRenderTargetTextures","this._callbackPluginEventFillRenderTargetTextures","_forceAlphaTest","_transparencyMode","setScene","EngineStore","LastCreatedScene","_dirtyCallbacks","_markAllSubMeshesAsTexturesDirty","bind","_markAllSubMeshesAsLightsDirty","_markAllSubMeshesAsFresnelDirty","_markAllSubMeshesAsAttributesDirty","_markAllSubMeshesAsMiscDirty","_markAllSubMeshesAsPrePassDirty","_markAllSubMeshesAsAllDirty","id","Tools","RandomId","uniqueId","getUniqueId","_materialContext","getEngine","createMaterialContext","DrawWrapper","materialContext","sideOrientation","useRightHandedSystem","ClockWiseSideOrientation","CounterClockWiseSideOrientation","UniformBuffer","undefined","getScene","supportsUniformBuffers","addMaterial","useMaterialMeshMap","OnEventObservable","notifyObservers","MaterialPluginEvent","Created","toString","fullDetails","getClassName","freeze","unfreeze","isReady","mesh","useInstances","isReadyForSubMesh","subMesh","defines","materialDefines","getEffect","effect","MATERIAL_ALPHATESTANDBLEND","_markAllSubMeshesAsTexturesAndMiscDirty","MATERIAL_OPAQUE","MATERIAL_ALPHATEST","needAlphaBlending","_disableAlphaBlending","alpha","needAlphaBlendingForMesh","visibility","hasVertexAlpha","needAlphaTesting","_shouldTurnAlphaTestOn","getAlphaTestTexture","forceMaterialDirty","meshes","subMeshes","getMaterial","_wasPreviouslyReady","_wasPreviouslyUsingInstances","_forceRebindOnNextCall","AllDirtyFlag","_preBind","overrideOrientation","engine","reverse","orientation","enableEffect","setState","backFaceCulling","_mirroredCameraPosition","cullBackFaces","world","buildUniformLayout","ubo","PrepareUniformBuffer","create","bindForSubMesh","bindOnlyWorldMatrix","bindView","_needToBindSceneUbo","setMatrix","getViewMatrix","bindViewProjection","getTransformMatrix","getProjectionMatrix","bindEyePosition","variableName","_afterBind","_cachedMaterial","MaterialHelper","BindSceneUniformBuffer","getSceneUniformBuffer","finalizeSceneUbo","_cachedVisibility","getDepthWrite","setDepthWrite","getColorWrite","setColorWrite","getDepthFunction","setDepthFunction","unbind","getAnimatables","animatables","GetAnimatables","getActiveTextures","activeTextures","GetActiveTextures","hasTexture","texture","HasTexture","clone","_clonePlugins","targetMaterial","rootUrl","serializationObject","_serializePlugins","_parsePlugins","pluginManager","plugin","_plugins","targetPlugin","getPlugin","copyTo","getBindedMeshes","result","meshId","push","filter","material","forceCompilation","options","localOptions","assign","clipPlane","currentHotSwapingState","checkReady","clipPlaneState","Plane","allDone","lastError","tempSubMesh","SubMesh","_renderId","getCompilationError","allFallbacksProcessed","setTimeout","forceCompilationAsync","Promise","resolve","reject","reason","flag","blockMaterialDirtyMechanism","_DirtyCallbackArray","length","_TextureDirtyCallBack","LightDirtyFlag","_LightsDirtyCallBack","FresnelDirtyFlag","_FresnelDirtyCallBack","AttributesDirtyFlag","_AttributeDirtyCallBack","_MiscDirtyCallBack","_PrePassDirtyCallBack","_markAllSubMeshesAsDirty","_RunDirtyCallBacks","resetCachedMaterial","resetDrawCache","func","_drawWrappers","markAllAsDirty","_markScenePrePassDirty","prePassRenderer","enablePrePassRenderer","_AllDirtyCallBack","_markAllSubMeshesAsImageProcessingDirty","_ImageProcessingDirtyCallBack","_markAllSubMeshesAsFresnelAndMiscDirty","_FresnelAndMiscDirtyCallBack","_TextureAndMiscDirtyCallBack","_checkScenePerformancePriority","performancePriority","ScenePerformancePriority","BackwardCompatible","observer","onScenePerformancePriorityChangedObservable","addOnce","setPrePassRenderer","dispose","forceDisposeEffect","forceDisposeTextures","notBoundToMesh","stopAnimation","freeProcessedMaterials","removeMaterial","Disposed","index","materials","indexOf","splice","releaseVertexArrayObject","sourceMesh","clear","geometry","_releaseVertexArrayObject","serialize","SerializationHelper","Serialize","plugins","Parse","parsedMaterial","customType","overloadedAlbedo","BABYLON","LegacyPBRMaterial","Logger","Error","Instantiate","materialType","_loadedUniqueId","_a","pluginClassName","pluginData","pluginClassType","parse","TriangleStripDrawMode","TriangleFanDrawMode","MATERIAL_ALPHABLEND","MATERIAL_NORMALBLENDMETHOD_WHITEOUT","MATERIAL_NORMALBLENDMETHOD_RNM","Material._AllDirtyCallBack","Material._ImageProcessingDirtyCallBack","markAsImageProcessingDirty","Material._TextureDirtyCallBack","markAsTexturesDirty","Material._FresnelDirtyCallBack","markAsFresnelDirty","Material._MiscDirtyCallBack","markAsMiscDirty","Material._PrePassDirtyCallBack","markAsPrePassDirty","Material._LightsDirtyCallBack","markAsLightDirty","Material._AttributeDirtyCallBack","markAsAttributesDirty","Material._FresnelAndMiscDirtyCallBack","Material._TextureAndMiscDirtyCallBack","Material._RunDirtyCallBacks","cb","__decorate","prototype"]
}
