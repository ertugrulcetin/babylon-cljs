shadow$provide.module$node_modules$$babylonjs$core$PostProcesses$postProcessManager=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.PostProcessManager=void 0;var _buffer=require("module$node_modules$$babylonjs$core$Buffers$buffer");class PostProcessManager{constructor(scene){this._vertexBuffers={};this._scene=scene}_prepareBuffers(){if(!this._vertexBuffers[_buffer.VertexBuffer.PositionKind]){var vertices=[];vertices.push(1,1);vertices.push(-1,
1);vertices.push(-1,-1);vertices.push(1,-1);this._vertexBuffers[_buffer.VertexBuffer.PositionKind]=new _buffer.VertexBuffer(this._scene.getEngine(),vertices,_buffer.VertexBuffer.PositionKind,!1,!1,2);this._buildIndexBuffer()}}_buildIndexBuffer(){const indices=[];indices.push(0);indices.push(1);indices.push(2);indices.push(0);indices.push(2);indices.push(3);this._indexBuffer=this._scene.getEngine().createIndexBuffer(indices)}_rebuild(){const vb=this._vertexBuffers[_buffer.VertexBuffer.PositionKind];
vb&&(vb._rebuild(),this._buildIndexBuffer())}_prepareFrame(sourceTexture=null,postProcesses=null){const camera=this._scene.activeCamera;if(!camera)return!1;postProcesses=postProcesses||camera._postProcesses.filter(pp=>null!=pp);if(!postProcesses||0===postProcesses.length||!this._scene.postProcessesEnabled)return!1;postProcesses[0].activate(camera,sourceTexture,null!==postProcesses&&void 0!==postProcesses);return!0}directRender(postProcesses,targetTexture=null,forceFullscreenViewport=!1,faceIndex=
0,lodLevel=0,doNotBindFrambuffer=!1){var _a;const engine=this._scene.getEngine();for(let index=0;index<postProcesses.length;index++){index<postProcesses.length-1?postProcesses[index+1].activate(this._scene.activeCamera,null===targetTexture||void 0===targetTexture?void 0:targetTexture.texture):(targetTexture?engine.bindFramebuffer(targetTexture,faceIndex,void 0,void 0,forceFullscreenViewport,lodLevel):doNotBindFrambuffer||engine.restoreDefaultFramebuffer(),null===(_a=engine._debugInsertMarker)||void 0===
_a?void 0:_a.call(engine,`post process ${postProcesses[index].name} output`));const pp=postProcesses[index],effect=pp.apply();effect&&(pp.onBeforeRenderObservable.notifyObservers(effect),this._prepareBuffers(),engine.bindBuffers(this._vertexBuffers,this._indexBuffer,effect),engine.drawElementsType(0,0,6),pp.onAfterRenderObservable.notifyObservers(effect))}engine.setDepthBuffer(!0);engine.setDepthWrite(!0)}_finalizeFrame(doNotPresent,targetTexture,faceIndex,postProcesses,forceFullscreenViewport=!1){var _a;
const camera=this._scene.activeCamera;if(camera&&(postProcesses=postProcesses||camera._postProcesses.filter(pp=>null!=pp),0!==postProcesses.length&&this._scene.postProcessesEnabled)){var engine=this._scene.getEngine();for(let index=0,len=postProcesses.length;index<len;index++){const pp=postProcesses[index];index<len-1?pp._outputTexture=postProcesses[index+1].activate(camera,null===targetTexture||void 0===targetTexture?void 0:targetTexture.texture):(targetTexture?(engine.bindFramebuffer(targetTexture,
faceIndex,void 0,void 0,forceFullscreenViewport),pp._outputTexture=targetTexture):(engine.restoreDefaultFramebuffer(),pp._outputTexture=null),null===(_a=engine._debugInsertMarker)||void 0===_a?void 0:_a.call(engine,`post process ${postProcesses[index].name} output`));if(doNotPresent)break;const effect=pp.apply();effect&&(pp.onBeforeRenderObservable.notifyObservers(effect),this._prepareBuffers(),engine.bindBuffers(this._vertexBuffers,this._indexBuffer,effect),engine.drawElementsType(0,0,6),pp.onAfterRenderObservable.notifyObservers(effect))}engine.setDepthBuffer(!0);
engine.setDepthWrite(!0);engine.setAlphaMode(0)}}dispose(){const buffer=this._vertexBuffers[_buffer.VertexBuffer.PositionKind];buffer&&(buffer.dispose(),this._vertexBuffers[_buffer.VertexBuffer.PositionKind]=null);this._indexBuffer&&(this._scene.getEngine()._releaseBuffer(this._indexBuffer),this._indexBuffer=null)}}exports.PostProcessManager=PostProcessManager}
//# sourceMappingURL=module$node_modules$$babylonjs$core$PostProcesses$postProcessManager.js.map
