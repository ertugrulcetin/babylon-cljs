{
"version":3,
"file":"module$node_modules$$babylonjs$core$Engines$engineStore.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAEvBC,OAAAA,CAAcP,OAAA,CAAQ,qDAAR,CAMlB,MAAMM,YAAN,CAIa,4BAAoB,EAAA,CAC7B,MAA8B,EAA9B,GAAI,IAAKE,CAAAA,SAAUC,CAAAA,MAAnB,CACS,IADT,CAIO,IAAKD,CAAAA,SAAL,CAAe,IAAKA,CAAAA,SAAUC,CAAAA,MAA9B,CAAuC,CAAvC,CALsB,CAYpB,2BAAmB,EAAA,CAC5B,MAAO,KAAKC,CAAAA,iBADgB,CAhBhC,CAwBAR,OAAQI,CAAAA,WAAR,CAAsBA,WACtBA,YAAYE,CAAAA,SAAZ;AAAwB,EAMxBF,YAAYK,CAAAA,2BAAZ,CAA0C,IAAIJ,MAAYK,CAAAA,UAG1DN,YAAYI,CAAAA,iBAAZ,CAAgC,IAMhCJ,YAAYO,CAAAA,kBAAZ,CAAiC,CAAA,CAMjCP,YAAYQ,CAAAA,eAAZ,CAA8B,EA5DsF;",
"sources":["node_modules/@babylonjs/core/Engines/engineStore.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Engines$engineStore\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EngineStore = void 0;\n\nvar _observable = require(\"../Misc/observable.js\");\n\n/**\n * The engine store class is responsible to hold all the instances of Engine and Scene created\n * during the life time of the application.\n */\nclass EngineStore {\n  /**\n   * Gets the latest created engine\n   */\n  static get LastCreatedEngine() {\n    if (this.Instances.length === 0) {\n      return null;\n    }\n\n    return this.Instances[this.Instances.length - 1];\n  }\n  /**\n   * Gets the latest created scene\n   */\n\n\n  static get LastCreatedScene() {\n    return this._LastCreatedScene;\n  }\n\n}\n/** Gets the list of created engines */\n\n\nexports.EngineStore = EngineStore;\nEngineStore.Instances = new Array();\n/**\n * Notifies when an engine was disposed.\n * Mainly used for static/cache cleanup\n */\n\nEngineStore.OnEnginesDisposedObservable = new _observable.Observable();\n/** @internal */\n\nEngineStore._LastCreatedScene = null;\n/**\n * Gets or sets a global variable indicating if fallback texture must be used when a texture cannot be loaded\n * @ignorenaming\n */\n\nEngineStore.UseFallbackTexture = true;\n/**\n * Texture content used if a texture cannot loaded\n * @ignorenaming\n */\n\nEngineStore.FallbackTexture = \"\";\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","EngineStore","_observable","Instances","length","_LastCreatedScene","OnEnginesDisposedObservable","Observable","UseFallbackTexture","FallbackTexture"]
}
