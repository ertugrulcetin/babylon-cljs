shadow$provide.module$node_modules$$babylonjs$core$Misc$tags=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Tags=void 0;var _andOrNotEvaluator=require("module$node_modules$$babylonjs$core$Misc$andOrNotEvaluator");class Tags{static EnableFor(obj){obj._tags=obj._tags||{};obj.hasTags=()=>Tags.HasTags(obj);obj.addTags=tagsString=>Tags.AddTagsTo(obj,tagsString);obj.removeTags=tagsString=>Tags.RemoveTagsFrom(obj,tagsString);obj.matchesTagsQuery=tagsQuery=>
Tags.MatchesQuery(obj,tagsQuery)}static DisableFor(obj){delete obj._tags;delete obj.hasTags;delete obj.addTags;delete obj.removeTags;delete obj.matchesTagsQuery}static HasTags(obj){if(!obj._tags)return!1;obj=obj._tags;for(const i in obj)if(Object.prototype.hasOwnProperty.call(obj,i))return!0;return!1}static GetTags(obj,asString=!0){if(!obj._tags)return null;if(asString){asString=[];for(const tag in obj._tags)Object.prototype.hasOwnProperty.call(obj._tags,tag)&&!0===obj._tags[tag]&&asString.push(tag);
return asString.join(" ")}return obj._tags}static AddTagsTo(obj,tagsString){tagsString&&"string"===typeof tagsString&&tagsString.split(" ").forEach(function(tag){Tags._AddTagTo(obj,tag)})}static _AddTagTo(obj,tag){tag=tag.trim();""===tag||"true"===tag||"false"===tag||tag.match(/[\s]/)||tag.match(/^([!]|([|]|[&]){2})/)||(Tags.EnableFor(obj),obj._tags[tag]=!0)}static RemoveTagsFrom(obj,tagsString){if(Tags.HasTags(obj)){tagsString=tagsString.split(" ");for(const t in tagsString)Tags._RemoveTagFrom(obj,
tagsString[t])}}static _RemoveTagFrom(obj,tag){delete obj._tags[tag]}static MatchesQuery(obj,tagsQuery){return void 0===tagsQuery?!0:""===tagsQuery?Tags.HasTags(obj):_andOrNotEvaluator.AndOrNotEvaluator.Eval(tagsQuery,r=>Tags.HasTags(obj)&&obj._tags[r])}}exports.Tags=Tags}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Misc$tags.js.map
