{
"version":3,
"file":"module$node_modules$$babylonjs$core$Misc$webRequest.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Misc/webRequest.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Misc$webRequest\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebRequest = void 0;\n\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction createXMLHttpRequest() {\n  // If running in Babylon Native, then defer to the native XMLHttpRequest, which has the same public contract\n  if (typeof _native !== \"undefined\" && _native.XMLHttpRequest) {\n    return new _native.XMLHttpRequest();\n  } else {\n    return new XMLHttpRequest();\n  }\n}\n/**\n * Extended version of XMLHttpRequest with support for customizations (headers, ...)\n */\n\n\nclass WebRequest {\n  constructor() {\n    this._xhr = createXMLHttpRequest();\n    this._requestURL = \"\";\n  }\n\n  _injectCustomRequestHeaders() {\n    if (this._shouldSkipRequestModifications(this._requestURL)) {\n      return;\n    }\n\n    for (const key in WebRequest.CustomRequestHeaders) {\n      const val = WebRequest.CustomRequestHeaders[key];\n\n      if (val) {\n        this._xhr.setRequestHeader(key, val);\n      }\n    }\n  }\n\n  _shouldSkipRequestModifications(url) {\n    return WebRequest.SkipRequestModificationForBabylonCDN && (url.includes(\"preview.babylonjs.com\") || url.includes(\"cdn.babylonjs.com\"));\n  }\n  /**\n   * Gets or sets a function to be called when loading progress changes\n   */\n\n\n  get onprogress() {\n    return this._xhr.onprogress;\n  }\n\n  set onprogress(value) {\n    this._xhr.onprogress = value;\n  }\n  /**\n   * Returns client's state\n   */\n\n\n  get readyState() {\n    return this._xhr.readyState;\n  }\n  /**\n   * Returns client's status\n   */\n\n\n  get status() {\n    return this._xhr.status;\n  }\n  /**\n   * Returns client's status as a text\n   */\n\n\n  get statusText() {\n    return this._xhr.statusText;\n  }\n  /**\n   * Returns client's response\n   */\n\n\n  get response() {\n    return this._xhr.response;\n  }\n  /**\n   * Returns client's response url\n   */\n\n\n  get responseURL() {\n    return this._xhr.responseURL;\n  }\n  /**\n   * Returns client's response as text\n   */\n\n\n  get responseText() {\n    return this._xhr.responseText;\n  }\n  /**\n   * Gets or sets the expected response type\n   */\n\n\n  get responseType() {\n    return this._xhr.responseType;\n  }\n\n  set responseType(value) {\n    this._xhr.responseType = value;\n  }\n  /**\n   * Gets or sets the timeout value in milliseconds\n   */\n\n\n  get timeout() {\n    return this._xhr.timeout;\n  }\n\n  set timeout(value) {\n    this._xhr.timeout = value;\n  }\n\n  addEventListener(type, listener, options) {\n    this._xhr.addEventListener(type, listener, options);\n  }\n\n  removeEventListener(type, listener, options) {\n    this._xhr.removeEventListener(type, listener, options);\n  }\n  /**\n   * Cancels any network activity\n   */\n\n\n  abort() {\n    this._xhr.abort();\n  }\n  /**\n   * Initiates the request. The optional argument provides the request body. The argument is ignored if request method is GET or HEAD\n   * @param body defines an optional request body\n   */\n\n\n  send(body) {\n    if (WebRequest.CustomRequestHeaders) {\n      this._injectCustomRequestHeaders();\n    }\n\n    this._xhr.send(body);\n  }\n  /**\n   * Sets the request method, request URL\n   * @param method defines the method to use (GET, POST, etc..)\n   * @param url defines the url to connect with\n   */\n\n\n  open(method, url) {\n    for (const update of WebRequest.CustomRequestModifiers) {\n      if (this._shouldSkipRequestModifications(url)) {\n        return;\n      }\n\n      update(this._xhr, url);\n    } // Clean url\n\n\n    url = url.replace(\"file:http:\", \"http:\");\n    url = url.replace(\"file:https:\", \"https:\");\n    this._requestURL = url;\n    return this._xhr.open(method, url, true);\n  }\n  /**\n   * Sets the value of a request header.\n   * @param name The name of the header whose value is to be set\n   * @param value The value to set as the body of the header\n   */\n\n\n  setRequestHeader(name, value) {\n    this._xhr.setRequestHeader(name, value);\n  }\n  /**\n   * Get the string containing the text of a particular header's value.\n   * @param name The name of the header\n   * @returns The string containing the text of the given header name\n   */\n\n\n  getResponseHeader(name) {\n    return this._xhr.getResponseHeader(name);\n  }\n\n}\n/**\n * Custom HTTP Request Headers to be sent with XMLHttpRequests\n * i.e. when loading files, where the server/service expects an Authorization header\n */\n\n\nexports.WebRequest = WebRequest;\nWebRequest.CustomRequestHeaders = {};\n/**\n * Add callback functions in this array to update all the requests before they get sent to the network\n */\n\nWebRequest.CustomRequestModifiers = new Array();\nWebRequest.SkipRequestModificationForBabylonCDN = true;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebRequest","constructor","_native","XMLHttpRequest","_xhr","_requestURL","_injectCustomRequestHeaders","_shouldSkipRequestModifications","key","CustomRequestHeaders","val","setRequestHeader","url","SkipRequestModificationForBabylonCDN","includes","onprogress","readyState","status","statusText","response","responseURL","responseText","responseType","timeout","addEventListener","type","listener","options","removeEventListener","abort","send","body","open","method","update","CustomRequestModifiers","replace","name","getResponseHeader"]
}
