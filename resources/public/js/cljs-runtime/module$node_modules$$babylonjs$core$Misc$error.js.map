{
"version":3,
"file":"module$node_modules$$babylonjs$core$Misc$error.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuBJ,OAAQK,CAAAA,UAA/B,CAA4CL,OAAQM,CAAAA,SAApD,CAAgE,IAAK,EASrE,MAAMA,UAAN,QAAwBC,MAAxB,EAKAP,OAAQM,CAAAA,SAAR,CAAoBA,SAEpBA,UAAUE,CAAAA,eAAV,CAA4BP,MAAOQ,CAAAA,cAAnC,EAAsD,CAAA,CAACC,CAAD,CAAIC,KAAJ,CAAA,EAAc,CAClED,CAAEE,CAAAA,SAAF,CAAcD,KACd,OAAOD,EAF2D,CAAd,CA2CtDV,QAAQK,CAAAA,UAAR,CAhCmBA,CAIjBQ,0BAA2B,CAJVR,CAQjBS,wBAAyB,GARRT,CAYjBU,+BAAgC,GAZfV,CAgBjBW,iBAAkB,GAhBDX;AAoBjBY,cAAe,GApBEZ,CAuBjBa,iBAAkB,IAvBDb,CA0BjBc,cAAe,IA1BEd,CAkCnB,MAAMD,aAAN,QAA2BE,UAA3B,CAOEc,WAAW,CAACC,OAAD,CAAUC,SAAV,CAAqBC,UAArB,CAAiC,CAC1C,KAAA,CAAMF,OAAN,CACA,KAAKC,CAAAA,SAAL,CAAiBA,SACjB,KAAKC,CAAAA,UAAL,CAAkBA,UAClB,KAAKC,CAAAA,IAAL,CAAY,cAEZlB,UAAUE,CAAAA,eAAV,CAA0B,IAA1B,CAAgCJ,YAAaqB,CAAAA,SAA7C,CAN0C,CAP9C,CAkBAzB,OAAQI,CAAAA,YAAR,CAAuBA,YArFoF;",
"sources":["node_modules/@babylonjs/core/Misc/error.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Misc$error\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RuntimeError = exports.ErrorCodes = exports.BaseError = void 0;\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Base error. Due to limitations of typedoc-check and missing documentation\n * in lib.es5.d.ts, cannot extend Error directly for RuntimeError.\n * @ignore\n */\nclass BaseError extends Error {} // See https://stackoverflow.com/questions/12915412/how-do-i-extend-a-host-object-e-g-error-in-typescript\n// and https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n// Polyfill for Object.setPrototypeOf if necessary.\n\n\nexports.BaseError = BaseError;\n\nBaseError._setPrototypeOf = Object.setPrototypeOf || ((o, proto) => {\n  o.__proto__ = proto;\n  return o;\n});\n/* IMP! DO NOT CHANGE THE NUMBERING OF EXISTING ERROR CODES */\n\n/**\n * Error codes for BaseError\n */\n\n\nconst ErrorCodes = {\n  // Mesh errors 0-999\n\n  /** Invalid or empty mesh vertex positions. */\n  MeshInvalidPositionsError: 0,\n  // Texture errors 1000-1999\n\n  /** Unsupported texture found. */\n  UnsupportedTextureError: 1000,\n  // GLTFLoader errors 2000-2999\n\n  /** Unexpected magic number found in GLTF file header. */\n  GLTFLoaderUnexpectedMagicError: 2000,\n  // SceneLoader errors 3000-3999\n\n  /** SceneLoader generic error code. Ideally wraps the inner exception. */\n  SceneLoaderError: 3000,\n  // File related errors 4000-4999\n\n  /** Load file error */\n  LoadFileError: 4000,\n\n  /** Request file error */\n  RequestFileError: 4001,\n\n  /** Read file error */\n  ReadFileError: 4002\n};\n/**\n * Application runtime error\n */\n\nexports.ErrorCodes = ErrorCodes;\n\nclass RuntimeError extends BaseError {\n  /**\n   * Creates a new RuntimeError\n   * @param message defines the message of the error\n   * @param errorCode the error code\n   * @param innerError the error that caused the outer error\n   */\n  constructor(message, errorCode, innerError) {\n    super(message);\n    this.errorCode = errorCode;\n    this.innerError = innerError;\n    this.name = \"RuntimeError\";\n\n    BaseError._setPrototypeOf(this, RuntimeError.prototype);\n  }\n\n}\n\nexports.RuntimeError = RuntimeError;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","RuntimeError","ErrorCodes","BaseError","Error","_setPrototypeOf","setPrototypeOf","o","proto","__proto__","MeshInvalidPositionsError","UnsupportedTextureError","GLTFLoaderUnexpectedMagicError","SceneLoaderError","LoadFileError","RequestFileError","ReadFileError","constructor","message","errorCode","innerError","name","prototype"]
}
