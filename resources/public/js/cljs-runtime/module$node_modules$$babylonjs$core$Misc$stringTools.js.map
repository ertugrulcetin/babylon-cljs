{
"version":3,
"file":"module$node_modules$$babylonjs$core$Misc$stringTools.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Misc/stringTools.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Misc$stringTools\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringTools = exports.PadNumber = exports.DecodeBase64ToBinary = exports.DecodeBase64ToString = exports.EncodeArrayBufferToBase64 = exports.Decode = exports.StartsWith = exports.EndsWith = void 0;\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Checks for a matching suffix at the end of a string (for ES5 and lower)\n * @param str Source string\n * @param suffix Suffix to search for in the source string\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\n * @deprecated Please use native string function instead\n */\nconst EndsWith = (str, suffix) => {\n  return str.endsWith(suffix);\n};\n/**\n * Checks for a matching suffix at the beginning of a string (for ES5 and lower)\n * @param str Source string\n * @param suffix Suffix to search for in the source string\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\n * @deprecated Please use native string function instead\n */\n\n\nexports.EndsWith = EndsWith;\n\nconst StartsWith = (str, suffix) => {\n  if (!str) {\n    return false;\n  }\n\n  return str.startsWith(suffix);\n};\n/**\n * Decodes a buffer into a string\n * @param buffer The buffer to decode\n * @returns The decoded string\n */\n\n\nexports.StartsWith = StartsWith;\n\nconst Decode = buffer => {\n  if (typeof TextDecoder !== \"undefined\") {\n    return new TextDecoder().decode(buffer);\n  }\n\n  let result = \"\";\n\n  for (let i = 0; i < buffer.byteLength; i++) {\n    result += String.fromCharCode(buffer[i]);\n  }\n\n  return result;\n};\n/**\n * Encode a buffer to a base64 string\n * @param buffer defines the buffer to encode\n * @returns the encoded string\n */\n\n\nexports.Decode = Decode;\n\nconst EncodeArrayBufferToBase64 = buffer => {\n  const keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  let output = \"\";\n  let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n  let i = 0;\n  const bytes = ArrayBuffer.isView(buffer) ? new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength) : new Uint8Array(buffer);\n\n  while (i < bytes.length) {\n    chr1 = bytes[i++];\n    chr2 = i < bytes.length ? bytes[i++] : Number.NaN;\n    chr3 = i < bytes.length ? bytes[i++] : Number.NaN;\n    enc1 = chr1 >> 2;\n    enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n    enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n    enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n  }\n\n  return output;\n};\n/**\n * Converts a given base64 string as an ASCII encoded stream of data\n * @param base64Data The base64 encoded string to decode\n * @returns Decoded ASCII string\n */\n\n\nexports.EncodeArrayBufferToBase64 = EncodeArrayBufferToBase64;\n\nconst DecodeBase64ToString = base64Data => {\n  return atob(base64Data);\n};\n/**\n * Converts a given base64 string into an ArrayBuffer of raw byte data\n * @param base64Data The base64 encoded string to decode\n * @returns ArrayBuffer of byte data\n */\n\n\nexports.DecodeBase64ToString = DecodeBase64ToString;\n\nconst DecodeBase64ToBinary = base64Data => {\n  const decodedString = DecodeBase64ToString(base64Data);\n  const bufferLength = decodedString.length;\n  const bufferView = new Uint8Array(new ArrayBuffer(bufferLength));\n\n  for (let i = 0; i < bufferLength; i++) {\n    bufferView[i] = decodedString.charCodeAt(i);\n  }\n\n  return bufferView.buffer;\n};\n/**\n * Converts a number to string and pads with preceding zeroes until it is of specified length.\n * @param num the number to convert and pad\n * @param length the expected length of the string\n * @returns the padded string\n */\n\n\nexports.DecodeBase64ToBinary = DecodeBase64ToBinary;\n\nconst PadNumber = (num, length) => {\n  let str = String(num);\n\n  while (str.length < length) {\n    str = \"0\" + str;\n  }\n\n  return str;\n};\n/**\n * Helper to manipulate strings\n */\n\n\nexports.PadNumber = PadNumber;\nconst StringTools = {\n  EndsWith,\n  StartsWith,\n  Decode,\n  EncodeArrayBufferToBase64,\n  DecodeBase64ToString,\n  DecodeBase64ToBinary,\n  PadNumber\n};\nexports.StringTools = StringTools;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","StringTools","PadNumber","DecodeBase64ToBinary","DecodeBase64ToString","EncodeArrayBufferToBase64","Decode","StartsWith","EndsWith","str","suffix","endsWith","startsWith","buffer","TextDecoder","decode","result","i","byteLength","String","fromCharCode","output","chr3","enc1","enc3","enc4","bytes","ArrayBuffer","isView","Uint8Array","byteOffset","length","chr1","chr2","Number","NaN","enc2","isNaN","keyStr","charAt","base64Data","atob","decodedString","bufferLength","bufferView","charCodeAt","num"]
}
