shadow$provide.module$node_modules$$babylonjs$core$DeviceInput$eventFactory=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.DeviceEventFactory=void 0;var _deviceInputEvents=require("module$node_modules$$babylonjs$core$Events$deviceInputEvents"),_deviceEnums=require("module$node_modules$$babylonjs$core$DeviceInput$InputDevices$deviceEnums");class DeviceEventFactory{static CreateDeviceEvent(deviceType,deviceSlot,inputIndex,currentState,deviceInputSystem,
elementToAttachTo,pointerId){switch(deviceType){case _deviceEnums.DeviceType.Keyboard:return this._CreateKeyboardEvent(inputIndex,currentState,deviceInputSystem,elementToAttachTo);case _deviceEnums.DeviceType.Mouse:if(inputIndex===_deviceEnums.PointerInput.MouseWheelX||inputIndex===_deviceEnums.PointerInput.MouseWheelY||inputIndex===_deviceEnums.PointerInput.MouseWheelZ)return this._CreateWheelEvent(deviceType,deviceSlot,inputIndex,currentState,deviceInputSystem,elementToAttachTo);case _deviceEnums.DeviceType.Touch:return this._CreatePointerEvent(deviceType,
deviceSlot,inputIndex,currentState,deviceInputSystem,elementToAttachTo,pointerId);default:throw`Unable to generate event for device ${_deviceEnums.DeviceType[deviceType]}`;}}static _CreatePointerEvent(deviceType,deviceSlot,inputIndex,currentState,deviceInputSystem,elementToAttachTo,pointerId){deviceInputSystem=this._CreateMouseEvent(deviceType,deviceSlot,inputIndex,currentState,deviceInputSystem,elementToAttachTo);deviceType===_deviceEnums.DeviceType.Mouse?(deviceInputSystem.deviceType=_deviceEnums.DeviceType.Mouse,
deviceInputSystem.pointerId=1,deviceInputSystem.pointerType="mouse"):(deviceInputSystem.deviceType=_deviceEnums.DeviceType.Touch,deviceInputSystem.pointerId=null!==pointerId&&void 0!==pointerId?pointerId:deviceSlot,deviceInputSystem.pointerType="touch");inputIndex===_deviceEnums.PointerInput.Move?deviceInputSystem.type="pointermove":inputIndex>=_deviceEnums.PointerInput.LeftClick&&inputIndex<=_deviceEnums.PointerInput.RightClick&&(deviceInputSystem.type=1===currentState?"pointerdown":"pointerup",
deviceInputSystem.button=inputIndex-2);return deviceInputSystem}static _CreateWheelEvent(deviceType,deviceSlot,inputIndex,currentState,deviceInputSystem,elementToAttachTo){deviceType=this._CreateMouseEvent(deviceType,deviceSlot,inputIndex,currentState,deviceInputSystem,elementToAttachTo);deviceType.pointerId=1;deviceType.type="wheel";deviceType.deltaMode=_deviceInputEvents.EventConstants.DOM_DELTA_PIXEL;deviceType.deltaX=0;deviceType.deltaY=0;deviceType.deltaZ=0;switch(inputIndex){case _deviceEnums.PointerInput.MouseWheelX:deviceType.deltaX=
currentState;break;case _deviceEnums.PointerInput.MouseWheelY:deviceType.deltaY=currentState;break;case _deviceEnums.PointerInput.MouseWheelZ:deviceType.deltaZ=currentState}return deviceType}static _CreateMouseEvent(deviceType,deviceSlot,inputIndex,currentState,deviceInputSystem,elementToAttachTo){currentState=this._CreateEvent(elementToAttachTo);const pointerX=deviceInputSystem.pollInput(deviceType,deviceSlot,_deviceEnums.PointerInput.Horizontal),pointerY=deviceInputSystem.pollInput(deviceType,deviceSlot,
_deviceEnums.PointerInput.Vertical);elementToAttachTo?(currentState.movementX=0,currentState.movementY=0,currentState.offsetX=currentState.movementX-elementToAttachTo.getBoundingClientRect().x,currentState.offsetY=currentState.movementY-elementToAttachTo.getBoundingClientRect().y):(currentState.movementX=deviceInputSystem.pollInput(deviceType,deviceSlot,_deviceEnums.NativePointerInput.DeltaHorizontal),currentState.movementY=deviceInputSystem.pollInput(deviceType,deviceSlot,_deviceEnums.NativePointerInput.DeltaVertical),
currentState.offsetX=0,currentState.offsetY=0);this._CheckNonCharacterKeys(currentState,deviceInputSystem);currentState.clientX=pointerX;currentState.clientY=pointerY;currentState.x=pointerX;currentState.y=pointerY;currentState.deviceType=deviceType;currentState.deviceSlot=deviceSlot;currentState.inputIndex=inputIndex;return currentState}static _CreateKeyboardEvent(inputIndex,currentState,deviceInputSystem,elementToAttachTo){elementToAttachTo=this._CreateEvent(elementToAttachTo);this._CheckNonCharacterKeys(elementToAttachTo,
deviceInputSystem);elementToAttachTo.deviceType=_deviceEnums.DeviceType.Keyboard;elementToAttachTo.deviceSlot=0;elementToAttachTo.inputIndex=inputIndex;elementToAttachTo.type=1===currentState?"keydown":"keyup";elementToAttachTo.key=String.fromCharCode(inputIndex);elementToAttachTo.keyCode=inputIndex;return elementToAttachTo}static _CheckNonCharacterKeys(evt,deviceInputSystem){const isKeyboardActive=deviceInputSystem.isDeviceAvailable(_deviceEnums.DeviceType.Keyboard),altKey=isKeyboardActive&&1===
deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard,0,18),ctrlKey=isKeyboardActive&&1===deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard,0,17),metaKey=isKeyboardActive&&(1===deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard,0,91)||1===deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard,0,92)||1===deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard,0,93));deviceInputSystem=isKeyboardActive&&1===deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard,
0,16);evt.altKey=altKey;evt.ctrlKey=ctrlKey;evt.metaKey=metaKey;evt.shiftKey=deviceInputSystem}static _CreateEvent(elementToAttachTo){const evt={preventDefault:()=>{}};evt.target=elementToAttachTo;return evt}}exports.DeviceEventFactory=DeviceEventFactory}
//# sourceMappingURL=module$node_modules$$babylonjs$core$DeviceInput$eventFactory.js.map
