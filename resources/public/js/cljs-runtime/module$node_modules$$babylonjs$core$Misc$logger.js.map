{
"version":3,
"file":"module$node_modules$$babylonjs$core$Misc$logger.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Misc/logger.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Misc$logger\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = void 0;\n\n/**\n * Logger used throughout the application to allow configuration of\n * the log level required for the messages.\n */\nclass Logger {\n  static _CheckLimit(message, limit) {\n    let entry = Logger._LogLimitOutputs[message];\n\n    if (!entry) {\n      entry = {\n        limit,\n        current: 1\n      };\n      Logger._LogLimitOutputs[message] = entry;\n    } else {\n      entry.current++;\n    }\n\n    return entry.current <= entry.limit;\n  }\n\n  static _GenerateLimitMessage(message, level = 1) {\n    var _a;\n\n    const entry = Logger._LogLimitOutputs[message];\n\n    if (!entry || !Logger.MessageLimitReached) {\n      return;\n    }\n\n    const type = this._Levels[level];\n\n    if (entry.current === entry.limit) {\n      Logger[type.name](Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, (_a = type.name) !== null && _a !== void 0 ? _a : \"\"));\n    }\n  }\n\n  static _AddLogEntry(entry) {\n    Logger._LogCache = entry + Logger._LogCache;\n\n    if (Logger.OnNewCacheEntry) {\n      Logger.OnNewCacheEntry(entry);\n    }\n  }\n\n  static _FormatMessage(message) {\n    const padStr = i => i < 10 ? \"0\" + i : \"\" + i;\n\n    const date = new Date();\n    return \"[\" + padStr(date.getHours()) + \":\" + padStr(date.getMinutes()) + \":\" + padStr(date.getSeconds()) + \"]: \" + message;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  static _LogDisabled(message, limit) {// nothing to do\n  }\n\n  static _LogEnabled(level = 1, message, limit) {\n    if (limit !== undefined && !Logger._CheckLimit(message, limit)) {\n      return;\n    }\n\n    const formattedMessage = Logger._FormatMessage(message);\n\n    const type = this._Levels[level];\n    type.logFunc && type.logFunc(\"BJS - \" + formattedMessage);\n    const entry = `<div style='color:${type.color}'>${formattedMessage}</div><br>`;\n\n    Logger._AddLogEntry(entry);\n\n    Logger._GenerateLimitMessage(message, level);\n  }\n  /**\n   * Gets current log cache (list of logs)\n   */\n\n\n  static get LogCache() {\n    return Logger._LogCache;\n  }\n  /**\n   * Clears the log cache\n   */\n\n\n  static ClearLogCache() {\n    Logger._LogCache = \"\";\n    Logger._LogLimitOutputs = {};\n    Logger.errorsCount = 0;\n  }\n  /**\n   * Sets the current log level (MessageLogLevel / WarningLogLevel / ErrorLogLevel)\n   */\n\n\n  static set LogLevels(level) {\n    Logger.Log = Logger._LogDisabled;\n    Logger.Warn = Logger._LogDisabled;\n    Logger.Error = Logger._LogDisabled;\n    [Logger.MessageLogLevel, Logger.WarningLogLevel, Logger.ErrorLogLevel].forEach(l => {\n      if ((level & l) === l) {\n        const type = this._Levels[l];\n        Logger[type.name] = Logger._LogEnabled.bind(Logger, l);\n      }\n    });\n  }\n\n}\n/**\n * No log\n */\n\n\nexports.Logger = Logger;\nLogger.NoneLogLevel = 0;\n/**\n * Only message logs\n */\n\nLogger.MessageLogLevel = 1;\n/**\n * Only warning logs\n */\n\nLogger.WarningLogLevel = 2;\n/**\n * Only error logs\n */\n\nLogger.ErrorLogLevel = 4;\n/**\n * All logs\n */\n\nLogger.AllLogLevel = 7;\n/**\n * Message to display when a message has been logged too many times\n */\n\nLogger.MessageLimitReached = \"Too many %TYPE%s (%LIMIT%), no more %TYPE%s will be reported for this message.\";\nLogger._LogCache = \"\";\nLogger._LogLimitOutputs = {}; // levels according to the (binary) numbering.\n\nLogger._Levels = [{}, {\n  color: \"white\",\n  logFunc: console.log,\n  name: \"Log\"\n}, {\n  color: \"orange\",\n  logFunc: console.warn,\n  name: \"Warn\"\n}, {}, {\n  color: \"red\",\n  logFunc: console.error,\n  name: \"Error\"\n}];\n/**\n * Gets a value indicating the number of loading errors\n * @ignorenaming\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nLogger.errorsCount = 0;\n/**\n * Log a message to the console\n */\n\nLogger.Log = Logger._LogEnabled.bind(Logger, Logger.MessageLogLevel);\n/**\n * Write a warning message to the console\n */\n\nLogger.Warn = Logger._LogEnabled.bind(Logger, Logger.WarningLogLevel);\n/**\n * Write an error message to the console\n */\n\nLogger.Error = Logger._LogEnabled.bind(Logger, Logger.ErrorLogLevel);\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Logger","_CheckLimit","message","limit","entry","_LogLimitOutputs","current","_GenerateLimitMessage","level","_a","MessageLimitReached","type","_Levels","name","replace","_AddLogEntry","_LogCache","OnNewCacheEntry","_FormatMessage","padStr","i","date","Date","getHours","getMinutes","getSeconds","_LogDisabled","_LogEnabled","undefined","formattedMessage","logFunc","color","ClearLogCache","errorsCount","Log","Warn","Error","MessageLogLevel","WarningLogLevel","ErrorLogLevel","forEach","l","bind","NoneLogLevel","AllLogLevel","console","log","warn","error"]
}
