shadow$provide.module$node_modules$$babylonjs$core$Misc$andOrNotEvaluator=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.AndOrNotEvaluator=void 0;class AndOrNotEvaluator{static Eval(query,evaluateCallback){query=query.match(/\([^()]*\)/g)?query.replace(/\([^()]*\)/g,r=>{r=r.slice(1,r.length-1);return AndOrNotEvaluator._HandleParenthesisContent(r,evaluateCallback)}):AndOrNotEvaluator._HandleParenthesisContent(query,evaluateCallback);return"true"===
query?!0:"false"===query?!1:AndOrNotEvaluator.Eval(query,evaluateCallback)}static _HandleParenthesisContent(parenthesisContent,evaluateCallback){evaluateCallback=evaluateCallback||(r=>"true"===r?!0:!1);parenthesisContent=parenthesisContent.split("||");for(const i in parenthesisContent)if(Object.prototype.hasOwnProperty.call(parenthesisContent,i)){let ori=AndOrNotEvaluator._SimplifyNegation(parenthesisContent[i].trim());const and=ori.split("\x26\x26");if(1<and.length)for(let j=0;j<and.length;++j){var result=
AndOrNotEvaluator._SimplifyNegation(and[j].trim());result="true"!==result&&"false"!==result?"!"===result[0]?!evaluateCallback(result.substring(1)):evaluateCallback(result):"true"===result?!0:!1;if(!result){ori="false";break}}if(result||"true"===ori){result=!0;break}result="true"!==ori&&"false"!==ori?"!"===ori[0]?!evaluateCallback(ori.substring(1)):evaluateCallback(ori):"true"===ori?!0:!1}return result?"true":"false"}static _SimplifyNegation(booleanString){booleanString=booleanString.replace(/^[\s!]+/,
r=>{r=r.replace(/[\s]/g,()=>"");return r.length%2?"!":""});booleanString=booleanString.trim();"!true"===booleanString?booleanString="false":"!false"===booleanString&&(booleanString="true");return booleanString}}exports.AndOrNotEvaluator=AndOrNotEvaluator}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Misc$andOrNotEvaluator.js.map
