{
"version":3,
"file":"module$node_modules$$babylonjs$core$Engines$Processors$Expressions$shaderDefineExpression.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Engines/Processors/Expressions/shaderDefineExpression.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Engines$Processors$Expressions$shaderDefineExpression\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShaderDefineExpression = void 0;\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/** @internal */\nclass ShaderDefineExpression {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isTrue(preprocessors) {\n    return true;\n  }\n\n  static postfixToInfix(postfix) {\n    const stack = [];\n\n    for (const c of postfix) {\n      if (ShaderDefineExpression._OperatorPriority[c] === undefined) {\n        stack.push(c);\n      } else {\n        const v1 = stack[stack.length - 1],\n              v2 = stack[stack.length - 2];\n        stack.length -= 2;\n        stack.push(`(${v2}${c}${v1})`);\n      }\n    }\n\n    return stack[stack.length - 1];\n  }\n  /**\n   * Converts an infix expression to a postfix expression.\n   *\n   * This method is used to transform infix expressions, which are more human-readable,\n   * into postfix expressions, also known as Reverse Polish Notation (RPN), that can be\n   * evaluated more efficiently by a computer. The conversion is based on the operator\n   * priority defined in _OperatorPriority.\n   *\n   * The function employs a stack-based algorithm for the conversion and caches the result\n   * to improve performance. The cache keeps track of each converted expression's access time\n   * to manage the cache size and optimize memory usage. When the cache size exceeds a specified\n   * limit, the least recently accessed items in the cache are deleted.\n   *\n   * The cache mechanism is particularly helpful for shader compilation, where the same infix\n   * expressions might be encountered repeatedly, hence the caching can speed up the process.\n   *\n   * @param infix - The infix expression to be converted.\n   * @returns The postfix expression as an array of strings.\n   */\n\n\n  static infixToPostfix(infix) {\n    // Is infix already in cache\n    const cacheItem = ShaderDefineExpression._InfixToPostfixCache.get(infix);\n\n    if (cacheItem) {\n      cacheItem.accessTime = Date.now();\n      return cacheItem.result;\n    } // Is infix contain any operator\n\n\n    if (!infix.includes(\"&&\") && !infix.includes(\"||\") && !infix.includes(\")\") && !infix.includes(\"(\")) {\n      return [infix];\n    }\n\n    const result = [];\n    let stackIdx = -1;\n\n    const pushOperand = () => {\n      operand = operand.trim();\n\n      if (operand !== \"\") {\n        result.push(operand);\n        operand = \"\";\n      }\n    };\n\n    const push = s => {\n      if (stackIdx < ShaderDefineExpression._Stack.length - 1) {\n        ShaderDefineExpression._Stack[++stackIdx] = s;\n      }\n    };\n\n    const peek = () => ShaderDefineExpression._Stack[stackIdx];\n\n    const pop = () => stackIdx === -1 ? \"!!INVALID EXPRESSION!!\" : ShaderDefineExpression._Stack[stackIdx--];\n\n    let idx = 0,\n        operand = \"\";\n\n    while (idx < infix.length) {\n      const c = infix.charAt(idx),\n            token = idx < infix.length - 1 ? infix.substr(idx, 2) : \"\";\n\n      if (c === \"(\") {\n        operand = \"\";\n        push(c);\n      } else if (c === \")\") {\n        pushOperand();\n\n        while (stackIdx !== -1 && peek() !== \"(\") {\n          result.push(pop());\n        }\n\n        pop();\n      } else if (ShaderDefineExpression._OperatorPriority[token] > 1) {\n        pushOperand();\n\n        while (stackIdx !== -1 && ShaderDefineExpression._OperatorPriority[peek()] >= ShaderDefineExpression._OperatorPriority[token]) {\n          result.push(pop());\n        }\n\n        push(token);\n        idx++;\n      } else {\n        operand += c;\n      }\n\n      idx++;\n    }\n\n    pushOperand();\n\n    while (stackIdx !== -1) {\n      if (peek() === \"(\") {\n        pop();\n      } else {\n        result.push(pop());\n      }\n    } // If the cache is at capacity, clear it before adding a new item\n\n\n    if (ShaderDefineExpression._InfixToPostfixCache.size >= ShaderDefineExpression.InfixToPostfixCacheLimitSize) {\n      ShaderDefineExpression.ClearCache();\n    } // Add the new item to the cache, including the current time as the last access time\n\n\n    ShaderDefineExpression._InfixToPostfixCache.set(infix, {\n      result,\n      accessTime: Date.now()\n    });\n\n    return result;\n  }\n\n  static ClearCache() {\n    // Convert the cache to an array and sort by last access time\n    const sortedCache = Array.from(ShaderDefineExpression._InfixToPostfixCache.entries()).sort((a, b) => a[1].accessTime - b[1].accessTime); // Remove the least recently accessed half of the cache\n\n    for (let i = 0; i < ShaderDefineExpression.InfixToPostfixCacheCleanupSize; i++) {\n      ShaderDefineExpression._InfixToPostfixCache.delete(sortedCache[i][0]);\n    }\n  }\n\n}\n/**\n * Cache items count limit for the InfixToPostfix cache.\n * It uses to improve the performance of the shader compilation.\n * For details see PR: https://github.com/BabylonJS/Babylon.js/pull/13936\n */\n\n\nexports.ShaderDefineExpression = ShaderDefineExpression;\nShaderDefineExpression.InfixToPostfixCacheLimitSize = 50000;\n/**\n * When the cache size is exceeded, a cache cleanup will be triggered\n * and the cache will be reduced by the size specified\n * in the InfixToPostfixCacheCleanupSize variable, removing entries\n * that have not been accessed the longest.\n */\n\nShaderDefineExpression.InfixToPostfixCacheCleanupSize = 25000;\nShaderDefineExpression._InfixToPostfixCache = new Map();\nShaderDefineExpression._OperatorPriority = {\n  \")\": 0,\n  \"(\": 1,\n  \"||\": 2,\n  \"&&\": 3\n};\nShaderDefineExpression._Stack = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ShaderDefineExpression","isTrue","preprocessors","postfixToInfix","postfix","stack","c","undefined","_OperatorPriority","push","v1","length","v2","infixToPostfix","infix","cacheItem","_InfixToPostfixCache","get","accessTime","result","Date","now","includes","stackIdx","pushOperand","operand","trim","s","_Stack","pop","idx","charAt","token","substr","size","InfixToPostfixCacheLimitSize","ClearCache","set","sortedCache","Array","from","entries","sort","a","b","i","InfixToPostfixCacheCleanupSize","delete","Map"]
}
