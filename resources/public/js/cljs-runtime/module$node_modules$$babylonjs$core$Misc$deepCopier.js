shadow$provide.module$node_modules$$babylonjs$core$Misc$deepCopier=function(global,require,module,exports){function GetAllPropertyNames(obj){const props=[];do Object.getOwnPropertyNames(obj).forEach(function(prop){-1===props.indexOf(prop)&&props.push(prop)});while(obj=Object.getPrototypeOf(obj));return props}Object.defineProperty(exports,"__esModule",{value:!0});exports.DeepCopier=void 0;var _logger=require("module$node_modules$$babylonjs$core$Misc$logger");const CloneValue=(source,destinationObject)=>
{if(!source||source.getClassName&&"Mesh"===source.getClassName())return null;if(!source.getClassName||"SubMesh"!==source.getClassName()&&"PhysicsBody"!==source.getClassName()){if(source.clone)return source.clone();if(Array.isArray(source))return source.slice()}else return source.clone(destinationObject);return null};class DeepCopier{static DeepCopy(source,destination,doNotCopyList,mustCopyList){var properties=GetAllPropertyNames(source);for(const prop of properties)if(("_"!==prop[0]||mustCopyList&&
-1!==mustCopyList.indexOf(prop))&&!(prop.endsWith("Observable")||doNotCopyList&&-1!==doNotCopyList.indexOf(prop))){properties=source[prop];var typeOfSourceValue=typeof properties;if("function"!==typeOfSourceValue)try{if("object"===typeOfSourceValue)if(properties instanceof Uint8Array)destination[prop]=Uint8Array.from(properties);else if(properties instanceof Array){if(destination[prop]=[],0<properties.length)if("object"==typeof properties[0])for(typeOfSourceValue=0;typeOfSourceValue<properties.length;typeOfSourceValue++){const clonedValue=
CloneValue(properties[typeOfSourceValue],destination);-1===destination[prop].indexOf(clonedValue)&&destination[prop].push(clonedValue)}else destination[prop]=properties.slice(0)}else destination[prop]=CloneValue(properties,destination);else destination[prop]=properties}catch(e){_logger.Logger.Warn(e.message)}}}}exports.DeepCopier=DeepCopier}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Misc$deepCopier.js.map
