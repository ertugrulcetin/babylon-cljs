{
"version":3,
"file":"module$node_modules$$babylonjs$core$Materials$effect.js",
"lineCount":40,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Materials/effect.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Materials$effect\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Effect = void 0;\n\nvar _observable = require(\"../Misc/observable.js\");\n\nvar _domManagement = require(\"../Misc/domManagement.js\");\n\nvar _logger = require(\"../Misc/logger.js\");\n\nvar _shaderProcessor = require(\"../Engines/Processors/shaderProcessor.js\");\n\nvar _shaderStore = require(\"../Engines/shaderStore.js\");\n\nvar _shaderLanguage = require(\"./shaderLanguage.js\");\n\n/**\n * Effect containing vertex and fragment shader that can be executed on an object.\n */\nclass Effect {\n  /**\n   * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\n   */\n  static get ShadersRepository() {\n    return _shaderStore.ShaderStore.ShadersRepository;\n  }\n\n  static set ShadersRepository(repo) {\n    _shaderStore.ShaderStore.ShadersRepository = repo;\n  }\n  /**\n   * Observable that will be called when effect is bound.\n   */\n\n\n  get onBindObservable() {\n    if (!this._onBindObservable) {\n      this._onBindObservable = new _observable.Observable();\n    }\n\n    return this._onBindObservable;\n  }\n  /**\n   * Instantiates an effect.\n   * An effect can be used to create/manage/execute vertex and fragment shaders.\n   * @param baseName Name of the effect.\n   * @param attributesNamesOrOptions List of attribute names that will be passed to the shader or set of all options to create the effect.\n   * @param uniformsNamesOrEngine List of uniform variable names that will be passed to the shader or the engine that will be used to render effect.\n   * @param samplers List of sampler variables that will be passed to the shader.\n   * @param engine Engine to be used to render the effect\n   * @param defines Define statements to be added to the shader.\n   * @param fallbacks Possible fallbacks for this effect to improve performance when needed.\n   * @param onCompiled Callback that will be called when the shader is compiled.\n   * @param onError Callback that will be called if an error occurs during shader compilation.\n   * @param indexParameters Parameters to be used with Babylons include syntax to iterate over an array (eg. {lights: 10})\n   * @param key Effect Key identifying uniquely compiled shader variants\n   * @param shaderLanguage the language the shader is written in (default: GLSL)\n   */\n\n\n  constructor(baseName, attributesNamesOrOptions, uniformsNamesOrEngine, samplers = null, engine, defines = null, fallbacks = null, onCompiled = null, onError = null, indexParameters, key = \"\", shaderLanguage = _shaderLanguage.ShaderLanguage.GLSL) {\n    var _a, _b, _c;\n    /**\n     * Name of the effect.\n     */\n\n\n    this.name = null;\n    /**\n     * String container all the define statements that should be set on the shader.\n     */\n\n    this.defines = \"\";\n    /**\n     * Callback that will be called when the shader is compiled.\n     */\n\n    this.onCompiled = null;\n    /**\n     * Callback that will be called if an error occurs during shader compilation.\n     */\n\n    this.onError = null;\n    /**\n     * Callback that will be called when effect is bound.\n     */\n\n    this.onBind = null;\n    /**\n     * Unique ID of the effect.\n     */\n\n    this.uniqueId = 0;\n    /**\n     * Observable that will be called when the shader is compiled.\n     * It is recommended to use executeWhenCompile() or to make sure that scene.isReady() is called to get this observable raised.\n     */\n\n    this.onCompileObservable = new _observable.Observable();\n    /**\n     * Observable that will be called if an error occurs during shader compilation.\n     */\n\n    this.onErrorObservable = new _observable.Observable();\n    /** @internal */\n\n    this._onBindObservable = null;\n    /**\n     * @internal\n     * Specifies if the effect was previously ready\n     */\n\n    this._wasPreviouslyReady = false;\n    /**\n     * @internal\n     * Forces the code from bindForSubMesh to be fully run the next time it is called\n     * It is used in frozen mode to make sure the effect is properly rebound when a new effect is created\n     */\n\n    this._forceRebindOnNextCall = false;\n    /**\n     * @internal\n     * Specifies if the effect was previously using instances\n     */\n\n    this._wasPreviouslyUsingInstances = null;\n    this._isDisposed = false;\n    /** @internal */\n\n    this._bonesComputationForcedToCPU = false;\n    /** @internal */\n\n    this._uniformBuffersNames = {};\n    /** @internal */\n\n    this._multiTarget = false;\n    this._samplers = {};\n    this._isReady = false;\n    this._compilationError = \"\";\n    this._allFallbacksProcessed = false;\n    this._uniforms = {};\n    /**\n     * Key for the effect.\n     * @internal\n     */\n\n    this._key = \"\";\n    this._fallbacks = null;\n    this._vertexSourceCodeOverride = \"\";\n    this._fragmentSourceCodeOverride = \"\";\n    this._transformFeedbackVaryings = null;\n    /**\n     * Compiled shader to webGL program.\n     * @internal\n     */\n\n    this._pipelineContext = null;\n    /** @internal */\n\n    this._vertexSourceCode = \"\";\n    /** @internal */\n\n    this._fragmentSourceCode = \"\";\n    /** @internal */\n\n    this._vertexSourceCodeBeforeMigration = \"\";\n    /** @internal */\n\n    this._fragmentSourceCodeBeforeMigration = \"\";\n    /** @internal */\n\n    this._rawVertexSourceCode = \"\";\n    /** @internal */\n\n    this._rawFragmentSourceCode = \"\";\n    this.name = baseName;\n    this._key = key;\n    let processCodeAfterIncludes = undefined;\n    let processFinalCode = null;\n\n    if (attributesNamesOrOptions.attributes) {\n      const options = attributesNamesOrOptions;\n      this._engine = uniformsNamesOrEngine;\n      this._attributesNames = options.attributes;\n      this._uniformsNames = options.uniformsNames.concat(options.samplers);\n      this._samplerList = options.samplers.slice();\n      this.defines = options.defines;\n      this.onError = options.onError;\n      this.onCompiled = options.onCompiled;\n      this._fallbacks = options.fallbacks;\n      this._indexParameters = options.indexParameters;\n      this._transformFeedbackVaryings = options.transformFeedbackVaryings || null;\n      this._multiTarget = !!options.multiTarget;\n      this._shaderLanguage = (_a = options.shaderLanguage) !== null && _a !== void 0 ? _a : _shaderLanguage.ShaderLanguage.GLSL;\n\n      if (options.uniformBuffersNames) {\n        this._uniformBuffersNamesList = options.uniformBuffersNames.slice();\n\n        for (let i = 0; i < options.uniformBuffersNames.length; i++) {\n          this._uniformBuffersNames[options.uniformBuffersNames[i]] = i;\n        }\n      }\n\n      processFinalCode = (_b = options.processFinalCode) !== null && _b !== void 0 ? _b : null;\n      processCodeAfterIncludes = (_c = options.processCodeAfterIncludes) !== null && _c !== void 0 ? _c : undefined;\n    } else {\n      this._engine = engine;\n      this.defines = defines == null ? \"\" : defines;\n      this._uniformsNames = uniformsNamesOrEngine.concat(samplers);\n      this._samplerList = samplers ? samplers.slice() : [];\n      this._attributesNames = attributesNamesOrOptions;\n      this._uniformBuffersNamesList = [];\n      this._shaderLanguage = shaderLanguage;\n      this.onError = onError;\n      this.onCompiled = onCompiled;\n      this._indexParameters = indexParameters;\n      this._fallbacks = fallbacks;\n    }\n\n    this._attributeLocationByName = {};\n    this.uniqueId = Effect._UniqueIdSeed++;\n    let vertexSource;\n    let fragmentSource;\n    const hostDocument = (0, _domManagement.IsWindowObjectExist)() ? this._engine.getHostDocument() : null;\n\n    if (baseName.vertexSource) {\n      vertexSource = \"source:\" + baseName.vertexSource;\n    } else if (baseName.vertexElement) {\n      vertexSource = hostDocument ? hostDocument.getElementById(baseName.vertexElement) : null;\n\n      if (!vertexSource) {\n        vertexSource = baseName.vertexElement;\n      }\n    } else {\n      vertexSource = baseName.vertex || baseName;\n    }\n\n    if (baseName.fragmentSource) {\n      fragmentSource = \"source:\" + baseName.fragmentSource;\n    } else if (baseName.fragmentElement) {\n      fragmentSource = hostDocument ? hostDocument.getElementById(baseName.fragmentElement) : null;\n\n      if (!fragmentSource) {\n        fragmentSource = baseName.fragmentElement;\n      }\n    } else {\n      fragmentSource = baseName.fragment || baseName;\n    }\n\n    this._processingContext = this._engine._getShaderProcessingContext(this._shaderLanguage);\n    let processorOptions = {\n      defines: this.defines.split(\"\\n\"),\n      indexParameters: this._indexParameters,\n      isFragment: false,\n      shouldUseHighPrecisionShader: this._engine._shouldUseHighPrecisionShader,\n      processor: this._engine._getShaderProcessor(this._shaderLanguage),\n      supportsUniformBuffers: this._engine.supportsUniformBuffers,\n      shadersRepository: _shaderStore.ShaderStore.GetShadersRepository(this._shaderLanguage),\n      includesShadersStore: _shaderStore.ShaderStore.GetIncludesShadersStore(this._shaderLanguage),\n      version: (this._engine.version * 100).toString(),\n      platformName: this._engine.shaderPlatformName,\n      processingContext: this._processingContext,\n      isNDCHalfZRange: this._engine.isNDCHalfZRange,\n      useReverseDepthBuffer: this._engine.useReverseDepthBuffer,\n      processCodeAfterIncludes\n    };\n    const shaderCodes = [undefined, undefined];\n\n    const shadersLoaded = () => {\n      if (shaderCodes[0] && shaderCodes[1]) {\n        processorOptions.isFragment = true;\n        const [migratedVertexCode, fragmentCode] = shaderCodes;\n\n        _shaderProcessor.ShaderProcessor.Process(fragmentCode, processorOptions, (migratedFragmentCode, codeBeforeMigration) => {\n          this._fragmentSourceCodeBeforeMigration = codeBeforeMigration;\n\n          if (processFinalCode) {\n            migratedFragmentCode = processFinalCode(\"fragment\", migratedFragmentCode);\n          }\n\n          const finalShaders = _shaderProcessor.ShaderProcessor.Finalize(migratedVertexCode, migratedFragmentCode, processorOptions);\n\n          processorOptions = null;\n\n          this._useFinalCode(finalShaders.vertexCode, finalShaders.fragmentCode, baseName);\n        }, this._engine);\n      }\n    };\n\n    this._loadShader(vertexSource, \"Vertex\", \"\", vertexCode => {\n      _shaderProcessor.ShaderProcessor.Initialize(processorOptions);\n\n      _shaderProcessor.ShaderProcessor.Process(vertexCode, processorOptions, (migratedVertexCode, codeBeforeMigration) => {\n        this._rawVertexSourceCode = vertexCode;\n        this._vertexSourceCodeBeforeMigration = codeBeforeMigration;\n\n        if (processFinalCode) {\n          migratedVertexCode = processFinalCode(\"vertex\", migratedVertexCode);\n        }\n\n        shaderCodes[0] = migratedVertexCode;\n        shadersLoaded();\n      }, this._engine);\n    });\n\n    this._loadShader(fragmentSource, \"Fragment\", \"Pixel\", fragmentCode => {\n      this._rawFragmentSourceCode = fragmentCode;\n      shaderCodes[1] = fragmentCode;\n      shadersLoaded();\n    });\n  }\n\n  _useFinalCode(migratedVertexCode, migratedFragmentCode, baseName) {\n    if (baseName) {\n      const vertex = baseName.vertexElement || baseName.vertex || baseName.spectorName || baseName;\n      const fragment = baseName.fragmentElement || baseName.fragment || baseName.spectorName || baseName;\n      this._vertexSourceCode = (this._shaderLanguage === _shaderLanguage.ShaderLanguage.WGSL ? \"//\" : \"\") + \"#define SHADER_NAME vertex:\" + vertex + \"\\n\" + migratedVertexCode;\n      this._fragmentSourceCode = (this._shaderLanguage === _shaderLanguage.ShaderLanguage.WGSL ? \"//\" : \"\") + \"#define SHADER_NAME fragment:\" + fragment + \"\\n\" + migratedFragmentCode;\n    } else {\n      this._vertexSourceCode = migratedVertexCode;\n      this._fragmentSourceCode = migratedFragmentCode;\n    }\n\n    this._prepareEffect();\n  }\n  /**\n   * Unique key for this effect\n   */\n\n\n  get key() {\n    return this._key;\n  }\n  /**\n   * If the effect has been compiled and prepared.\n   * @returns if the effect is compiled and prepared.\n   */\n\n\n  isReady() {\n    try {\n      return this._isReadyInternal();\n    } catch (_a) {\n      return false;\n    }\n  }\n\n  _isReadyInternal() {\n    if (this._isReady) {\n      return true;\n    }\n\n    if (this._pipelineContext) {\n      return this._pipelineContext.isReady;\n    }\n\n    return false;\n  }\n  /**\n   * The engine the effect was initialized with.\n   * @returns the engine.\n   */\n\n\n  getEngine() {\n    return this._engine;\n  }\n  /**\n   * The pipeline context for this effect\n   * @returns the associated pipeline context\n   */\n\n\n  getPipelineContext() {\n    return this._pipelineContext;\n  }\n  /**\n   * The set of names of attribute variables for the shader.\n   * @returns An array of attribute names.\n   */\n\n\n  getAttributesNames() {\n    return this._attributesNames;\n  }\n  /**\n   * Returns the attribute at the given index.\n   * @param index The index of the attribute.\n   * @returns The location of the attribute.\n   */\n\n\n  getAttributeLocation(index) {\n    return this._attributes[index];\n  }\n  /**\n   * Returns the attribute based on the name of the variable.\n   * @param name of the attribute to look up.\n   * @returns the attribute location.\n   */\n\n\n  getAttributeLocationByName(name) {\n    return this._attributeLocationByName[name];\n  }\n  /**\n   * The number of attributes.\n   * @returns the number of attributes.\n   */\n\n\n  getAttributesCount() {\n    return this._attributes.length;\n  }\n  /**\n   * Gets the index of a uniform variable.\n   * @param uniformName of the uniform to look up.\n   * @returns the index.\n   */\n\n\n  getUniformIndex(uniformName) {\n    return this._uniformsNames.indexOf(uniformName);\n  }\n  /**\n   * Returns the attribute based on the name of the variable.\n   * @param uniformName of the uniform to look up.\n   * @returns the location of the uniform.\n   */\n\n\n  getUniform(uniformName) {\n    return this._uniforms[uniformName];\n  }\n  /**\n   * Returns an array of sampler variable names\n   * @returns The array of sampler variable names.\n   */\n\n\n  getSamplers() {\n    return this._samplerList;\n  }\n  /**\n   * Returns an array of uniform variable names\n   * @returns The array of uniform variable names.\n   */\n\n\n  getUniformNames() {\n    return this._uniformsNames;\n  }\n  /**\n   * Returns an array of uniform buffer variable names\n   * @returns The array of uniform buffer variable names.\n   */\n\n\n  getUniformBuffersNames() {\n    return this._uniformBuffersNamesList;\n  }\n  /**\n   * Returns the index parameters used to create the effect\n   * @returns The index parameters object\n   */\n\n\n  getIndexParameters() {\n    return this._indexParameters;\n  }\n  /**\n   * The error from the last compilation.\n   * @returns the error string.\n   */\n\n\n  getCompilationError() {\n    return this._compilationError;\n  }\n  /**\n   * Gets a boolean indicating that all fallbacks were used during compilation\n   * @returns true if all fallbacks were used\n   */\n\n\n  allFallbacksProcessed() {\n    return this._allFallbacksProcessed;\n  }\n  /**\n   * Adds a callback to the onCompiled observable and call the callback immediately if already ready.\n   * @param func The callback to be used.\n   */\n\n\n  executeWhenCompiled(func) {\n    if (this.isReady()) {\n      func(this);\n      return;\n    }\n\n    this.onCompileObservable.add(effect => {\n      func(effect);\n    });\n\n    if (!this._pipelineContext || this._pipelineContext.isAsync) {\n      setTimeout(() => {\n        this._checkIsReady(null);\n      }, 16);\n    }\n  }\n\n  _checkIsReady(previousPipelineContext) {\n    try {\n      if (this._isReadyInternal()) {\n        return;\n      }\n    } catch (e) {\n      this._processCompilationErrors(e, previousPipelineContext);\n\n      return;\n    }\n\n    if (this._isDisposed) {\n      return;\n    }\n\n    setTimeout(() => {\n      this._checkIsReady(previousPipelineContext);\n    }, 16);\n  }\n\n  _loadShader(shader, key, optionalKey, callback) {\n    if (typeof HTMLElement !== \"undefined\") {\n      // DOM element ?\n      if (shader instanceof HTMLElement) {\n        const shaderCode = (0, _domManagement.GetDOMTextContent)(shader);\n        callback(shaderCode);\n        return;\n      }\n    } // Direct source ?\n\n\n    if (shader.substr(0, 7) === \"source:\") {\n      callback(shader.substr(7));\n      return;\n    } // Base64 encoded ?\n\n\n    if (shader.substr(0, 7) === \"base64:\") {\n      const shaderBinary = window.atob(shader.substr(7));\n      callback(shaderBinary);\n      return;\n    }\n\n    const shaderStore = _shaderStore.ShaderStore.GetShadersStore(this._shaderLanguage); // Is in local store ?\n\n\n    if (shaderStore[shader + key + \"Shader\"]) {\n      callback(shaderStore[shader + key + \"Shader\"]);\n      return;\n    }\n\n    if (optionalKey && shaderStore[shader + optionalKey + \"Shader\"]) {\n      callback(shaderStore[shader + optionalKey + \"Shader\"]);\n      return;\n    }\n\n    let shaderUrl;\n\n    if (shader[0] === \".\" || shader[0] === \"/\" || shader.indexOf(\"http\") > -1) {\n      shaderUrl = shader;\n    } else {\n      shaderUrl = _shaderStore.ShaderStore.GetShadersRepository(this._shaderLanguage) + shader;\n    } // Vertex shader\n\n\n    this._engine._loadFile(shaderUrl + \".\" + key.toLowerCase() + \".fx\", callback);\n  }\n  /**\n   * Gets the vertex shader source code of this effect\n   * This is the final source code that will be compiled, after all the processing has been done (pre-processing applied, code injection/replacement, etc)\n   */\n\n\n  get vertexSourceCode() {\n    var _a, _b;\n\n    return this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride ? this._vertexSourceCodeOverride : (_b = (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getVertexShaderCode()) !== null && _b !== void 0 ? _b : this._vertexSourceCode;\n  }\n  /**\n   * Gets the fragment shader source code of this effect\n   * This is the final source code that will be compiled, after all the processing has been done (pre-processing applied, code injection/replacement, etc)\n   */\n\n\n  get fragmentSourceCode() {\n    var _a, _b;\n\n    return this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride ? this._fragmentSourceCodeOverride : (_b = (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getFragmentShaderCode()) !== null && _b !== void 0 ? _b : this._fragmentSourceCode;\n  }\n  /**\n   * Gets the vertex shader source code before migration.\n   * This is the source code after the include directives have been replaced by their contents but before the code is migrated, i.e. before ShaderProcess._ProcessShaderConversion is executed.\n   * This method is, among other things, responsible for parsing #if/#define directives as well as converting GLES2 syntax to GLES3 (in the case of WebGL).\n   */\n\n\n  get vertexSourceCodeBeforeMigration() {\n    return this._vertexSourceCodeBeforeMigration;\n  }\n  /**\n   * Gets the fragment shader source code before migration.\n   * This is the source code after the include directives have been replaced by their contents but before the code is migrated, i.e. before ShaderProcess._ProcessShaderConversion is executed.\n   * This method is, among other things, responsible for parsing #if/#define directives as well as converting GLES2 syntax to GLES3 (in the case of WebGL).\n   */\n\n\n  get fragmentSourceCodeBeforeMigration() {\n    return this._fragmentSourceCodeBeforeMigration;\n  }\n  /**\n   * Gets the vertex shader source code before it has been modified by any processing\n   */\n\n\n  get rawVertexSourceCode() {\n    return this._rawVertexSourceCode;\n  }\n  /**\n   * Gets the fragment shader source code before it has been modified by any processing\n   */\n\n\n  get rawFragmentSourceCode() {\n    return this._rawFragmentSourceCode;\n  }\n  /**\n   * Recompiles the webGL program\n   * @param vertexSourceCode The source code for the vertex shader.\n   * @param fragmentSourceCode The source code for the fragment shader.\n   * @param onCompiled Callback called when completed.\n   * @param onError Callback called on error.\n   * @internal\n   */\n\n\n  _rebuildProgram(vertexSourceCode, fragmentSourceCode, onCompiled, onError) {\n    this._isReady = false;\n    this._vertexSourceCodeOverride = vertexSourceCode;\n    this._fragmentSourceCodeOverride = fragmentSourceCode;\n\n    this.onError = (effect, error) => {\n      if (onError) {\n        onError(error);\n      }\n    };\n\n    this.onCompiled = () => {\n      const scenes = this.getEngine().scenes;\n\n      if (scenes) {\n        for (let i = 0; i < scenes.length; i++) {\n          scenes[i].markAllMaterialsAsDirty(63);\n        }\n      }\n\n      this._pipelineContext._handlesSpectorRebuildCallback(onCompiled);\n    };\n\n    this._fallbacks = null;\n\n    this._prepareEffect();\n  }\n  /**\n   * Prepares the effect\n   * @internal\n   */\n\n\n  _prepareEffect() {\n    const attributesNames = this._attributesNames;\n    const defines = this.defines;\n    const previousPipelineContext = this._pipelineContext;\n    this._isReady = false;\n\n    try {\n      const engine = this._engine;\n      this._pipelineContext = engine.createPipelineContext(this._processingContext);\n      this._pipelineContext._name = this._key;\n\n      const rebuildRebind = this._rebuildProgram.bind(this);\n\n      if (this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride) {\n        engine._preparePipelineContext(this._pipelineContext, this._vertexSourceCodeOverride, this._fragmentSourceCodeOverride, true, this._rawVertexSourceCode, this._rawFragmentSourceCode, rebuildRebind, null, this._transformFeedbackVaryings, this._key);\n      } else {\n        engine._preparePipelineContext(this._pipelineContext, this._vertexSourceCode, this._fragmentSourceCode, false, this._rawVertexSourceCode, this._rawFragmentSourceCode, rebuildRebind, defines, this._transformFeedbackVaryings, this._key);\n      }\n\n      engine._executeWhenRenderingStateIsCompiled(this._pipelineContext, () => {\n        this._attributes = [];\n\n        this._pipelineContext._fillEffectInformation(this, this._uniformBuffersNames, this._uniformsNames, this._uniforms, this._samplerList, this._samplers, attributesNames, this._attributes); // Caches attribute locations.\n\n\n        if (attributesNames) {\n          for (let i = 0; i < attributesNames.length; i++) {\n            const name = attributesNames[i];\n            this._attributeLocationByName[name] = this._attributes[i];\n          }\n        }\n\n        engine.bindSamplers(this);\n        this._compilationError = \"\";\n        this._isReady = true;\n\n        if (this.onCompiled) {\n          this.onCompiled(this);\n        }\n\n        this.onCompileObservable.notifyObservers(this);\n        this.onCompileObservable.clear(); // Unbind mesh reference in fallbacks\n\n        if (this._fallbacks) {\n          this._fallbacks.unBindMesh();\n        }\n\n        if (previousPipelineContext) {\n          this.getEngine()._deletePipelineContext(previousPipelineContext);\n        }\n      });\n\n      if (this._pipelineContext.isAsync) {\n        this._checkIsReady(previousPipelineContext);\n      }\n    } catch (e) {\n      this._processCompilationErrors(e, previousPipelineContext);\n    }\n  }\n\n  _getShaderCodeAndErrorLine(code, error, isFragment) {\n    const regexp = isFragment ? /FRAGMENT SHADER ERROR: 0:(\\d+?):/ : /VERTEX SHADER ERROR: 0:(\\d+?):/;\n    let errorLine = null;\n\n    if (error && code) {\n      const res = error.match(regexp);\n\n      if (res && res.length === 2) {\n        const lineNumber = parseInt(res[1]);\n        const lines = code.split(\"\\n\", -1);\n\n        if (lines.length >= lineNumber) {\n          errorLine = `Offending line [${lineNumber}] in ${isFragment ? \"fragment\" : \"vertex\"} code: ${lines[lineNumber - 1]}`;\n        }\n      }\n    }\n\n    return [code, errorLine];\n  }\n\n  _processCompilationErrors(e, previousPipelineContext = null) {\n    var _a, _b, _c;\n\n    this._compilationError = e.message;\n    const attributesNames = this._attributesNames;\n    const fallbacks = this._fallbacks; // Let's go through fallbacks then\n\n    _logger.Logger.Error(\"Unable to compile effect:\");\n\n    _logger.Logger.Error(\"Uniforms: \" + this._uniformsNames.map(function (uniform) {\n      return \" \" + uniform;\n    }));\n\n    _logger.Logger.Error(\"Attributes: \" + attributesNames.map(function (attribute) {\n      return \" \" + attribute;\n    }));\n\n    _logger.Logger.Error(\"Defines:\\r\\n\" + this.defines);\n\n    if (Effect.LogShaderCodeOnCompilationError) {\n      let lineErrorVertex = null,\n          lineErrorFragment = null,\n          code = null;\n\n      if ((_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getVertexShaderCode()) {\n        [code, lineErrorVertex] = this._getShaderCodeAndErrorLine(this._pipelineContext._getVertexShaderCode(), this._compilationError, false);\n\n        if (code) {\n          _logger.Logger.Error(\"Vertex code:\");\n\n          _logger.Logger.Error(code);\n        }\n      }\n\n      if ((_b = this._pipelineContext) === null || _b === void 0 ? void 0 : _b._getFragmentShaderCode()) {\n        [code, lineErrorFragment] = this._getShaderCodeAndErrorLine((_c = this._pipelineContext) === null || _c === void 0 ? void 0 : _c._getFragmentShaderCode(), this._compilationError, true);\n\n        if (code) {\n          _logger.Logger.Error(\"Fragment code:\");\n\n          _logger.Logger.Error(code);\n        }\n      }\n\n      if (lineErrorVertex) {\n        _logger.Logger.Error(lineErrorVertex);\n      }\n\n      if (lineErrorFragment) {\n        _logger.Logger.Error(lineErrorFragment);\n      }\n    }\n\n    _logger.Logger.Error(\"Error: \" + this._compilationError);\n\n    const notifyErrors = () => {\n      if (this.onError) {\n        this.onError(this, this._compilationError);\n      }\n\n      this.onErrorObservable.notifyObservers(this);\n    }; // In case a previous compilation was successful, we need to restore the previous pipeline context\n\n\n    if (previousPipelineContext) {\n      this._pipelineContext = previousPipelineContext;\n      this._isReady = true;\n      notifyErrors();\n    } // Lets try to compile fallbacks as long as we have some.\n\n\n    if (fallbacks) {\n      this._pipelineContext = null;\n\n      if (fallbacks.hasMoreFallbacks) {\n        this._allFallbacksProcessed = false;\n\n        _logger.Logger.Error(\"Trying next fallback.\");\n\n        this.defines = fallbacks.reduce(this.defines, this);\n\n        this._prepareEffect();\n      } else {\n        // Sorry we did everything we can\n        this._allFallbacksProcessed = true;\n        notifyErrors();\n        this.onErrorObservable.clear(); // Unbind mesh reference in fallbacks\n\n        if (this._fallbacks) {\n          this._fallbacks.unBindMesh();\n        }\n      }\n    } else {\n      this._allFallbacksProcessed = true; // In case of error, without any prior successful compilation, let s notify observers\n\n      if (!previousPipelineContext) {\n        notifyErrors();\n      }\n    }\n  }\n  /**\n   * Checks if the effect is supported. (Must be called after compilation)\n   */\n\n\n  get isSupported() {\n    return this._compilationError === \"\";\n  }\n  /**\n   * Binds a texture to the engine to be used as output of the shader.\n   * @param channel Name of the output variable.\n   * @param texture Texture to bind.\n   * @internal\n   */\n\n\n  _bindTexture(channel, texture) {\n    this._engine._bindTexture(this._samplers[channel], texture, channel);\n  }\n  /**\n   * Sets a texture on the engine to be used in the shader.\n   * @param channel Name of the sampler variable.\n   * @param texture Texture to set.\n   */\n\n\n  setTexture(channel, texture) {\n    this._engine.setTexture(this._samplers[channel], this._uniforms[channel], texture, channel);\n  }\n  /**\n   * Sets a depth stencil texture from a render target on the engine to be used in the shader.\n   * @param channel Name of the sampler variable.\n   * @param texture Texture to set.\n   */\n\n\n  setDepthStencilTexture(channel, texture) {\n    this._engine.setDepthStencilTexture(this._samplers[channel], this._uniforms[channel], texture, channel);\n  }\n  /**\n   * Sets an array of textures on the engine to be used in the shader.\n   * @param channel Name of the variable.\n   * @param textures Textures to set.\n   */\n\n\n  setTextureArray(channel, textures) {\n    const exName = channel + \"Ex\";\n\n    if (this._samplerList.indexOf(exName + \"0\") === -1) {\n      const initialPos = this._samplerList.indexOf(channel);\n\n      for (let index = 1; index < textures.length; index++) {\n        const currentExName = exName + (index - 1).toString();\n\n        this._samplerList.splice(initialPos + index, 0, currentExName);\n      } // Reset every channels\n\n\n      let channelIndex = 0;\n\n      for (const key of this._samplerList) {\n        this._samplers[key] = channelIndex;\n        channelIndex += 1;\n      }\n    }\n\n    this._engine.setTextureArray(this._samplers[channel], this._uniforms[channel], textures, channel);\n  }\n  /**\n   * Sets a texture to be the input of the specified post process. (To use the output, pass in the next post process in the pipeline)\n   * @param channel Name of the sampler variable.\n   * @param postProcess Post process to get the input texture from.\n   */\n\n\n  setTextureFromPostProcess(channel, postProcess) {\n    this._engine.setTextureFromPostProcess(this._samplers[channel], postProcess, channel);\n  }\n  /**\n   * (Warning! setTextureFromPostProcessOutput may be desired instead)\n   * Sets the input texture of the passed in post process to be input of this effect. (To use the output of the passed in post process use setTextureFromPostProcessOutput)\n   * @param channel Name of the sampler variable.\n   * @param postProcess Post process to get the output texture from.\n   */\n\n\n  setTextureFromPostProcessOutput(channel, postProcess) {\n    this._engine.setTextureFromPostProcessOutput(this._samplers[channel], postProcess, channel);\n  }\n  /**\n   * Binds a buffer to a uniform.\n   * @param buffer Buffer to bind.\n   * @param name Name of the uniform variable to bind to.\n   */\n\n\n  bindUniformBuffer(buffer, name) {\n    const bufferName = this._uniformBuffersNames[name];\n\n    if (bufferName === undefined || Effect._BaseCache[bufferName] === buffer && this._engine._features.useUBOBindingCache) {\n      return;\n    }\n\n    Effect._BaseCache[bufferName] = buffer;\n\n    this._engine.bindUniformBufferBase(buffer, bufferName, name);\n  }\n  /**\n   * Binds block to a uniform.\n   * @param blockName Name of the block to bind.\n   * @param index Index to bind.\n   */\n\n\n  bindUniformBlock(blockName, index) {\n    this._engine.bindUniformBlock(this._pipelineContext, blockName, index);\n  }\n  /**\n   * Sets an integer value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value Value to be set.\n   * @returns this effect.\n   */\n\n\n  setInt(uniformName, value) {\n    this._pipelineContext.setInt(uniformName, value);\n\n    return this;\n  }\n  /**\n   * Sets an int2 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int2.\n   * @param y Second int in int2.\n   * @returns this effect.\n   */\n\n\n  setInt2(uniformName, x, y) {\n    this._pipelineContext.setInt2(uniformName, x, y);\n\n    return this;\n  }\n  /**\n   * Sets an int3 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int3.\n   * @param y Second int in int3.\n   * @param z Third int in int3.\n   * @returns this effect.\n   */\n\n\n  setInt3(uniformName, x, y, z) {\n    this._pipelineContext.setInt3(uniformName, x, y, z);\n\n    return this;\n  }\n  /**\n   * Sets an int4 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int4.\n   * @param y Second int in int4.\n   * @param z Third int in int4.\n   * @param w Fourth int in int4.\n   * @returns this effect.\n   */\n\n\n  setInt4(uniformName, x, y, z, w) {\n    this._pipelineContext.setInt4(uniformName, x, y, z, w);\n\n    return this;\n  }\n  /**\n   * Sets an int array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setIntArray(uniformName, array) {\n    this._pipelineContext.setIntArray(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setIntArray2(uniformName, array) {\n    this._pipelineContext.setIntArray2(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setIntArray3(uniformName, array) {\n    this._pipelineContext.setIntArray3(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setIntArray4(uniformName, array) {\n    this._pipelineContext.setIntArray4(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an unsigned integer value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value Value to be set.\n   * @returns this effect.\n   */\n\n\n  setUInt(uniformName, value) {\n    this._pipelineContext.setInt(uniformName, value);\n\n    return this;\n  }\n  /**\n   * Sets an unsigned int2 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First unsigned int in uint2.\n   * @param y Second unsigned int in uint2.\n   * @returns this effect.\n   */\n\n\n  setUInt2(uniformName, x, y) {\n    this._pipelineContext.setInt2(uniformName, x, y);\n\n    return this;\n  }\n  /**\n   * Sets an unsigned int3 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First unsigned int in uint3.\n   * @param y Second unsigned int in uint3.\n   * @param z Third unsigned int in uint3.\n   * @returns this effect.\n   */\n\n\n  setUInt3(uniformName, x, y, z) {\n    this._pipelineContext.setInt3(uniformName, x, y, z);\n\n    return this;\n  }\n  /**\n   * Sets an unsigned int4 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First unsigned int in uint4.\n   * @param y Second unsigned int in uint4.\n   * @param z Third unsigned int in uint4.\n   * @param w Fourth unsigned int in uint4.\n   * @returns this effect.\n   */\n\n\n  setUInt4(uniformName, x, y, z, w) {\n    this._pipelineContext.setInt4(uniformName, x, y, z, w);\n\n    return this;\n  }\n  /**\n   * Sets an unsigned int array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setUIntArray(uniformName, array) {\n    this._pipelineContext.setUIntArray(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an unsigned int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setUIntArray2(uniformName, array) {\n    this._pipelineContext.setUIntArray2(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an unsigned int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setUIntArray3(uniformName, array) {\n    this._pipelineContext.setUIntArray3(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an unsigned int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setUIntArray4(uniformName, array) {\n    this._pipelineContext.setUIntArray4(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an float array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setFloatArray(uniformName, array) {\n    this._pipelineContext.setArray(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an float array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setFloatArray2(uniformName, array) {\n    this._pipelineContext.setArray2(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an float array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setFloatArray3(uniformName, array) {\n    this._pipelineContext.setArray3(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an float array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setFloatArray4(uniformName, array) {\n    this._pipelineContext.setArray4(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setArray(uniformName, array) {\n    this._pipelineContext.setArray(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setArray2(uniformName, array) {\n    this._pipelineContext.setArray2(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setArray3(uniformName, array) {\n    this._pipelineContext.setArray3(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  setArray4(uniformName, array) {\n    this._pipelineContext.setArray4(uniformName, array);\n\n    return this;\n  }\n  /**\n   * Sets matrices on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param matrices matrices to be set.\n   * @returns this effect.\n   */\n\n\n  setMatrices(uniformName, matrices) {\n    this._pipelineContext.setMatrices(uniformName, matrices);\n\n    return this;\n  }\n  /**\n   * Sets matrix on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   * @returns this effect.\n   */\n\n\n  setMatrix(uniformName, matrix) {\n    this._pipelineContext.setMatrix(uniformName, matrix);\n\n    return this;\n  }\n  /**\n   * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   * @returns this effect.\n   */\n\n\n  setMatrix3x3(uniformName, matrix) {\n    // the cast is ok because it is gl.uniformMatrix3fv() which is called at the end, and this function accepts Float32Array and Array<number>\n    this._pipelineContext.setMatrix3x3(uniformName, matrix);\n\n    return this;\n  }\n  /**\n   * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   * @returns this effect.\n   */\n\n\n  setMatrix2x2(uniformName, matrix) {\n    // the cast is ok because it is gl.uniformMatrix3fv() which is called at the end, and this function accepts Float32Array and Array<number>\n    this._pipelineContext.setMatrix2x2(uniformName, matrix);\n\n    return this;\n  }\n  /**\n   * Sets a float on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value value to be set.\n   * @returns this effect.\n   */\n\n\n  setFloat(uniformName, value) {\n    this._pipelineContext.setFloat(uniformName, value);\n\n    return this;\n  }\n  /**\n   * Sets a boolean on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param bool value to be set.\n   * @returns this effect.\n   */\n\n\n  setBool(uniformName, bool) {\n    this._pipelineContext.setInt(uniformName, bool ? 1 : 0);\n\n    return this;\n  }\n  /**\n   * Sets a Vector2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector2 vector2 to be set.\n   * @returns this effect.\n   */\n\n\n  setVector2(uniformName, vector2) {\n    this._pipelineContext.setVector2(uniformName, vector2);\n\n    return this;\n  }\n  /**\n   * Sets a float2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float2.\n   * @param y Second float in float2.\n   * @returns this effect.\n   */\n\n\n  setFloat2(uniformName, x, y) {\n    this._pipelineContext.setFloat2(uniformName, x, y);\n\n    return this;\n  }\n  /**\n   * Sets a Vector3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector3 Value to be set.\n   * @returns this effect.\n   */\n\n\n  setVector3(uniformName, vector3) {\n    this._pipelineContext.setVector3(uniformName, vector3);\n\n    return this;\n  }\n  /**\n   * Sets a float3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float3.\n   * @param y Second float in float3.\n   * @param z Third float in float3.\n   * @returns this effect.\n   */\n\n\n  setFloat3(uniformName, x, y, z) {\n    this._pipelineContext.setFloat3(uniformName, x, y, z);\n\n    return this;\n  }\n  /**\n   * Sets a Vector4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector4 Value to be set.\n   * @returns this effect.\n   */\n\n\n  setVector4(uniformName, vector4) {\n    this._pipelineContext.setVector4(uniformName, vector4);\n\n    return this;\n  }\n  /**\n   * Sets a Quaternion on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param quaternion Value to be set.\n   * @returns this effect.\n   */\n\n\n  setQuaternion(uniformName, quaternion) {\n    this._pipelineContext.setQuaternion(uniformName, quaternion);\n\n    return this;\n  }\n  /**\n   * Sets a float4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float4.\n   * @param y Second float in float4.\n   * @param z Third float in float4.\n   * @param w Fourth float in float4.\n   * @returns this effect.\n   */\n\n\n  setFloat4(uniformName, x, y, z, w) {\n    this._pipelineContext.setFloat4(uniformName, x, y, z, w);\n\n    return this;\n  }\n  /**\n   * Sets a Color3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param color3 Value to be set.\n   * @returns this effect.\n   */\n\n\n  setColor3(uniformName, color3) {\n    this._pipelineContext.setColor3(uniformName, color3);\n\n    return this;\n  }\n  /**\n   * Sets a Color4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param color3 Value to be set.\n   * @param alpha Alpha value to be set.\n   * @returns this effect.\n   */\n\n\n  setColor4(uniformName, color3, alpha) {\n    this._pipelineContext.setColor4(uniformName, color3, alpha);\n\n    return this;\n  }\n  /**\n   * Sets a Color4 on a uniform variable\n   * @param uniformName defines the name of the variable\n   * @param color4 defines the value to be set\n   * @returns this effect.\n   */\n\n\n  setDirectColor4(uniformName, color4) {\n    this._pipelineContext.setDirectColor4(uniformName, color4);\n\n    return this;\n  }\n  /**\n   * Release all associated resources.\n   **/\n\n\n  dispose() {\n    if (this._pipelineContext) {\n      this._pipelineContext.dispose();\n    }\n\n    this._engine._releaseEffect(this);\n\n    this._isDisposed = true;\n  }\n  /**\n   * This function will add a new shader to the shader store\n   * @param name the name of the shader\n   * @param pixelShader optional pixel shader content\n   * @param vertexShader optional vertex shader content\n   * @param shaderLanguage the language the shader is written in (default: GLSL)\n   */\n\n\n  static RegisterShader(name, pixelShader, vertexShader, shaderLanguage = _shaderLanguage.ShaderLanguage.GLSL) {\n    if (pixelShader) {\n      _shaderStore.ShaderStore.GetShadersStore(shaderLanguage)[`${name}PixelShader`] = pixelShader;\n    }\n\n    if (vertexShader) {\n      _shaderStore.ShaderStore.GetShadersStore(shaderLanguage)[`${name}VertexShader`] = vertexShader;\n    }\n  }\n  /**\n   * Resets the cache of effects.\n   */\n\n\n  static ResetCache() {\n    Effect._BaseCache = {};\n  }\n\n}\n/**\n * Enable logging of the shader code when a compilation error occurs\n */\n\n\nexports.Effect = Effect;\nEffect.LogShaderCodeOnCompilationError = true;\nEffect._UniqueIdSeed = 0;\nEffect._BaseCache = {};\n/**\n * Store of each shader (The can be looked up using effect.key)\n */\n\nEffect.ShadersStore = _shaderStore.ShaderStore.ShadersStore;\n/**\n * Store of each included file for a shader (The can be looked up using effect.key)\n */\n\nEffect.IncludesShadersStore = _shaderStore.ShaderStore.IncludesShadersStore;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Effect","_observable","_domManagement","_logger","_shaderProcessor","_shaderStore","_shaderLanguage","ShaderStore","ShadersRepository","repo","_onBindObservable","Observable","constructor","baseName","attributesNamesOrOptions","uniformsNamesOrEngine","samplers","engine","defines","fallbacks","onCompiled","onError","indexParameters","key","shaderLanguage","ShaderLanguage","GLSL","_a","_b","_c","name","onBind","uniqueId","onCompileObservable","onErrorObservable","_forceRebindOnNextCall","_wasPreviouslyReady","_wasPreviouslyUsingInstances","_bonesComputationForcedToCPU","_isDisposed","_uniformBuffersNames","_multiTarget","_samplers","_isReady","_compilationError","_allFallbacksProcessed","_uniforms","_key","_fallbacks","_fragmentSourceCodeOverride","_vertexSourceCodeOverride","_pipelineContext","_transformFeedbackVaryings","_rawFragmentSourceCode","_rawVertexSourceCode","_fragmentSourceCodeBeforeMigration","_vertexSourceCodeBeforeMigration","_fragmentSourceCode","_vertexSourceCode","processCodeAfterIncludes","undefined","processFinalCode","attributes","_engine","_attributesNames","_uniformsNames","uniformsNames","concat","_samplerList","slice","_indexParameters","transformFeedbackVaryings","multiTarget","uniformBuffersNames","_uniformBuffersNamesList","i","length","_attributeLocationByName","_UniqueIdSeed","hostDocument","IsWindowObjectExist","getHostDocument","vertexSource","vertexElement","getElementById","vertex","fragmentSource","fragmentElement","fragment","_processingContext","_getShaderProcessingContext","processorOptions","split","isFragment","shouldUseHighPrecisionShader","_shouldUseHighPrecisionShader","processor","_getShaderProcessor","supportsUniformBuffers","shadersRepository","GetShadersRepository","includesShadersStore","GetIncludesShadersStore","version","toString","platformName","shaderPlatformName","processingContext","isNDCHalfZRange","useReverseDepthBuffer","shaderCodes","shadersLoaded","migratedVertexCode","fragmentCode","ShaderProcessor","Process","migratedFragmentCode","codeBeforeMigration","finalShaders","Finalize","_useFinalCode","vertexCode","_loadShader","Initialize","spectorName","WGSL","_prepareEffect","isReady","_isReadyInternal","getEngine","getPipelineContext","getAttributesNames","getAttributeLocation","index","_attributes","getAttributeLocationByName","getAttributesCount","getUniformIndex","uniformName","indexOf","getUniform","getSamplers","getUniformNames","getUniformBuffersNames","getIndexParameters","getCompilationError","allFallbacksProcessed","executeWhenCompiled","func","add","effect","isAsync","setTimeout","_checkIsReady","previousPipelineContext","e","_processCompilationErrors","shader","optionalKey","callback","HTMLElement","shaderCode","GetDOMTextContent","substr","shaderBinary","window","atob","shaderStore","GetShadersStore","shaderUrl","_loadFile","toLowerCase","_getVertexShaderCode","_getFragmentShaderCode","_rebuildProgram","vertexSourceCode","fragmentSourceCode","error","this.onError","this.onCompiled","scenes","markAllMaterialsAsDirty","_handlesSpectorRebuildCallback","attributesNames","createPipelineContext","_name","rebuildRebind","bind","_preparePipelineContext","_executeWhenRenderingStateIsCompiled","_fillEffectInformation","bindSamplers","notifyObservers","clear","unBindMesh","_deletePipelineContext","_getShaderCodeAndErrorLine","code","regexp","errorLine","res","match","lineNumber","parseInt","lines","message","Logger","Error","map","uniform","attribute","LogShaderCodeOnCompilationError","lineErrorFragment","lineErrorVertex","notifyErrors","hasMoreFallbacks","reduce","_bindTexture","channel","texture","setTexture","setDepthStencilTexture","setTextureArray","textures","exName","initialPos","splice","channelIndex","setTextureFromPostProcess","postProcess","setTextureFromPostProcessOutput","bindUniformBuffer","buffer","bufferName","_BaseCache","_features","useUBOBindingCache","bindUniformBufferBase","bindUniformBlock","blockName","setInt","setInt2","x","y","setInt3","z","setInt4","w","setIntArray","array","setIntArray2","setIntArray3","setIntArray4","setUInt","setUInt2","setUInt3","setUInt4","setUIntArray","setUIntArray2","setUIntArray3","setUIntArray4","setFloatArray","setArray","setFloatArray2","setArray2","setFloatArray3","setArray3","setFloatArray4","setArray4","setMatrices","matrices","setMatrix","matrix","setMatrix3x3","setMatrix2x2","setFloat","setBool","bool","setVector2","vector2","setFloat2","setVector3","vector3","setFloat3","setVector4","vector4","setQuaternion","quaternion","setFloat4","setColor3","color3","setColor4","alpha","setDirectColor4","color4","dispose","_releaseEffect","RegisterShader","pixelShader","vertexShader","ResetCache","ShadersStore","IncludesShadersStore"]
}
