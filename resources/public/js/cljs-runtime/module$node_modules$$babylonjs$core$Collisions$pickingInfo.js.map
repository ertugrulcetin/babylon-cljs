{
"version":3,
"file":"module$node_modules$$babylonjs$core$Collisions$pickingInfo.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Collisions/pickingInfo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Collisions$pickingInfo\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PickingInfo = void 0;\n\nvar _mathVector = require(\"../Maths/math.vector.js\");\n\nvar _buffer = require(\"../Buffers/buffer.js\");\n\n/**\n * Information about the result of picking within a scene\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/picking_collisions\n */\nclass PickingInfo {\n  constructor() {\n    /**\n     * If the pick collided with an object\n     */\n    this.hit = false;\n    /**\n     * Distance away where the pick collided\n     */\n\n    this.distance = 0;\n    /**\n     * The location of pick collision\n     */\n\n    this.pickedPoint = null;\n    /**\n     * The mesh corresponding the pick collision\n     */\n\n    this.pickedMesh = null;\n    /** (See getTextureCoordinates) The barycentric U coordinate that is used when calculating the texture coordinates of the collision.*/\n\n    this.bu = 0;\n    /** (See getTextureCoordinates) The barycentric V coordinate that is used when calculating the texture coordinates of the collision.*/\n\n    this.bv = 0;\n    /** The index of the face on the mesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\n\n    this.faceId = -1;\n    /** The index of the face on the subMesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\n\n    this.subMeshFaceId = -1;\n    /** Id of the submesh that was picked */\n\n    this.subMeshId = 0;\n    /** If a sprite was picked, this will be the sprite the pick collided with */\n\n    this.pickedSprite = null;\n    /** If we are picking a mesh with thin instance, this will give you the picked thin instance */\n\n    this.thinInstanceIndex = -1;\n    /**\n     * The ray that was used to perform the picking.\n     */\n\n    this.ray = null;\n    /**\n     * If a mesh was used to do the picking (eg. 6dof controller) as a \"near interaction\", this will be populated.\n     */\n\n    this.originMesh = null;\n    /**\n     * The aim-space transform of the input used for picking, if it is an XR input source.\n     */\n\n    this.aimTransform = null;\n    /**\n     * The grip-space transform of the input used for picking, if it is an XR input source.\n     * Some XR sources, such as input coming from head mounted displays, do not have this.\n     */\n\n    this.gripTransform = null;\n  }\n  /**\n   * Gets the normal corresponding to the face the pick collided with\n   * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)\n   * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map (default: true)\n   * @returns The normal corresponding to the face the pick collided with\n   * @remarks Note that the returned normal will always point towards the picking ray.\n   */\n\n\n  getNormal(useWorldCoordinates = false, useVerticesNormals = true) {\n    if (!this.pickedMesh || useVerticesNormals && !this.pickedMesh.isVerticesDataPresent(_buffer.VertexBuffer.NormalKind)) {\n      return null;\n    }\n\n    let indices = this.pickedMesh.getIndices();\n\n    if ((indices === null || indices === void 0 ? void 0 : indices.length) === 0) {\n      indices = null;\n    }\n\n    let result;\n    const tmp0 = _mathVector.TmpVectors.Vector3[0];\n    const tmp1 = _mathVector.TmpVectors.Vector3[1];\n    const tmp2 = _mathVector.TmpVectors.Vector3[2];\n\n    if (useVerticesNormals) {\n      const normals = this.pickedMesh.getVerticesData(_buffer.VertexBuffer.NormalKind);\n      let normal0 = indices ? _mathVector.Vector3.FromArrayToRef(normals, indices[this.faceId * 3] * 3, tmp0) : tmp0.copyFromFloats(normals[this.faceId * 3 * 3], normals[this.faceId * 3 * 3 + 1], normals[this.faceId * 3 * 3 + 2]);\n      let normal1 = indices ? _mathVector.Vector3.FromArrayToRef(normals, indices[this.faceId * 3 + 1] * 3, tmp1) : tmp1.copyFromFloats(normals[(this.faceId * 3 + 1) * 3], normals[(this.faceId * 3 + 1) * 3 + 1], normals[(this.faceId * 3 + 1) * 3 + 2]);\n      let normal2 = indices ? _mathVector.Vector3.FromArrayToRef(normals, indices[this.faceId * 3 + 2] * 3, tmp2) : tmp2.copyFromFloats(normals[(this.faceId * 3 + 2) * 3], normals[(this.faceId * 3 + 2) * 3 + 1], normals[(this.faceId * 3 + 2) * 3 + 2]);\n      normal0 = normal0.scale(this.bu);\n      normal1 = normal1.scale(this.bv);\n      normal2 = normal2.scale(1.0 - this.bu - this.bv);\n      result = new _mathVector.Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);\n    } else {\n      const positions = this.pickedMesh.getVerticesData(_buffer.VertexBuffer.PositionKind);\n      const vertex1 = indices ? _mathVector.Vector3.FromArrayToRef(positions, indices[this.faceId * 3] * 3, tmp0) : tmp0.copyFromFloats(positions[this.faceId * 3 * 3], positions[this.faceId * 3 * 3 + 1], positions[this.faceId * 3 * 3 + 2]);\n      const vertex2 = indices ? _mathVector.Vector3.FromArrayToRef(positions, indices[this.faceId * 3 + 1] * 3, tmp1) : tmp1.copyFromFloats(positions[(this.faceId * 3 + 1) * 3], positions[(this.faceId * 3 + 1) * 3 + 1], positions[(this.faceId * 3 + 1) * 3 + 2]);\n      const vertex3 = indices ? _mathVector.Vector3.FromArrayToRef(positions, indices[this.faceId * 3 + 2] * 3, tmp2) : tmp2.copyFromFloats(positions[(this.faceId * 3 + 2) * 3], positions[(this.faceId * 3 + 2) * 3 + 1], positions[(this.faceId * 3 + 2) * 3 + 2]);\n      const p1p2 = vertex1.subtract(vertex2);\n      const p3p2 = vertex3.subtract(vertex2);\n      result = _mathVector.Vector3.Cross(p1p2, p3p2);\n    }\n\n    const transformNormalToWorld = (pickedMesh, n) => {\n      let wm = pickedMesh.getWorldMatrix();\n\n      if (pickedMesh.nonUniformScaling) {\n        _mathVector.TmpVectors.Matrix[0].copyFrom(wm);\n\n        wm = _mathVector.TmpVectors.Matrix[0];\n        wm.setTranslationFromFloats(0, 0, 0);\n        wm.invert();\n        wm.transposeToRef(_mathVector.TmpVectors.Matrix[1]);\n        wm = _mathVector.TmpVectors.Matrix[1];\n      }\n\n      _mathVector.Vector3.TransformNormalToRef(n, wm, n);\n    };\n\n    if (useWorldCoordinates) {\n      transformNormalToWorld(this.pickedMesh, result);\n    }\n\n    if (this.ray) {\n      const normalForDirectionChecking = _mathVector.TmpVectors.Vector3[0].copyFrom(result);\n\n      if (!useWorldCoordinates) {\n        // the normal has not been transformed to world space as part as the normal processing, so we must do it now\n        transformNormalToWorld(this.pickedMesh, normalForDirectionChecking);\n      } // Flip the normal if the picking ray is in the same direction.\n\n\n      if (_mathVector.Vector3.Dot(normalForDirectionChecking, this.ray.direction) > 0) {\n        result.negateInPlace();\n      }\n    }\n\n    result.normalize();\n    return result;\n  }\n  /**\n   * Gets the texture coordinates of where the pick occurred\n   * @param uvSet The UV set to use to calculate the texture coordinates (default: VertexBuffer.UVKind)\n   * @returns The vector containing the coordinates of the texture\n   */\n\n\n  getTextureCoordinates(uvSet = _buffer.VertexBuffer.UVKind) {\n    if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(uvSet)) {\n      return null;\n    }\n\n    const indices = this.pickedMesh.getIndices();\n\n    if (!indices) {\n      return null;\n    }\n\n    const uvs = this.pickedMesh.getVerticesData(uvSet);\n\n    if (!uvs) {\n      return null;\n    }\n\n    let uv0 = _mathVector.Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);\n\n    let uv1 = _mathVector.Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);\n\n    let uv2 = _mathVector.Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);\n\n    uv0 = uv0.scale(this.bu);\n    uv1 = uv1.scale(this.bv);\n    uv2 = uv2.scale(1.0 - this.bu - this.bv);\n    return new _mathVector.Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);\n  }\n\n}\n\nexports.PickingInfo = PickingInfo;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","PickingInfo","_mathVector","_buffer","constructor","hit","distance","pickedMesh","pickedPoint","bv","bu","subMeshFaceId","faceId","subMeshId","pickedSprite","thinInstanceIndex","gripTransform","aimTransform","originMesh","ray","getNormal","useWorldCoordinates","useVerticesNormals","isVerticesDataPresent","VertexBuffer","NormalKind","indices","getIndices","length","tmp0","TmpVectors","Vector3","tmp1","tmp2","normals","getVerticesData","normal0","FromArrayToRef","copyFromFloats","normal1","normal2","scale","result","x","y","z","positions","PositionKind","vertex1","vertex2","vertex3","p1p2","subtract","p3p2","Cross","transformNormalToWorld","n","wm","getWorldMatrix","nonUniformScaling","Matrix","copyFrom","setTranslationFromFloats","invert","transposeToRef","TransformNormalToRef","normalForDirectionChecking","Dot","direction","negateInPlace","normalize","getTextureCoordinates","uvSet","UVKind","uvs","uv0","Vector2","FromArray","uv1","uv2"]
}
