shadow$provide.module$node_modules$$babylonjs$core$DeviceInput$webDeviceInputSystem=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.WebDeviceInputSystem=void 0;var _domManagement=require("module$node_modules$$babylonjs$core$Misc$domManagement"),_tools=require("module$node_modules$$babylonjs$core$Misc$tools"),_eventFactory=require("module$node_modules$$babylonjs$core$DeviceInput$eventFactory"),_deviceEnums=require("module$node_modules$$babylonjs$core$DeviceInput$InputDevices$deviceEnums");
const MAX_POINTER_INPUTS=Object.keys(_deviceEnums.PointerInput).length/2;class WebDeviceInputSystem{constructor(engine,onDeviceConnected,onDeviceDisconnected,onInputChanged){this._inputs=[];this._pointerActive=this._keyboardActive=!1;this._usingSafari=_tools.Tools.IsSafari();this._usingMacOS=(0,_domManagement.IsNavigatorAvailable)()&&/(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);this._keyboardDownEvent=evt=>{};this._keyboardUpEvent=evt=>{};this._keyboardBlurEvent=evt=>{};this._pointerMoveEvent=
evt=>{};this._pointerDownEvent=evt=>{};this._pointerUpEvent=evt=>{};this._pointerCancelEvent=evt=>{};this._pointerWheelEvent=evt=>{};this._pointerBlurEvent=evt=>{};this._eventsAttached=!1;this._mouseId=-1;this._isUsingFirefox=_domManagement.DomManagement.IsNavigatorAvailable()&&navigator.userAgent&&-1!==navigator.userAgent.indexOf("Firefox");this._maxTouchPoints=0;this._pointerInputClearObserver=null;this._gamepadConnectedEvent=evt=>{};this._gamepadDisconnectedEvent=evt=>{};this._eventPrefix=_tools.Tools.GetPointerPrefix(engine);
this._engine=engine;this._onDeviceConnected=onDeviceConnected;this._onDeviceDisconnected=onDeviceDisconnected;this._onInputChanged=onInputChanged;this._mouseId=this._isUsingFirefox?0:1;this._enableEvents();this._usingMacOS&&(this._metaKeys=[]);this._engine._onEngineViewChanged||(this._engine._onEngineViewChanged=()=>{this._enableEvents()})}pollInput(deviceType,deviceSlot,inputIndex){var device=this._inputs[deviceType][deviceSlot];if(!device)throw`Unable to find device ${_deviceEnums.DeviceType[deviceType]}`;
deviceType>=_deviceEnums.DeviceType.DualShock&&deviceType<=_deviceEnums.DeviceType.DualSense&&this._updateDevice(deviceType,deviceSlot,inputIndex);device=device[inputIndex];if(void 0===device)throw`Unable to find input ${inputIndex} for device ${_deviceEnums.DeviceType[deviceType]} in slot ${deviceSlot}`;inputIndex===_deviceEnums.PointerInput.Move&&_tools.Tools.Warn("Unable to provide information for PointerInput.Move.  Try using PointerInput.Horizontal or PointerInput.Vertical for move data.");return device}isDeviceAvailable(deviceType){return void 0!==
this._inputs[deviceType]}dispose(){this._onDeviceConnected=()=>{};this._onDeviceDisconnected=()=>{};this._onInputChanged=()=>{};delete this._engine._onEngineViewChanged;this._elementToAttachTo&&this._disableEvents()}_enableEvents(){const inputElement=null===this||void 0===this?void 0:this._engine.getInputElement();if(inputElement&&(!this._eventsAttached||this._elementToAttachTo!==inputElement)){this._disableEvents();if(this._inputs)for(const inputs of this._inputs)if(inputs)for(const deviceSlotKey in inputs){const device=
inputs[+deviceSlotKey];if(device)for(let inputIndex=0;inputIndex<device.length;inputIndex++)device[inputIndex]=0}this._elementToAttachTo=inputElement;this._elementToAttachTo.tabIndex=-1!==this._elementToAttachTo.tabIndex?this._elementToAttachTo.tabIndex:this._engine.canvasTabIndex;this._handleKeyActions();this._handlePointerActions();this._handleGamepadActions();this._eventsAttached=!0;this._checkForConnectedDevices()}}_disableEvents(){this._elementToAttachTo&&(this._elementToAttachTo.removeEventListener("blur",
this._keyboardBlurEvent),this._elementToAttachTo.removeEventListener("blur",this._pointerBlurEvent),this._elementToAttachTo.removeEventListener("keydown",this._keyboardDownEvent),this._elementToAttachTo.removeEventListener("keyup",this._keyboardUpEvent),this._elementToAttachTo.removeEventListener(this._eventPrefix+"move",this._pointerMoveEvent),this._elementToAttachTo.removeEventListener(this._eventPrefix+"down",this._pointerDownEvent),this._elementToAttachTo.removeEventListener(this._eventPrefix+
"up",this._pointerUpEvent),this._elementToAttachTo.removeEventListener(this._eventPrefix+"cancel",this._pointerCancelEvent),this._elementToAttachTo.removeEventListener(this._wheelEventName,this._pointerWheelEvent),window.removeEventListener("gamepadconnected",this._gamepadConnectedEvent),window.removeEventListener("gamepaddisconnected",this._gamepadDisconnectedEvent));this._pointerInputClearObserver&&this._engine.onEndFrameObservable.remove(this._pointerInputClearObserver);this._eventsAttached=!1}_checkForConnectedDevices(){if(navigator.getGamepads){const gamepads=
navigator.getGamepads();for(const gamepad of gamepads)gamepad&&this._addGamePad(gamepad)}"function"===typeof matchMedia&&matchMedia("(pointer:fine)").matches&&this._addPointerDevice(_deviceEnums.DeviceType.Mouse,0,0,0)}_addGamePad(gamepad){const deviceType=this._getGamepadDeviceType(gamepad.id),deviceSlot=gamepad.index;this._gamepads=this._gamepads||Array(gamepad.index+1);this._registerDevice(deviceType,deviceSlot,gamepad.buttons.length+gamepad.axes.length);this._gamepads[deviceSlot]=deviceType}_addPointerDevice(deviceType,
deviceSlot,currentX,currentY){this._pointerActive||(this._pointerActive=!0);this._registerDevice(deviceType,deviceSlot,MAX_POINTER_INPUTS);deviceType=this._inputs[deviceType][deviceSlot];deviceType[0]=currentX;deviceType[1]=currentY}_registerDevice(deviceType,deviceSlot,numberOfInputs){if(void 0===deviceSlot)throw`Unable to register device ${_deviceEnums.DeviceType[deviceType]} to undefined slot.`;this._inputs[deviceType]||(this._inputs[deviceType]={});this._inputs[deviceType][deviceSlot]||(numberOfInputs=
Array(numberOfInputs),numberOfInputs.fill(0),this._inputs[deviceType][deviceSlot]=numberOfInputs,this._onDeviceConnected(deviceType,deviceSlot))}_unregisterDevice(deviceType,deviceSlot){this._inputs[deviceType][deviceSlot]&&(delete this._inputs[deviceType][deviceSlot],this._onDeviceDisconnected(deviceType,deviceSlot))}_handleKeyActions(){this._keyboardDownEvent=evt=>{this._keyboardActive||(this._keyboardActive=!0,this._registerDevice(_deviceEnums.DeviceType.Keyboard,0,255));const kbKey=this._inputs[_deviceEnums.DeviceType.Keyboard][0];
kbKey&&(kbKey[evt.keyCode]=1,evt.inputIndex=evt.keyCode,this._usingMacOS&&evt.metaKey&&"Meta"!==evt.key&&(this._metaKeys.includes(evt.keyCode)||this._metaKeys.push(evt.keyCode)),this._onInputChanged(_deviceEnums.DeviceType.Keyboard,0,evt))};this._keyboardUpEvent=evt=>{this._keyboardActive||(this._keyboardActive=!0,this._registerDevice(_deviceEnums.DeviceType.Keyboard,0,255));const kbKey=this._inputs[_deviceEnums.DeviceType.Keyboard][0];if(kbKey){kbKey[evt.keyCode]=0;evt.inputIndex=evt.keyCode;if(this._usingMacOS&&
"Meta"===evt.key&&0<this._metaKeys.length){for(const keyCode of this._metaKeys){const deviceEvent=_eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Keyboard,0,keyCode,0,this,this._elementToAttachTo);kbKey[keyCode]=0;this._onInputChanged(_deviceEnums.DeviceType.Keyboard,0,deviceEvent)}this._metaKeys.splice(0,this._metaKeys.length)}this._onInputChanged(_deviceEnums.DeviceType.Keyboard,0,evt)}};this._keyboardBlurEvent=()=>{if(this._keyboardActive){const kbKey=this._inputs[_deviceEnums.DeviceType.Keyboard][0];
for(let i=0;i<kbKey.length;i++)if(0!==kbKey[i]){kbKey[i]=0;const deviceEvent=_eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Keyboard,0,i,0,this,this._elementToAttachTo);this._onInputChanged(_deviceEnums.DeviceType.Keyboard,0,deviceEvent)}this._usingMacOS&&this._metaKeys.splice(0,this._metaKeys.length)}};this._elementToAttachTo.addEventListener("keydown",this._keyboardDownEvent);this._elementToAttachTo.addEventListener("keyup",this._keyboardUpEvent);this._elementToAttachTo.addEventListener("blur",
this._keyboardBlurEvent)}_handlePointerActions(){this._maxTouchPoints=_domManagement.DomManagement.IsNavigatorAvailable()&&navigator.maxTouchPoints||2;this._activeTouchIds||(this._activeTouchIds=Array(this._maxTouchPoints));for(var i=0;i<this._maxTouchPoints;i++)this._activeTouchIds[i]=-1;this._pointerMoveEvent=evt=>{const deviceType=this._getPointerType(evt),deviceSlot=deviceType===_deviceEnums.DeviceType.Mouse?0:this._activeTouchIds.indexOf(evt.pointerId);this._inputs[deviceType]||(this._inputs[deviceType]=
{});this._inputs[deviceType][deviceSlot]||this._addPointerDevice(deviceType,deviceSlot,evt.clientX,evt.clientY);const pointer=this._inputs[deviceType][deviceSlot];pointer&&(evt.inputIndex=_deviceEnums.PointerInput.Move,pointer[_deviceEnums.PointerInput.Horizontal]=evt.clientX,pointer[_deviceEnums.PointerInput.Vertical]=evt.clientY,void 0===evt.pointerId&&(evt.pointerId=this._mouseId),this._onInputChanged(deviceType,deviceSlot,evt),this._usingSafari||-1===evt.button||(evt.inputIndex=evt.button+2,pointer[evt.button+
2]=pointer[evt.button+2]?0:1,this._onInputChanged(deviceType,deviceSlot,evt)))};this._pointerDownEvent=evt=>{const deviceType=this._getPointerType(evt);let deviceSlot=deviceType===_deviceEnums.DeviceType.Mouse?0:evt.pointerId;if(deviceType===_deviceEnums.DeviceType.Touch){var idx=this._activeTouchIds.indexOf(-1);if(0<=idx)deviceSlot=idx,this._activeTouchIds[idx]=evt.pointerId;else{_tools.Tools.Warn(`Max number of touches exceeded.  Ignoring touches in excess of ${this._maxTouchPoints}`);return}}this._inputs[deviceType]||
(this._inputs[deviceType]={});this._inputs[deviceType][deviceSlot]?deviceType===_deviceEnums.DeviceType.Touch&&this._onDeviceConnected(deviceType,deviceSlot):this._addPointerDevice(deviceType,deviceSlot,evt.clientX,evt.clientY);if(idx=this._inputs[deviceType][deviceSlot]){const previousHorizontal=idx[_deviceEnums.PointerInput.Horizontal],previousVertical=idx[_deviceEnums.PointerInput.Vertical];if(deviceType===_deviceEnums.DeviceType.Mouse){if(void 0===evt.pointerId&&(evt.pointerId=this._mouseId),
!document.pointerLockElement)try{this._elementToAttachTo.setPointerCapture(this._mouseId)}catch(e){}}else if(evt.pointerId&&!document.pointerLockElement)try{this._elementToAttachTo.setPointerCapture(evt.pointerId)}catch(e){}idx[_deviceEnums.PointerInput.Horizontal]=evt.clientX;idx[_deviceEnums.PointerInput.Vertical]=evt.clientY;idx[evt.button+2]=1;evt.inputIndex=evt.button+2;this._onInputChanged(deviceType,deviceSlot,evt);if(previousHorizontal!==evt.clientX||previousVertical!==evt.clientY)evt.inputIndex=
_deviceEnums.PointerInput.Move,this._onInputChanged(deviceType,deviceSlot,evt)}};this._pointerUpEvent=evt=>{var _a,_b,_c,_d,_e;const deviceType=this._getPointerType(evt),deviceSlot=deviceType===_deviceEnums.DeviceType.Mouse?0:this._activeTouchIds.indexOf(evt.pointerId);if(deviceType===_deviceEnums.DeviceType.Touch){if(-1===deviceSlot)return;this._activeTouchIds[deviceSlot]=-1}const pointer=null===(_a=this._inputs[deviceType])||void 0===_a?void 0:_a[deviceSlot];if(pointer&&0!==pointer[evt.button+2]){_a=
pointer[_deviceEnums.PointerInput.Horizontal];const previousVertical=pointer[_deviceEnums.PointerInput.Vertical];pointer[_deviceEnums.PointerInput.Horizontal]=evt.clientX;pointer[_deviceEnums.PointerInput.Vertical]=evt.clientY;pointer[evt.button+2]=0;void 0===evt.pointerId&&(evt.pointerId=this._mouseId);if(_a!==evt.clientX||previousVertical!==evt.clientY)evt.inputIndex=_deviceEnums.PointerInput.Move,this._onInputChanged(deviceType,deviceSlot,evt);evt.inputIndex=evt.button+2;deviceType===_deviceEnums.DeviceType.Mouse&&
0<=this._mouseId&&(null===(_c=(_b=this._elementToAttachTo).hasPointerCapture)||void 0===_c?0:_c.call(_b,this._mouseId))?this._elementToAttachTo.releasePointerCapture(this._mouseId):evt.pointerId&&(null===(_e=(_d=this._elementToAttachTo).hasPointerCapture)||void 0===_e?0:_e.call(_d,evt.pointerId))&&this._elementToAttachTo.releasePointerCapture(evt.pointerId);this._onInputChanged(deviceType,deviceSlot,evt);deviceType===_deviceEnums.DeviceType.Touch&&this._onDeviceDisconnected(deviceType,deviceSlot)}};
this._pointerCancelEvent=evt=>{var _a,_b,_c,_d;if("mouse"===evt.pointerType)for(evt=this._inputs[_deviceEnums.DeviceType.Mouse][0],0<=this._mouseId&&(null===(_b=(_a=this._elementToAttachTo).hasPointerCapture)||void 0===_b?0:_b.call(_a,this._mouseId))&&this._elementToAttachTo.releasePointerCapture(this._mouseId),_a=_deviceEnums.PointerInput.LeftClick;_a<=_deviceEnums.PointerInput.BrowserForward;_a++)1===evt[_a]&&(evt[_a]=0,_b=_eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Mouse,
0,_a,0,this,this._elementToAttachTo),this._onInputChanged(_deviceEnums.DeviceType.Mouse,0,_b));else _a=this._activeTouchIds.indexOf(evt.pointerId),(null===(_d=(_c=this._elementToAttachTo).hasPointerCapture)||void 0===_d?0:_d.call(_c,evt.pointerId))&&this._elementToAttachTo.releasePointerCapture(evt.pointerId),this._inputs[_deviceEnums.DeviceType.Touch][_a][_deviceEnums.PointerInput.LeftClick]=0,evt=_eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Touch,_a,_deviceEnums.PointerInput.LeftClick,
0,this,this._elementToAttachTo,evt.pointerId),this._onInputChanged(_deviceEnums.DeviceType.Touch,_a,evt),this._activeTouchIds[_a]=-1,this._onDeviceDisconnected(_deviceEnums.DeviceType.Touch,_a)};this._wheelEventName="onwheel"in document.createElement("div")?"wheel":void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll";let passiveSupported=!1;i=function(){};try{const options=Object.defineProperty({},"passive",{get:function(){passiveSupported=!0}});this._elementToAttachTo.addEventListener("test",
i,options);this._elementToAttachTo.removeEventListener("test",i,options)}catch(e){}this._pointerBlurEvent=()=>{var _a,_b,_c,_d,_e;if(this.isDeviceAvailable(_deviceEnums.DeviceType.Mouse)){var pointer=this._inputs[_deviceEnums.DeviceType.Mouse][0];0<=this._mouseId&&(null===(_b=(_a=this._elementToAttachTo).hasPointerCapture)||void 0===_b?0:_b.call(_a,this._mouseId))&&this._elementToAttachTo.releasePointerCapture(this._mouseId);for(_a=_deviceEnums.PointerInput.LeftClick;_a<=_deviceEnums.PointerInput.BrowserForward;_a++)1===
pointer[_a]&&(pointer[_a]=0,_b=_eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Mouse,0,_a,0,this,this._elementToAttachTo),this._onInputChanged(_deviceEnums.DeviceType.Mouse,0,_b))}if(this.isDeviceAvailable(_deviceEnums.DeviceType.Touch))for(pointer=this._inputs[_deviceEnums.DeviceType.Touch],_a=0;_a<this._activeTouchIds.length;_a++)_b=this._activeTouchIds[_a],(null===(_d=(_c=this._elementToAttachTo).hasPointerCapture)||void 0===_d?0:_d.call(_c,_b))&&this._elementToAttachTo.releasePointerCapture(_b),
-1!==_b&&1===(null===(_e=pointer[_a])||void 0===_e?void 0:_e[_deviceEnums.PointerInput.LeftClick])&&(pointer[_a][_deviceEnums.PointerInput.LeftClick]=0,_b=_eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Touch,_a,_deviceEnums.PointerInput.LeftClick,0,this,this._elementToAttachTo,_b),this._onInputChanged(_deviceEnums.DeviceType.Touch,_a,_b),this._activeTouchIds[_a]=-1,this._onDeviceDisconnected(_deviceEnums.DeviceType.Touch,_a))};this._pointerWheelEvent=evt=>{const deviceType=
_deviceEnums.DeviceType.Mouse;this._inputs[deviceType]||(this._inputs[deviceType]=[]);this._inputs[deviceType][0]||(this._pointerActive=!0,this._registerDevice(deviceType,0,MAX_POINTER_INPUTS));const pointer=this._inputs[deviceType][0];pointer&&(pointer[_deviceEnums.PointerInput.MouseWheelX]=evt.deltaX||0,pointer[_deviceEnums.PointerInput.MouseWheelY]=evt.deltaY||evt.wheelDelta||0,pointer[_deviceEnums.PointerInput.MouseWheelZ]=evt.deltaZ||0,void 0===evt.pointerId&&(evt.pointerId=this._mouseId),0!==
pointer[_deviceEnums.PointerInput.MouseWheelX]&&(evt.inputIndex=_deviceEnums.PointerInput.MouseWheelX,this._onInputChanged(deviceType,0,evt)),0!==pointer[_deviceEnums.PointerInput.MouseWheelY]&&(evt.inputIndex=_deviceEnums.PointerInput.MouseWheelY,this._onInputChanged(deviceType,0,evt)),0!==pointer[_deviceEnums.PointerInput.MouseWheelZ]&&(evt.inputIndex=_deviceEnums.PointerInput.MouseWheelZ,this._onInputChanged(deviceType,0,evt)))};this._elementToAttachTo.addEventListener(this._eventPrefix+"move",
this._pointerMoveEvent);this._elementToAttachTo.addEventListener(this._eventPrefix+"down",this._pointerDownEvent);this._elementToAttachTo.addEventListener(this._eventPrefix+"up",this._pointerUpEvent);this._elementToAttachTo.addEventListener(this._eventPrefix+"cancel",this._pointerCancelEvent);this._elementToAttachTo.addEventListener("blur",this._pointerBlurEvent);this._elementToAttachTo.addEventListener(this._wheelEventName,this._pointerWheelEvent,passiveSupported?{passive:!1}:!1);this._pointerInputClearObserver=
this._engine.onEndFrameObservable.add(()=>{if(this.isDeviceAvailable(_deviceEnums.DeviceType.Mouse)){const pointer=this._inputs[_deviceEnums.DeviceType.Mouse][0];pointer[_deviceEnums.PointerInput.MouseWheelX]=0;pointer[_deviceEnums.PointerInput.MouseWheelY]=0;pointer[_deviceEnums.PointerInput.MouseWheelZ]=0}})}_handleGamepadActions(){this._gamepadConnectedEvent=evt=>{this._addGamePad(evt.gamepad)};this._gamepadDisconnectedEvent=evt=>{if(this._gamepads){const deviceType=this._getGamepadDeviceType(evt.gamepad.id);
evt=evt.gamepad.index;this._unregisterDevice(deviceType,evt);delete this._gamepads[evt]}};window.addEventListener("gamepadconnected",this._gamepadConnectedEvent);window.addEventListener("gamepaddisconnected",this._gamepadDisconnectedEvent)}_updateDevice(deviceType,deviceSlot,inputIndex){const gp=navigator.getGamepads()[deviceSlot];gp&&deviceType===this._gamepads[deviceSlot]&&(this._inputs[deviceType][deviceSlot][inputIndex]=inputIndex>=gp.buttons.length?gp.axes[inputIndex-gp.buttons.length].valueOf():
gp.buttons[inputIndex].value)}_getGamepadDeviceType(deviceName){return-1!==deviceName.indexOf("054c")?-1!==deviceName.indexOf("0ce6")?_deviceEnums.DeviceType.DualSense:_deviceEnums.DeviceType.DualShock:-1!==deviceName.indexOf("Xbox One")||-1!==deviceName.search("Xbox 360")||-1!==deviceName.search("xinput")?_deviceEnums.DeviceType.Xbox:-1!==deviceName.indexOf("057e")?_deviceEnums.DeviceType.Switch:_deviceEnums.DeviceType.Generic}_getPointerType(evt){let deviceType=_deviceEnums.DeviceType.Mouse;if("touch"===
evt.pointerType||"pen"===evt.pointerType||evt.touches)deviceType=_deviceEnums.DeviceType.Touch;return deviceType}}exports.WebDeviceInputSystem=WebDeviceInputSystem}
//# sourceMappingURL=module$node_modules$$babylonjs$core$DeviceInput$webDeviceInputSystem.js.map
