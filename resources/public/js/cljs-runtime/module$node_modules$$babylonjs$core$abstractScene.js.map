{
"version":3,
"file":"module$node_modules$$babylonjs$core$abstractScene.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/abstractScene.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$abstractScene\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractScene = void 0;\n\n/**\n * Base class of the scene acting as a container for the different elements composing a scene.\n * This class is dynamically extended by the different components of the scene increasing\n * flexibility and reducing coupling\n */\nclass AbstractScene {\n  constructor() {\n    /**\n     * Gets the list of root nodes (ie. nodes with no parent)\n     */\n    this.rootNodes = new Array();\n    /** All of the cameras added to this scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\n     */\n\n    this.cameras = new Array();\n    /**\n     * All of the lights added to this scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n     */\n\n    this.lights = new Array();\n    /**\n     * All of the (abstract) meshes added to this scene\n     */\n\n    this.meshes = new Array();\n    /**\n     * The list of skeletons added to the scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\n     */\n\n    this.skeletons = new Array();\n    /**\n     * All of the particle systems added to this scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro\n     */\n\n    this.particleSystems = new Array();\n    /**\n     * Gets a list of Animations associated with the scene\n     */\n\n    this.animations = [];\n    /**\n     * All of the animation groups added to this scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/groupAnimations\n     */\n\n    this.animationGroups = new Array();\n    /**\n     * All of the multi-materials added to this scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\n     */\n\n    this.multiMaterials = new Array();\n    /**\n     * All of the materials added to this scene\n     * In the context of a Scene, it is not supposed to be modified manually.\n     * Any addition or removal should be done using the addMaterial and removeMaterial Scene methods.\n     * Note also that the order of the Material within the array is not significant and might change.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\n     */\n\n    this.materials = new Array();\n    /**\n     * The list of morph target managers added to the scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph\n     */\n\n    this.morphTargetManagers = new Array();\n    /**\n     * The list of geometries used in the scene.\n     */\n\n    this.geometries = new Array();\n    /**\n     * All of the transform nodes added to this scene\n     * In the context of a Scene, it is not supposed to be modified manually.\n     * Any addition or removal should be done using the addTransformNode and removeTransformNode Scene methods.\n     * Note also that the order of the TransformNode within the array is not significant and might change.\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node\n     */\n\n    this.transformNodes = new Array();\n    /**\n     * ActionManagers available on the scene.\n     * @deprecated\n     */\n\n    this.actionManagers = new Array();\n    /**\n     * Textures to keep.\n     */\n\n    this.textures = new Array();\n    /** @internal */\n\n    this._environmentTexture = null;\n    /**\n     * The list of postprocesses added to the scene\n     */\n\n    this.postProcesses = new Array();\n  }\n  /**\n   * Adds a parser in the list of available ones\n   * @param name Defines the name of the parser\n   * @param parser Defines the parser to add\n   */\n\n\n  static AddParser(name, parser) {\n    this._BabylonFileParsers[name] = parser;\n  }\n  /**\n   * Gets a general parser from the list of available ones\n   * @param name Defines the name of the parser\n   * @returns the requested parser or null\n   */\n\n\n  static GetParser(name) {\n    if (this._BabylonFileParsers[name]) {\n      return this._BabylonFileParsers[name];\n    }\n\n    return null;\n  }\n  /**\n   * Adds n individual parser in the list of available ones\n   * @param name Defines the name of the parser\n   * @param parser Defines the parser to add\n   */\n\n\n  static AddIndividualParser(name, parser) {\n    this._IndividualBabylonFileParsers[name] = parser;\n  }\n  /**\n   * Gets an individual parser from the list of available ones\n   * @param name Defines the name of the parser\n   * @returns the requested parser or null\n   */\n\n\n  static GetIndividualParser(name) {\n    if (this._IndividualBabylonFileParsers[name]) {\n      return this._IndividualBabylonFileParsers[name];\n    }\n\n    return null;\n  }\n  /**\n   * Parser json data and populate both a scene and its associated container object\n   * @param jsonData Defines the data to parse\n   * @param scene Defines the scene to parse the data for\n   * @param container Defines the container attached to the parsing sequence\n   * @param rootUrl Defines the root url of the data\n   */\n\n\n  static Parse(jsonData, scene, container, rootUrl) {\n    for (const parserName in this._BabylonFileParsers) {\n      if (Object.prototype.hasOwnProperty.call(this._BabylonFileParsers, parserName)) {\n        this._BabylonFileParsers[parserName](jsonData, scene, container, rootUrl);\n      }\n    }\n  }\n  /**\n   * Texture used in all pbr material as the reflection texture.\n   * As in the majority of the scene they are the same (exception for multi room and so on),\n   * this is easier to reference from here than from all the materials.\n   */\n\n\n  get environmentTexture() {\n    return this._environmentTexture;\n  }\n\n  set environmentTexture(value) {\n    this._environmentTexture = value;\n  }\n  /**\n   * @returns all meshes, lights, cameras, transformNodes and bones\n   */\n\n\n  getNodes() {\n    let nodes = new Array();\n    nodes = nodes.concat(this.meshes);\n    nodes = nodes.concat(this.lights);\n    nodes = nodes.concat(this.cameras);\n    nodes = nodes.concat(this.transformNodes); // dummies\n\n    this.skeletons.forEach(skeleton => nodes = nodes.concat(skeleton.bones));\n    return nodes;\n  }\n\n}\n/**\n * Stores the list of available parsers in the application.\n */\n\n\nexports.AbstractScene = AbstractScene;\nAbstractScene._BabylonFileParsers = {};\n/**\n * Stores the list of available individual parsers in the application.\n */\n\nAbstractScene._IndividualBabylonFileParsers = {};\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","AbstractScene","constructor","rootNodes","cameras","lights","meshes","skeletons","particleSystems","animations","animationGroups","multiMaterials","materials","morphTargetManagers","geometries","transformNodes","actionManagers","textures","_environmentTexture","postProcesses","AddParser","name","parser","_BabylonFileParsers","GetParser","AddIndividualParser","_IndividualBabylonFileParsers","GetIndividualParser","Parse","jsonData","scene","container","rootUrl","parserName","prototype","hasOwnProperty","call","getNodes","nodes","concat","forEach","skeleton","bones"]
}
