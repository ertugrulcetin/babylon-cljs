{
"version":3,
"file":"module$node_modules$$babylonjs$core$scene.js",
"lineCount":146,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/scene.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$scene\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Scene = exports.ScenePerformancePriority = void 0;\n\nvar _tools = require(\"./Misc/tools.js\");\n\nvar _precisionDate = require(\"./Misc/precisionDate.js\");\n\nvar _observable = require(\"./Misc/observable.js\");\n\nvar _smartArray = require(\"./Misc/smartArray.js\");\n\nvar _stringDictionary = require(\"./Misc/stringDictionary.js\");\n\nvar _tags = require(\"./Misc/tags.js\");\n\nvar _mathVector = require(\"./Maths/math.vector.js\");\n\nvar _abstractScene = require(\"./abstractScene.js\");\n\nvar _imageProcessingConfiguration = require(\"./Materials/imageProcessingConfiguration.js\");\n\nvar _uniformBuffer = require(\"./Materials/uniformBuffer.js\");\n\nvar _pickingInfo = require(\"./Collisions/pickingInfo.js\");\n\nvar _actionEvent = require(\"./Actions/actionEvent.js\");\n\nvar _postProcessManager = require(\"./PostProcesses/postProcessManager.js\");\n\nvar _renderingManager = require(\"./Rendering/renderingManager.js\");\n\nvar _sceneComponent = require(\"./sceneComponent.js\");\n\nvar _domManagement = require(\"./Misc/domManagement.js\");\n\nvar _engineStore = require(\"./Engines/engineStore.js\");\n\nvar _devTools = require(\"./Misc/devTools.js\");\n\nvar _sceneInputManager = require(\"./Inputs/scene.inputManager.js\");\n\nvar _perfCounter = require(\"./Misc/perfCounter.js\");\n\nvar _mathColor = require(\"./Maths/math.color.js\");\n\nvar _mathFrustum = require(\"./Maths/math.frustum.js\");\n\nvar _uniqueIdGenerator = require(\"./Misc/uniqueIdGenerator.js\");\n\nvar _fileTools = require(\"./Misc/fileTools.js\");\n\nvar _lightConstants = require(\"./Lights/lightConstants.js\");\n\nvar _arrayTools = require(\"./Misc/arrayTools.js\");\n\nvar _pointerPickingConfiguration = require(\"./Inputs/pointerPickingConfiguration.js\");\n\n/**\n * Define how the scene should favor performance over ease of use\n */\nvar ScenePerformancePriority;\nexports.ScenePerformancePriority = ScenePerformancePriority;\n\n(function (ScenePerformancePriority) {\n  /** Default mode. No change. Performance will be treated as less important than backward compatibility */\n  ScenePerformancePriority[ScenePerformancePriority[\"BackwardCompatible\"] = 0] = \"BackwardCompatible\";\n  /** Some performance options will be turned on trying to strike a balance between perf and ease of use */\n\n  ScenePerformancePriority[ScenePerformancePriority[\"Intermediate\"] = 1] = \"Intermediate\";\n  /** Performance will be top priority */\n\n  ScenePerformancePriority[ScenePerformancePriority[\"Aggressive\"] = 2] = \"Aggressive\";\n})(ScenePerformancePriority || (exports.ScenePerformancePriority = ScenePerformancePriority = {}));\n/**\n * Represents a scene to be rendered by the engine.\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene\n */\n\n\nclass Scene extends _abstractScene.AbstractScene {\n  /**\n   * Factory used to create the default material.\n   * @param scene The scene to create the material for\n   * @returns The default material\n   */\n  static DefaultMaterialFactory(scene) {\n    throw (0, _devTools._WarnImport)(\"StandardMaterial\");\n  }\n  /**\n   * Factory used to create the a collision coordinator.\n   * @returns The collision coordinator\n   */\n\n\n  static CollisionCoordinatorFactory() {\n    throw (0, _devTools._WarnImport)(\"DefaultCollisionCoordinator\");\n  }\n  /**\n   * Texture used in all pbr material as the reflection texture.\n   * As in the majority of the scene they are the same (exception for multi room and so on),\n   * this is easier to reference from here than from all the materials.\n   */\n\n\n  get environmentTexture() {\n    return this._environmentTexture;\n  }\n  /**\n   * Texture used in all pbr material as the reflection texture.\n   * As in the majority of the scene they are the same (exception for multi room and so on),\n   * this is easier to set here than in all the materials.\n   */\n\n\n  set environmentTexture(value) {\n    if (this._environmentTexture === value) {\n      return;\n    }\n\n    this._environmentTexture = value;\n    this.markAllMaterialsAsDirty(1);\n  }\n  /**\n   * Default image processing configuration used either in the rendering\n   * Forward main pass or through the imageProcessingPostProcess if present.\n   * As in the majority of the scene they are the same (exception for multi camera),\n   * this is easier to reference from here than from all the materials and post process.\n   *\n   * No setter as we it is a shared configuration, you can set the values instead.\n   */\n\n\n  get imageProcessingConfiguration() {\n    return this._imageProcessingConfiguration;\n  }\n  /**\n   * Gets or sets a value indicating how to treat performance relatively to ease of use and backward compatibility\n   */\n\n\n  get performancePriority() {\n    return this._performancePriority;\n  }\n\n  set performancePriority(value) {\n    if (value === this._performancePriority) {\n      return;\n    }\n\n    this._performancePriority = value;\n\n    switch (value) {\n      case ScenePerformancePriority.BackwardCompatible:\n        this.skipFrustumClipping = false;\n        this._renderingManager.maintainStateBetweenFrames = false;\n        this.skipPointerMovePicking = false;\n        this.autoClear = true;\n        break;\n\n      case ScenePerformancePriority.Intermediate:\n        this.skipFrustumClipping = false;\n        this._renderingManager.maintainStateBetweenFrames = false;\n        this.skipPointerMovePicking = true;\n        this.autoClear = false;\n        break;\n\n      case ScenePerformancePriority.Aggressive:\n        this.skipFrustumClipping = true;\n        this._renderingManager.maintainStateBetweenFrames = true;\n        this.skipPointerMovePicking = true;\n        this.autoClear = false;\n        break;\n    }\n\n    this.onScenePerformancePriorityChangedObservable.notifyObservers(value);\n  }\n  /**\n   * Gets or sets a boolean indicating if all rendering must be done in wireframe\n   */\n\n\n  set forceWireframe(value) {\n    if (this._forceWireframe === value) {\n      return;\n    }\n\n    this._forceWireframe = value;\n    this.markAllMaterialsAsDirty(16);\n  }\n\n  get forceWireframe() {\n    return this._forceWireframe;\n  }\n  /**\n   * Gets or sets a boolean indicating if we should skip the frustum clipping part of the active meshes selection\n   */\n\n\n  set skipFrustumClipping(value) {\n    if (this._skipFrustumClipping === value) {\n      return;\n    }\n\n    this._skipFrustumClipping = value;\n  }\n\n  get skipFrustumClipping() {\n    return this._skipFrustumClipping;\n  }\n  /**\n   * Gets or sets a boolean indicating if all rendering must be done in point cloud\n   */\n\n\n  set forcePointsCloud(value) {\n    if (this._forcePointsCloud === value) {\n      return;\n    }\n\n    this._forcePointsCloud = value;\n    this.markAllMaterialsAsDirty(16);\n  }\n\n  get forcePointsCloud() {\n    return this._forcePointsCloud;\n  }\n  /**\n   * Gets or sets the animation properties override\n   */\n\n\n  get animationPropertiesOverride() {\n    return this._animationPropertiesOverride;\n  }\n\n  set animationPropertiesOverride(value) {\n    this._animationPropertiesOverride = value;\n  }\n  /** Sets a function to be executed when this scene is disposed. */\n\n\n  set onDispose(callback) {\n    if (this._onDisposeObserver) {\n      this.onDisposeObservable.remove(this._onDisposeObserver);\n    }\n\n    this._onDisposeObserver = this.onDisposeObservable.add(callback);\n  }\n  /** Sets a function to be executed before rendering this scene */\n\n\n  set beforeRender(callback) {\n    if (this._onBeforeRenderObserver) {\n      this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n    }\n\n    if (callback) {\n      this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n    }\n  }\n  /** Sets a function to be executed after rendering this scene */\n\n\n  set afterRender(callback) {\n    if (this._onAfterRenderObserver) {\n      this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n    }\n\n    if (callback) {\n      this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n    }\n  }\n  /** Sets a function to be executed before rendering a camera*/\n\n\n  set beforeCameraRender(callback) {\n    if (this._onBeforeCameraRenderObserver) {\n      this.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n    }\n\n    this._onBeforeCameraRenderObserver = this.onBeforeCameraRenderObservable.add(callback);\n  }\n  /** Sets a function to be executed after rendering a camera*/\n\n\n  set afterCameraRender(callback) {\n    if (this._onAfterCameraRenderObserver) {\n      this.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n    }\n\n    this._onAfterCameraRenderObserver = this.onAfterCameraRenderObservable.add(callback);\n  }\n  /**\n   * Gets or sets a predicate used to select candidate meshes for a pointer down event\n   */\n\n\n  get pointerDownPredicate() {\n    return this._pointerPickingConfiguration.pointerDownPredicate;\n  }\n\n  set pointerDownPredicate(value) {\n    this._pointerPickingConfiguration.pointerDownPredicate = value;\n  }\n  /**\n   * Gets or sets a predicate used to select candidate meshes for a pointer up event\n   */\n\n\n  get pointerUpPredicate() {\n    return this._pointerPickingConfiguration.pointerUpPredicate;\n  }\n\n  set pointerUpPredicate(value) {\n    this._pointerPickingConfiguration.pointerUpPredicate = value;\n  }\n  /**\n   * Gets or sets a predicate used to select candidate meshes for a pointer move event\n   */\n\n\n  get pointerMovePredicate() {\n    return this._pointerPickingConfiguration.pointerMovePredicate;\n  }\n\n  set pointerMovePredicate(value) {\n    this._pointerPickingConfiguration.pointerMovePredicate = value;\n  }\n  /**\n   * Gets or sets a predicate used to select candidate meshes for a pointer down event\n   */\n\n\n  get pointerDownFastCheck() {\n    return this._pointerPickingConfiguration.pointerDownFastCheck;\n  }\n\n  set pointerDownFastCheck(value) {\n    this._pointerPickingConfiguration.pointerDownFastCheck = value;\n  }\n  /**\n   * Gets or sets a predicate used to select candidate meshes for a pointer up event\n   */\n\n\n  get pointerUpFastCheck() {\n    return this._pointerPickingConfiguration.pointerUpFastCheck;\n  }\n\n  set pointerUpFastCheck(value) {\n    this._pointerPickingConfiguration.pointerUpFastCheck = value;\n  }\n  /**\n   * Gets or sets a predicate used to select candidate meshes for a pointer move event\n   */\n\n\n  get pointerMoveFastCheck() {\n    return this._pointerPickingConfiguration.pointerMoveFastCheck;\n  }\n\n  set pointerMoveFastCheck(value) {\n    this._pointerPickingConfiguration.pointerMoveFastCheck = value;\n  }\n  /**\n   * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\n   */\n\n\n  get skipPointerMovePicking() {\n    return this._pointerPickingConfiguration.skipPointerMovePicking;\n  }\n\n  set skipPointerMovePicking(value) {\n    this._pointerPickingConfiguration.skipPointerMovePicking = value;\n  }\n  /**\n   * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\n   */\n\n\n  get skipPointerDownPicking() {\n    return this._pointerPickingConfiguration.skipPointerDownPicking;\n  }\n\n  set skipPointerDownPicking(value) {\n    this._pointerPickingConfiguration.skipPointerDownPicking = value;\n  }\n  /**\n   * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\n   */\n\n\n  get skipPointerUpPicking() {\n    return this._pointerPickingConfiguration.skipPointerUpPicking;\n  }\n\n  set skipPointerUpPicking(value) {\n    this._pointerPickingConfiguration.skipPointerUpPicking = value;\n  }\n  /**\n   * Gets the pointer coordinates without any translation (ie. straight out of the pointer event)\n   */\n\n\n  get unTranslatedPointer() {\n    return this._inputManager.unTranslatedPointer;\n  }\n  /**\n   * Gets or sets the distance in pixel that you have to move to prevent some events. Default is 10 pixels\n   */\n\n\n  static get DragMovementThreshold() {\n    return _sceneInputManager.InputManager.DragMovementThreshold;\n  }\n\n  static set DragMovementThreshold(value) {\n    _sceneInputManager.InputManager.DragMovementThreshold = value;\n  }\n  /**\n   * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 500 ms\n   */\n\n\n  static get LongPressDelay() {\n    return _sceneInputManager.InputManager.LongPressDelay;\n  }\n\n  static set LongPressDelay(value) {\n    _sceneInputManager.InputManager.LongPressDelay = value;\n  }\n  /**\n   * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 300 ms\n   */\n\n\n  static get DoubleClickDelay() {\n    return _sceneInputManager.InputManager.DoubleClickDelay;\n  }\n\n  static set DoubleClickDelay(value) {\n    _sceneInputManager.InputManager.DoubleClickDelay = value;\n  }\n  /** If you need to check double click without raising a single click at first click, enable this flag */\n\n\n  static get ExclusiveDoubleClickMode() {\n    return _sceneInputManager.InputManager.ExclusiveDoubleClickMode;\n  }\n\n  static set ExclusiveDoubleClickMode(value) {\n    _sceneInputManager.InputManager.ExclusiveDoubleClickMode = value;\n  }\n  /**\n   * Bind the current view position to an effect.\n   * @param effect The effect to be bound\n   * @param variableName name of the shader variable that will hold the eye position\n   * @param isVector3 true to indicates that variableName is a Vector3 and not a Vector4\n   * @returns the computed eye position\n   */\n\n\n  bindEyePosition(effect, variableName = \"vEyePosition\", isVector3 = false) {\n    var _a;\n\n    const eyePosition = this._forcedViewPosition ? this._forcedViewPosition : this._mirroredCameraPosition ? this._mirroredCameraPosition : (_a = this.activeCamera.globalPosition) !== null && _a !== void 0 ? _a : this.activeCamera.devicePosition;\n    const invertNormal = this.useRightHandedSystem === (this._mirroredCameraPosition != null);\n\n    _mathVector.TmpVectors.Vector4[0].set(eyePosition.x, eyePosition.y, eyePosition.z, invertNormal ? -1 : 1);\n\n    if (effect) {\n      if (isVector3) {\n        effect.setFloat3(variableName, _mathVector.TmpVectors.Vector4[0].x, _mathVector.TmpVectors.Vector4[0].y, _mathVector.TmpVectors.Vector4[0].z);\n      } else {\n        effect.setVector4(variableName, _mathVector.TmpVectors.Vector4[0]);\n      }\n    }\n\n    return _mathVector.TmpVectors.Vector4[0];\n  }\n  /**\n   * Update the scene ubo before it can be used in rendering processing\n   * @returns the scene UniformBuffer\n   */\n\n\n  finalizeSceneUbo() {\n    const ubo = this.getSceneUniformBuffer();\n    const eyePosition = this.bindEyePosition(null);\n    ubo.updateFloat4(\"vEyePosition\", eyePosition.x, eyePosition.y, eyePosition.z, eyePosition.w);\n    ubo.update();\n    return ubo;\n  }\n  /**\n   * Gets or sets a boolean indicating if the scene must use right-handed coordinates system\n   */\n\n\n  set useRightHandedSystem(value) {\n    if (this._useRightHandedSystem === value) {\n      return;\n    }\n\n    this._useRightHandedSystem = value;\n    this.markAllMaterialsAsDirty(16);\n  }\n\n  get useRightHandedSystem() {\n    return this._useRightHandedSystem;\n  }\n  /**\n   * Sets the step Id used by deterministic lock step\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n   * @param newStepId defines the step Id\n   */\n\n\n  setStepId(newStepId) {\n    this._currentStepId = newStepId;\n  }\n  /**\n   * Gets the step Id used by deterministic lock step\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n   * @returns the step Id\n   */\n\n\n  getStepId() {\n    return this._currentStepId;\n  }\n  /**\n   * Gets the internal step used by deterministic lock step\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n   * @returns the internal step\n   */\n\n\n  getInternalStep() {\n    return this._currentInternalStep;\n  }\n  /**\n   * Gets or sets a boolean indicating if fog is enabled on this scene\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n   * (Default is true)\n   */\n\n\n  set fogEnabled(value) {\n    if (this._fogEnabled === value) {\n      return;\n    }\n\n    this._fogEnabled = value;\n    this.markAllMaterialsAsDirty(16);\n  }\n\n  get fogEnabled() {\n    return this._fogEnabled;\n  }\n  /**\n   * Gets or sets the fog mode to use\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n   * | mode | value |\n   * | --- | --- |\n   * | FOGMODE_NONE | 0 |\n   * | FOGMODE_EXP | 1 |\n   * | FOGMODE_EXP2 | 2 |\n   * | FOGMODE_LINEAR | 3 |\n   */\n\n\n  set fogMode(value) {\n    if (this._fogMode === value) {\n      return;\n    }\n\n    this._fogMode = value;\n    this.markAllMaterialsAsDirty(16);\n  }\n\n  get fogMode() {\n    return this._fogMode;\n  }\n  /**\n   * Flag indicating that the frame buffer binding is handled by another component\n   */\n\n\n  get prePass() {\n    return !!this.prePassRenderer && this.prePassRenderer.defaultRT.enabled;\n  }\n  /**\n   * Gets or sets a boolean indicating if shadows are enabled on this scene\n   */\n\n\n  set shadowsEnabled(value) {\n    if (this._shadowsEnabled === value) {\n      return;\n    }\n\n    this._shadowsEnabled = value;\n    this.markAllMaterialsAsDirty(2);\n  }\n\n  get shadowsEnabled() {\n    return this._shadowsEnabled;\n  }\n  /**\n   * Gets or sets a boolean indicating if lights are enabled on this scene\n   */\n\n\n  set lightsEnabled(value) {\n    if (this._lightsEnabled === value) {\n      return;\n    }\n\n    this._lightsEnabled = value;\n    this.markAllMaterialsAsDirty(2);\n  }\n\n  get lightsEnabled() {\n    return this._lightsEnabled;\n  }\n  /** All of the active cameras added to this scene. */\n\n\n  get activeCameras() {\n    return this._activeCameras;\n  }\n\n  set activeCameras(cameras) {\n    if (this._unObserveActiveCameras) {\n      this._unObserveActiveCameras();\n\n      this._unObserveActiveCameras = null;\n    }\n\n    if (cameras) {\n      this._unObserveActiveCameras = (0, _arrayTools._ObserveArray)(cameras, () => {\n        this.onActiveCamerasChanged.notifyObservers(this);\n      });\n    }\n\n    this._activeCameras = cameras;\n  }\n  /** Gets or sets the current active camera */\n\n\n  get activeCamera() {\n    return this._activeCamera;\n  }\n\n  set activeCamera(value) {\n    if (value === this._activeCamera) {\n      return;\n    }\n\n    this._activeCamera = value;\n    this.onActiveCameraChanged.notifyObservers(this);\n  }\n  /** The default material used on meshes when no material is affected */\n\n\n  get defaultMaterial() {\n    if (!this._defaultMaterial) {\n      this._defaultMaterial = Scene.DefaultMaterialFactory(this);\n    }\n\n    return this._defaultMaterial;\n  }\n  /** The default material used on meshes when no material is affected */\n\n\n  set defaultMaterial(value) {\n    this._defaultMaterial = value;\n  }\n  /**\n   * Gets or sets a boolean indicating if textures are enabled on this scene\n   */\n\n\n  set texturesEnabled(value) {\n    if (this._texturesEnabled === value) {\n      return;\n    }\n\n    this._texturesEnabled = value;\n    this.markAllMaterialsAsDirty(1);\n  }\n\n  get texturesEnabled() {\n    return this._texturesEnabled;\n  }\n  /**\n   * Gets or sets a boolean indicating if skeletons are enabled on this scene\n   */\n\n\n  set skeletonsEnabled(value) {\n    if (this._skeletonsEnabled === value) {\n      return;\n    }\n\n    this._skeletonsEnabled = value;\n    this.markAllMaterialsAsDirty(8);\n  }\n\n  get skeletonsEnabled() {\n    return this._skeletonsEnabled;\n  }\n  /** @internal */\n\n\n  get collisionCoordinator() {\n    if (!this._collisionCoordinator) {\n      this._collisionCoordinator = Scene.CollisionCoordinatorFactory();\n\n      this._collisionCoordinator.init(this);\n    }\n\n    return this._collisionCoordinator;\n  }\n  /**\n   * Gets the scene's rendering manager\n   */\n\n\n  get renderingManager() {\n    return this._renderingManager;\n  }\n  /**\n   * Gets the list of frustum planes (built from the active camera)\n   */\n\n\n  get frustumPlanes() {\n    return this._frustumPlanes;\n  }\n  /**\n   * Registers the transient components if needed.\n   */\n\n\n  _registerTransientComponents() {\n    // Register components that have been associated lately to the scene.\n    if (this._transientComponents.length > 0) {\n      for (const component of this._transientComponents) {\n        component.register();\n      }\n\n      this._transientComponents.length = 0;\n    }\n  }\n  /**\n   * @internal\n   * Add a component to the scene.\n   * Note that the ccomponent could be registered on th next frame if this is called after\n   * the register component stage.\n   * @param component Defines the component to add to the scene\n   */\n\n\n  _addComponent(component) {\n    this._components.push(component);\n\n    this._transientComponents.push(component);\n\n    const serializableComponent = component;\n\n    if (serializableComponent.addFromContainer && serializableComponent.serialize) {\n      this._serializableComponents.push(serializableComponent);\n    }\n  }\n  /**\n   * @internal\n   * Gets a component from the scene.\n   * @param name defines the name of the component to retrieve\n   * @returns the component or null if not present\n   */\n\n\n  _getComponent(name) {\n    for (const component of this._components) {\n      if (component.name === name) {\n        return component;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Creates a new Scene\n   * @param engine defines the engine to use to render this scene\n   * @param options defines the scene options\n   */\n\n\n  constructor(engine, options) {\n    super(); // Members\n\n    /** @internal */\n\n    this._inputManager = new _sceneInputManager.InputManager(this);\n    /** Define this parameter if you are using multiple cameras and you want to specify which one should be used for pointer position */\n\n    this.cameraToUseForPointers = null;\n    /** @internal */\n\n    this._isScene = true;\n    /** @internal */\n\n    this._blockEntityCollection = false;\n    /**\n     * Gets or sets a boolean that indicates if the scene must clear the render buffer before rendering a frame\n     */\n\n    this.autoClear = true;\n    /**\n     * Gets or sets a boolean that indicates if the scene must clear the depth and stencil buffers before rendering a frame\n     */\n\n    this.autoClearDepthAndStencil = true;\n    /**\n     * Defines the color used to clear the render buffer (Default is (0.2, 0.2, 0.3, 1.0))\n     */\n\n    this.clearColor = new _mathColor.Color4(0.2, 0.2, 0.3, 1.0);\n    /**\n     * Defines the color used to simulate the ambient color (Default is (0, 0, 0))\n     */\n\n    this.ambientColor = new _mathColor.Color3(0, 0, 0);\n    /**\n     * Intensity of the environment in all pbr material.\n     * This dims or reinforces the IBL lighting overall (reflection and diffuse).\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n\n    this.environmentIntensity = 1;\n    this._performancePriority = ScenePerformancePriority.BackwardCompatible;\n    /**\n     * Observable triggered when the performance priority is changed\n     */\n\n    this.onScenePerformancePriorityChangedObservable = new _observable.Observable();\n    this._forceWireframe = false;\n    this._skipFrustumClipping = false;\n    this._forcePointsCloud = false;\n    /**\n     * Gets or sets a boolean indicating if animations are enabled\n     */\n\n    this.animationsEnabled = true;\n    this._animationPropertiesOverride = null;\n    /**\n     * Gets or sets a boolean indicating if a constant deltatime has to be used\n     * This is mostly useful for testing purposes when you do not want the animations to scale with the framerate\n     */\n\n    this.useConstantAnimationDeltaTime = false;\n    /**\n     * Gets or sets a boolean indicating if the scene must keep the meshUnderPointer property updated\n     * Please note that it requires to run a ray cast through the scene on every frame\n     */\n\n    this.constantlyUpdateMeshUnderPointer = false;\n    /**\n     * Defines the HTML cursor to use when hovering over interactive elements\n     */\n\n    this.hoverCursor = \"pointer\";\n    /**\n     * Defines the HTML default cursor to use (empty by default)\n     */\n\n    this.defaultCursor = \"\";\n    /**\n     * Defines whether cursors are handled by the scene.\n     */\n\n    this.doNotHandleCursors = false;\n    /**\n     * This is used to call preventDefault() on pointer down\n     * in order to block unwanted artifacts like system double clicks\n     */\n\n    this.preventDefaultOnPointerDown = true;\n    /**\n     * This is used to call preventDefault() on pointer up\n     * in order to block unwanted artifacts like system double clicks\n     */\n\n    this.preventDefaultOnPointerUp = true; // Metadata\n\n    /**\n     * Gets or sets user defined metadata\n     */\n\n    this.metadata = null;\n    /**\n     * For internal use only. Please do not use.\n     */\n\n    this.reservedDataStore = null;\n    /**\n     * Use this array to add regular expressions used to disable offline support for specific urls\n     */\n\n    this.disableOfflineSupportExceptionRules = new Array();\n    /**\n     * An event triggered when the scene is disposed.\n     */\n\n    this.onDisposeObservable = new _observable.Observable();\n    this._onDisposeObserver = null;\n    /**\n     * An event triggered before rendering the scene (right after animations and physics)\n     */\n\n    this.onBeforeRenderObservable = new _observable.Observable();\n    this._onBeforeRenderObserver = null;\n    /**\n     * An event triggered after rendering the scene\n     */\n\n    this.onAfterRenderObservable = new _observable.Observable();\n    /**\n     * An event triggered after rendering the scene for an active camera (When scene.render is called this will be called after each camera)\n     * This is triggered for each \"sub\" camera in a Camera Rig unlike onAfterCameraRenderObservable\n     */\n\n    this.onAfterRenderCameraObservable = new _observable.Observable();\n    this._onAfterRenderObserver = null;\n    /**\n     * An event triggered before animating the scene\n     */\n\n    this.onBeforeAnimationsObservable = new _observable.Observable();\n    /**\n     * An event triggered after animations processing\n     */\n\n    this.onAfterAnimationsObservable = new _observable.Observable();\n    /**\n     * An event triggered before draw calls are ready to be sent\n     */\n\n    this.onBeforeDrawPhaseObservable = new _observable.Observable();\n    /**\n     * An event triggered after draw calls have been sent\n     */\n\n    this.onAfterDrawPhaseObservable = new _observable.Observable();\n    /**\n     * An event triggered when the scene is ready\n     */\n\n    this.onReadyObservable = new _observable.Observable();\n    /**\n     * An event triggered before rendering a camera\n     */\n\n    this.onBeforeCameraRenderObservable = new _observable.Observable();\n    this._onBeforeCameraRenderObserver = null;\n    /**\n     * An event triggered after rendering a camera\n     * This is triggered for the full rig Camera only unlike onAfterRenderCameraObservable\n     */\n\n    this.onAfterCameraRenderObservable = new _observable.Observable();\n    this._onAfterCameraRenderObserver = null;\n    /**\n     * An event triggered when active meshes evaluation is about to start\n     */\n\n    this.onBeforeActiveMeshesEvaluationObservable = new _observable.Observable();\n    /**\n     * An event triggered when active meshes evaluation is done\n     */\n\n    this.onAfterActiveMeshesEvaluationObservable = new _observable.Observable();\n    /**\n     * An event triggered when particles rendering is about to start\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n     */\n\n    this.onBeforeParticlesRenderingObservable = new _observable.Observable();\n    /**\n     * An event triggered when particles rendering is done\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\n     */\n\n    this.onAfterParticlesRenderingObservable = new _observable.Observable();\n    /**\n     * An event triggered when SceneLoader.Append or SceneLoader.Load or SceneLoader.ImportMesh were successfully executed\n     */\n\n    this.onDataLoadedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a camera is created\n     */\n\n    this.onNewCameraAddedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a camera is removed\n     */\n\n    this.onCameraRemovedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a light is created\n     */\n\n    this.onNewLightAddedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a light is removed\n     */\n\n    this.onLightRemovedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a geometry is created\n     */\n\n    this.onNewGeometryAddedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a geometry is removed\n     */\n\n    this.onGeometryRemovedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a transform node is created\n     */\n\n    this.onNewTransformNodeAddedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a transform node is removed\n     */\n\n    this.onTransformNodeRemovedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a mesh is created\n     */\n\n    this.onNewMeshAddedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a mesh is removed\n     */\n\n    this.onMeshRemovedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a skeleton is created\n     */\n\n    this.onNewSkeletonAddedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a skeleton is removed\n     */\n\n    this.onSkeletonRemovedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a material is created\n     */\n\n    this.onNewMaterialAddedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a multi material is created\n     */\n\n    this.onNewMultiMaterialAddedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a material is removed\n     */\n\n    this.onMaterialRemovedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a multi material is removed\n     */\n\n    this.onMultiMaterialRemovedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a texture is created\n     */\n\n    this.onNewTextureAddedObservable = new _observable.Observable();\n    /**\n     * An event triggered when a texture is removed\n     */\n\n    this.onTextureRemovedObservable = new _observable.Observable();\n    /**\n     * An event triggered when render targets are about to be rendered\n     * Can happen multiple times per frame.\n     */\n\n    this.onBeforeRenderTargetsRenderObservable = new _observable.Observable();\n    /**\n     * An event triggered when render targets were rendered.\n     * Can happen multiple times per frame.\n     */\n\n    this.onAfterRenderTargetsRenderObservable = new _observable.Observable();\n    /**\n     * An event triggered before calculating deterministic simulation step\n     */\n\n    this.onBeforeStepObservable = new _observable.Observable();\n    /**\n     * An event triggered after calculating deterministic simulation step\n     */\n\n    this.onAfterStepObservable = new _observable.Observable();\n    /**\n     * An event triggered when the activeCamera property is updated\n     */\n\n    this.onActiveCameraChanged = new _observable.Observable();\n    /**\n     * An event triggered when the activeCameras property is updated\n     */\n\n    this.onActiveCamerasChanged = new _observable.Observable();\n    /**\n     * This Observable will be triggered before rendering each renderingGroup of each rendered camera.\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n     */\n\n    this.onBeforeRenderingGroupObservable = new _observable.Observable();\n    /**\n     * This Observable will be triggered after rendering each renderingGroup of each rendered camera.\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\n     */\n\n    this.onAfterRenderingGroupObservable = new _observable.Observable();\n    /**\n     * This Observable will when a mesh has been imported into the scene.\n     */\n\n    this.onMeshImportedObservable = new _observable.Observable();\n    /**\n     * This Observable will when an animation file has been imported into the scene.\n     */\n\n    this.onAnimationFileImportedObservable = new _observable.Observable(); // Animations\n\n    /** @internal */\n\n    this._registeredForLateAnimationBindings = new _smartArray.SmartArrayNoDuplicate(256); // Pointers\n\n    this._pointerPickingConfiguration = new _pointerPickingConfiguration.PointerPickingConfiguration();\n    /**\n     * This observable event is triggered when any ponter event is triggered. It is registered during Scene.attachControl() and it is called BEFORE the 3D engine process anything (mesh/sprite picking for instance).\n     * You have the possibility to skip the process and the call to onPointerObservable by setting PointerInfoPre.skipOnPointerObservable to true\n     */\n\n    this.onPrePointerObservable = new _observable.Observable();\n    /**\n     * Observable event triggered each time an input event is received from the rendering canvas\n     */\n\n    this.onPointerObservable = new _observable.Observable(); // Keyboard\n\n    /**\n     * This observable event is triggered when any keyboard event si raised and registered during Scene.attachControl()\n     * You have the possibility to skip the process and the call to onKeyboardObservable by setting KeyboardInfoPre.skipOnPointerObservable to true\n     */\n\n    this.onPreKeyboardObservable = new _observable.Observable();\n    /**\n     * Observable event triggered each time an keyboard event is received from the hosting window\n     */\n\n    this.onKeyboardObservable = new _observable.Observable(); // Coordinates system\n\n    this._useRightHandedSystem = false; // Deterministic lockstep\n\n    this._timeAccumulator = 0;\n    this._currentStepId = 0;\n    this._currentInternalStep = 0; // Fog\n\n    this._fogEnabled = true;\n    this._fogMode = Scene.FOGMODE_NONE;\n    /**\n     * Gets or sets the fog color to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is Color3(0.2, 0.2, 0.3))\n     */\n\n    this.fogColor = new _mathColor.Color3(0.2, 0.2, 0.3);\n    /**\n     * Gets or sets the fog density to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is 0.1)\n     */\n\n    this.fogDensity = 0.1;\n    /**\n     * Gets or sets the fog start distance to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is 0)\n     */\n\n    this.fogStart = 0;\n    /**\n     * Gets or sets the fog end distance to use\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\n     * (Default is 1000)\n     */\n\n    this.fogEnd = 1000.0;\n    /**\n     * Flag indicating if we need to store previous matrices when rendering\n     */\n\n    this.needsPreviousWorldMatrices = false; // Lights\n\n    this._shadowsEnabled = true;\n    this._lightsEnabled = true;\n    this._unObserveActiveCameras = null; // Textures\n\n    this._texturesEnabled = true; // Physics\n\n    /**\n     * Gets or sets a boolean indicating if physic engines are enabled on this scene\n     */\n\n    this.physicsEnabled = true; // Particles\n\n    /**\n     * Gets or sets a boolean indicating if particles are enabled on this scene\n     */\n\n    this.particlesEnabled = true; // Sprites\n\n    /**\n     * Gets or sets a boolean indicating if sprites are enabled on this scene\n     */\n\n    this.spritesEnabled = true; // Skeletons\n\n    this._skeletonsEnabled = true; // Lens flares\n\n    /**\n     * Gets or sets a boolean indicating if lens flares are enabled on this scene\n     */\n\n    this.lensFlaresEnabled = true; // Collisions\n\n    /**\n     * Gets or sets a boolean indicating if collisions are enabled on this scene\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\n     */\n\n    this.collisionsEnabled = true;\n    /**\n     * Defines the gravity applied to this scene (used only for collisions)\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\n     */\n\n    this.gravity = new _mathVector.Vector3(0, -9.807, 0); // Postprocesses\n\n    /**\n     * Gets or sets a boolean indicating if postprocesses are enabled on this scene\n     */\n\n    this.postProcessesEnabled = true; // Customs render targets\n\n    /**\n     * Gets or sets a boolean indicating if render targets are enabled on this scene\n     */\n\n    this.renderTargetsEnabled = true;\n    /**\n     * Gets or sets a boolean indicating if next render targets must be dumped as image for debugging purposes\n     * We recommend not using it and instead rely on Spector.js: http://spector.babylonjs.com\n     */\n\n    this.dumpNextRenderTargets = false;\n    /**\n     * The list of user defined render targets added to the scene\n     */\n\n    this.customRenderTargets = new Array();\n    /**\n     * Gets the list of meshes imported to the scene through SceneLoader\n     */\n\n    this.importedMeshesFiles = new Array(); // Probes\n\n    /**\n     * Gets or sets a boolean indicating if probes are enabled on this scene\n     */\n\n    this.probesEnabled = true;\n    this._meshesForIntersections = new _smartArray.SmartArrayNoDuplicate(256); // Procedural textures\n\n    /**\n     * Gets or sets a boolean indicating if procedural textures are enabled on this scene\n     */\n\n    this.proceduralTexturesEnabled = true; // Performance counters\n\n    this._totalVertices = new _perfCounter.PerfCounter();\n    /** @internal */\n\n    this._activeIndices = new _perfCounter.PerfCounter();\n    /** @internal */\n\n    this._activeParticles = new _perfCounter.PerfCounter();\n    /** @internal */\n\n    this._activeBones = new _perfCounter.PerfCounter();\n    /** @internal */\n\n    this._animationTime = 0;\n    /**\n     * Gets or sets a general scale for animation speed\n     * @see https://www.babylonjs-playground.com/#IBU2W7#3\n     */\n\n    this.animationTimeScale = 1;\n    this._renderId = 0;\n    this._frameId = 0;\n    this._executeWhenReadyTimeoutId = null;\n    this._intermediateRendering = false;\n    this._defaultFrameBufferCleared = false;\n    this._viewUpdateFlag = -1;\n    this._projectionUpdateFlag = -1;\n    /** @internal */\n\n    this._toBeDisposed = new Array(256);\n    this._activeRequests = new Array();\n    /** @internal */\n\n    this._pendingData = new Array();\n    this._isDisposed = false;\n    /**\n     * Gets or sets a boolean indicating that all submeshes of active meshes must be rendered\n     * Use this boolean to avoid computing frustum clipping on submeshes (This could help when you are CPU bound)\n     */\n\n    this.dispatchAllSubMeshesOfActiveMeshes = false;\n    this._activeMeshes = new _smartArray.SmartArray(256);\n    this._processedMaterials = new _smartArray.SmartArray(256);\n    this._renderTargets = new _smartArray.SmartArrayNoDuplicate(256);\n    this._materialsRenderTargets = new _smartArray.SmartArrayNoDuplicate(256);\n    /** @internal */\n\n    this._activeParticleSystems = new _smartArray.SmartArray(256);\n    this._activeSkeletons = new _smartArray.SmartArrayNoDuplicate(32);\n    this._softwareSkinnedMeshes = new _smartArray.SmartArrayNoDuplicate(32);\n    /** @internal */\n\n    this._activeAnimatables = new Array();\n    this._transformMatrix = _mathVector.Matrix.Zero();\n    /**\n     * Gets or sets a boolean indicating if lights must be sorted by priority (off by default)\n     * This is useful if there are more lights that the maximum simulteanous authorized\n     */\n\n    this.requireLightSorting = false;\n    /**\n     * @internal\n     * Backing store of defined scene components.\n     */\n\n    this._components = [];\n    /**\n     * @internal\n     * Backing store of defined scene components.\n     */\n\n    this._serializableComponents = [];\n    /**\n     * List of components to register on the next registration step.\n     */\n\n    this._transientComponents = [];\n    /**\n     * @internal\n     * Defines the actions happening before camera updates.\n     */\n\n    this._beforeCameraUpdateStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening before clear the canvas.\n     */\n\n    this._beforeClearStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening before clear the canvas.\n     */\n\n    this._beforeRenderTargetClearStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions when collecting render targets for the frame.\n     */\n\n    this._gatherRenderTargetsStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening for one camera in the frame.\n     */\n\n    this._gatherActiveCameraRenderTargetsStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening during the per mesh ready checks.\n     */\n\n    this._isReadyForMeshStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening before evaluate active mesh checks.\n     */\n\n    this._beforeEvaluateActiveMeshStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening during the evaluate sub mesh checks.\n     */\n\n    this._evaluateSubMeshStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening during the active mesh stage.\n     */\n\n    this._preActiveMeshStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening during the per camera render target step.\n     */\n\n    this._cameraDrawRenderTargetStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just before the active camera is drawing.\n     */\n\n    this._beforeCameraDrawStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just before a render target is drawing.\n     */\n\n    this._beforeRenderTargetDrawStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just before a rendering group is drawing.\n     */\n\n    this._beforeRenderingGroupDrawStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just before a mesh is drawing.\n     */\n\n    this._beforeRenderingMeshStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after a mesh has been drawn.\n     */\n\n    this._afterRenderingMeshStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after a rendering group has been drawn.\n     */\n\n    this._afterRenderingGroupDrawStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after the active camera has been drawn.\n     */\n\n    this._afterCameraDrawStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after the post processing\n     */\n\n    this._afterCameraPostProcessStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after a render target has been drawn.\n     */\n\n    this._afterRenderTargetDrawStage = _sceneComponent.Stage.Create();\n    /**\n     * Defines the actions happening just after the post processing on a render target\n     */\n\n    this._afterRenderTargetPostProcessStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening just after rendering all cameras and computing intersections.\n     */\n\n    this._afterRenderStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer move event happens.\n     */\n\n    this._pointerMoveStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer down event happens.\n     */\n\n    this._pointerDownStage = _sceneComponent.Stage.Create();\n    /**\n     * @internal\n     * Defines the actions happening when a pointer up event happens.\n     */\n\n    this._pointerUpStage = _sceneComponent.Stage.Create();\n    /**\n     * an optional map from Geometry Id to Geometry index in the 'geometries' array\n     */\n\n    this._geometriesByUniqueId = null;\n    this._defaultMeshCandidates = {\n      data: [],\n      length: 0\n    };\n    this._defaultSubMeshCandidates = {\n      data: [],\n      length: 0\n    };\n    this._preventFreeActiveMeshesAndRenderingGroups = false;\n    /** @internal */\n\n    this._activeMeshesFrozen = false;\n    /** @internal */\n\n    this._activeMeshesFrozenButKeepClipping = false;\n    this._skipEvaluateActiveMeshesCompletely = false;\n    /** @internal */\n\n    this._allowPostProcessClearColor = true;\n    /**\n     * User updatable function that will return a deterministic frame time when engine is in deterministic lock step mode\n     */\n\n    this.getDeterministicFrameTime = () => {\n      return this._engine.getTimeStep();\n    };\n    /** @internal */\n\n\n    this._registeredActions = 0;\n    this._blockMaterialDirtyMechanism = false;\n    /**\n     * Internal perfCollector instance used for sharing between inspector and playground.\n     * Marked as protected to allow sharing between prototype extensions, but disallow access at toplevel.\n     */\n\n    this._perfCollector = null;\n    this.activeCameras = new Array();\n    const fullOptions = Object.assign({\n      useGeometryUniqueIdsMap: true,\n      useMaterialMeshMap: true,\n      useClonedMeshMap: true,\n      virtual: false\n    }, options);\n    this._engine = engine || _engineStore.EngineStore.LastCreatedEngine;\n\n    if (!fullOptions.virtual) {\n      _engineStore.EngineStore._LastCreatedScene = this;\n\n      this._engine.scenes.push(this);\n    } else {\n      this._engine._virtualScenes.push(this);\n    }\n\n    this._uid = null;\n    this._renderingManager = new _renderingManager.RenderingManager(this);\n\n    if (_postProcessManager.PostProcessManager) {\n      this.postProcessManager = new _postProcessManager.PostProcessManager(this);\n    }\n\n    if ((0, _domManagement.IsWindowObjectExist)()) {\n      this.attachControl();\n    } // Uniform Buffer\n\n\n    this._createUbo(); // Default Image processing definition\n\n\n    if (_imageProcessingConfiguration.ImageProcessingConfiguration) {\n      this._imageProcessingConfiguration = new _imageProcessingConfiguration.ImageProcessingConfiguration();\n    }\n\n    this.setDefaultCandidateProviders();\n\n    if (fullOptions.useGeometryUniqueIdsMap) {\n      this._geometriesByUniqueId = {};\n    }\n\n    this.useMaterialMeshMap = fullOptions.useMaterialMeshMap;\n    this.useClonedMeshMap = fullOptions.useClonedMeshMap;\n\n    if (!options || !options.virtual) {\n      this._engine.onNewSceneAddedObservable.notifyObservers(this);\n    }\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"Scene\" string\n   */\n\n\n  getClassName() {\n    return \"Scene\";\n  }\n  /**\n   * @internal\n   */\n\n\n  _getDefaultMeshCandidates() {\n    this._defaultMeshCandidates.data = this.meshes;\n    this._defaultMeshCandidates.length = this.meshes.length;\n    return this._defaultMeshCandidates;\n  }\n  /**\n   * @internal\n   */\n\n\n  _getDefaultSubMeshCandidates(mesh) {\n    this._defaultSubMeshCandidates.data = mesh.subMeshes;\n    this._defaultSubMeshCandidates.length = mesh.subMeshes.length;\n    return this._defaultSubMeshCandidates;\n  }\n  /**\n   * Sets the default candidate providers for the scene.\n   * This sets the getActiveMeshCandidates, getActiveSubMeshCandidates, getIntersectingSubMeshCandidates\n   * and getCollidingSubMeshCandidates to their default function\n   */\n\n\n  setDefaultCandidateProviders() {\n    this.getActiveMeshCandidates = this._getDefaultMeshCandidates.bind(this);\n    this.getActiveSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n    this.getIntersectingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n    this.getCollidingSubMeshCandidates = this._getDefaultSubMeshCandidates.bind(this);\n  }\n  /**\n   * Gets the mesh that is currently under the pointer\n   */\n\n\n  get meshUnderPointer() {\n    return this._inputManager.meshUnderPointer;\n  }\n  /**\n   * Gets or sets the current on-screen X position of the pointer\n   */\n\n\n  get pointerX() {\n    return this._inputManager.pointerX;\n  }\n\n  set pointerX(value) {\n    this._inputManager.pointerX = value;\n  }\n  /**\n   * Gets or sets the current on-screen Y position of the pointer\n   */\n\n\n  get pointerY() {\n    return this._inputManager.pointerY;\n  }\n\n  set pointerY(value) {\n    this._inputManager.pointerY = value;\n  }\n  /**\n   * Gets the cached material (ie. the latest rendered one)\n   * @returns the cached material\n   */\n\n\n  getCachedMaterial() {\n    return this._cachedMaterial;\n  }\n  /**\n   * Gets the cached effect (ie. the latest rendered one)\n   * @returns the cached effect\n   */\n\n\n  getCachedEffect() {\n    return this._cachedEffect;\n  }\n  /**\n   * Gets the cached visibility state (ie. the latest rendered one)\n   * @returns the cached visibility state\n   */\n\n\n  getCachedVisibility() {\n    return this._cachedVisibility;\n  }\n  /**\n   * Gets a boolean indicating if the current material / effect / visibility must be bind again\n   * @param material defines the current material\n   * @param effect defines the current effect\n   * @param visibility defines the current visibility state\n   * @returns true if one parameter is not cached\n   */\n\n\n  isCachedMaterialInvalid(material, effect, visibility = 1) {\n    return this._cachedEffect !== effect || this._cachedMaterial !== material || this._cachedVisibility !== visibility;\n  }\n  /**\n   * Gets the engine associated with the scene\n   * @returns an Engine\n   */\n\n\n  getEngine() {\n    return this._engine;\n  }\n  /**\n   * Gets the total number of vertices rendered per frame\n   * @returns the total number of vertices rendered per frame\n   */\n\n\n  getTotalVertices() {\n    return this._totalVertices.current;\n  }\n  /**\n   * Gets the performance counter for total vertices\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n   */\n\n\n  get totalVerticesPerfCounter() {\n    return this._totalVertices;\n  }\n  /**\n   * Gets the total number of active indices rendered per frame (You can deduce the number of rendered triangles by dividing this number by 3)\n   * @returns the total number of active indices rendered per frame\n   */\n\n\n  getActiveIndices() {\n    return this._activeIndices.current;\n  }\n  /**\n   * Gets the performance counter for active indices\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n   */\n\n\n  get totalActiveIndicesPerfCounter() {\n    return this._activeIndices;\n  }\n  /**\n   * Gets the total number of active particles rendered per frame\n   * @returns the total number of active particles rendered per frame\n   */\n\n\n  getActiveParticles() {\n    return this._activeParticles.current;\n  }\n  /**\n   * Gets the performance counter for active particles\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n   */\n\n\n  get activeParticlesPerfCounter() {\n    return this._activeParticles;\n  }\n  /**\n   * Gets the total number of active bones rendered per frame\n   * @returns the total number of active bones rendered per frame\n   */\n\n\n  getActiveBones() {\n    return this._activeBones.current;\n  }\n  /**\n   * Gets the performance counter for active bones\n   * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\n   */\n\n\n  get activeBonesPerfCounter() {\n    return this._activeBones;\n  }\n  /**\n   * Gets the array of active meshes\n   * @returns an array of AbstractMesh\n   */\n\n\n  getActiveMeshes() {\n    return this._activeMeshes;\n  }\n  /**\n   * Gets the animation ratio (which is 1.0 is the scene renders at 60fps and 2 if the scene renders at 30fps, etc.)\n   * @returns a number\n   */\n\n\n  getAnimationRatio() {\n    return this._animationRatio !== undefined ? this._animationRatio : 1;\n  }\n  /**\n   * Gets an unique Id for the current render phase\n   * @returns a number\n   */\n\n\n  getRenderId() {\n    return this._renderId;\n  }\n  /**\n   * Gets an unique Id for the current frame\n   * @returns a number\n   */\n\n\n  getFrameId() {\n    return this._frameId;\n  }\n  /** Call this function if you want to manually increment the render Id*/\n\n\n  incrementRenderId() {\n    this._renderId++;\n  }\n\n  _createUbo() {\n    this.setSceneUniformBuffer(this.createSceneUniformBuffer());\n  }\n  /**\n   * Use this method to simulate a pointer move on a mesh\n   * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n   * @param pickResult pickingInfo of the object wished to simulate pointer event on\n   * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n   * @returns the current scene\n   */\n\n\n  simulatePointerMove(pickResult, pointerEventInit) {\n    this._inputManager.simulatePointerMove(pickResult, pointerEventInit);\n\n    return this;\n  }\n  /**\n   * Use this method to simulate a pointer down on a mesh\n   * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n   * @param pickResult pickingInfo of the object wished to simulate pointer event on\n   * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n   * @returns the current scene\n   */\n\n\n  simulatePointerDown(pickResult, pointerEventInit) {\n    this._inputManager.simulatePointerDown(pickResult, pointerEventInit);\n\n    return this;\n  }\n  /**\n   * Use this method to simulate a pointer up on a mesh\n   * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n   * @param pickResult pickingInfo of the object wished to simulate pointer event on\n   * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n   * @param doubleTap indicates that the pointer up event should be considered as part of a double click (false by default)\n   * @returns the current scene\n   */\n\n\n  simulatePointerUp(pickResult, pointerEventInit, doubleTap) {\n    this._inputManager.simulatePointerUp(pickResult, pointerEventInit, doubleTap);\n\n    return this;\n  }\n  /**\n   * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\n   * @param pointerId defines the pointer id to use in a multi-touch scenario (0 by default)\n   * @returns true if the pointer was captured\n   */\n\n\n  isPointerCaptured(pointerId = 0) {\n    return this._inputManager.isPointerCaptured(pointerId);\n  }\n  /**\n   * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\n   * @param attachUp defines if you want to attach events to pointerup\n   * @param attachDown defines if you want to attach events to pointerdown\n   * @param attachMove defines if you want to attach events to pointermove\n   */\n\n\n  attachControl(attachUp = true, attachDown = true, attachMove = true) {\n    this._inputManager.attachControl(attachUp, attachDown, attachMove);\n  }\n  /** Detaches all event handlers*/\n\n\n  detachControl() {\n    this._inputManager.detachControl();\n  }\n  /**\n   * This function will check if the scene can be rendered (textures are loaded, shaders are compiled)\n   * Delay loaded resources are not taking in account\n   * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: true)\n   * @returns true if all required resources are ready\n   */\n\n\n  isReady(checkRenderTargets = true) {\n    var _a, _b, _c;\n\n    if (this._isDisposed) {\n      return false;\n    }\n\n    let index;\n    const engine = this.getEngine();\n    const currentRenderPassId = engine.currentRenderPassId;\n    engine.currentRenderPassId = (_b = (_a = this.activeCamera) === null || _a === void 0 ? void 0 : _a.renderPassId) !== null && _b !== void 0 ? _b : currentRenderPassId;\n    let isReady = true; // Pending data\n\n    if (this._pendingData.length > 0) {\n      isReady = false;\n    } // Ensures that the pre-pass renderer is enabled if it is to be enabled.\n\n\n    (_c = this.prePassRenderer) === null || _c === void 0 ? void 0 : _c.update(); // Meshes\n\n    if (checkRenderTargets) {\n      this._processedMaterials.reset();\n\n      this._materialsRenderTargets.reset();\n    }\n\n    for (index = 0; index < this.meshes.length; index++) {\n      const mesh = this.meshes[index];\n\n      if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\n        continue;\n      } // Do not stop at the first encountered \"unready\" object as we want to ensure\n      // all materials are starting off their compilation in parallel.\n\n\n      if (!mesh.isReady(true)) {\n        isReady = false;\n        continue;\n      }\n\n      const hardwareInstancedRendering = mesh.hasThinInstances || mesh.getClassName() === \"InstancedMesh\" || mesh.getClassName() === \"InstancedLinesMesh\" || engine.getCaps().instancedArrays && mesh.instances.length > 0; // Is Ready For Mesh\n\n      for (const step of this._isReadyForMeshStage) {\n        if (!step.action(mesh, hardwareInstancedRendering)) {\n          isReady = false;\n        }\n      }\n\n      if (!checkRenderTargets) {\n        continue;\n      }\n\n      const mat = mesh.material || this.defaultMaterial;\n\n      if (mat) {\n        if (mat._storeEffectOnSubMeshes) {\n          for (const subMesh of mesh.subMeshes) {\n            const material = subMesh.getMaterial();\n\n            if (material && material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n              if (this._processedMaterials.indexOf(material) === -1) {\n                this._processedMaterials.push(material);\n\n                this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures());\n              }\n            }\n          }\n        } else {\n          if (mat.hasRenderTargetTextures && mat.getRenderTargetTextures != null) {\n            if (this._processedMaterials.indexOf(mat) === -1) {\n              this._processedMaterials.push(mat);\n\n              this._materialsRenderTargets.concatWithNoDuplicate(mat.getRenderTargetTextures());\n            }\n          }\n        }\n      }\n    } // Render targets\n\n\n    if (checkRenderTargets) {\n      for (index = 0; index < this._materialsRenderTargets.length; ++index) {\n        const rtt = this._materialsRenderTargets.data[index];\n\n        if (!rtt.isReadyForRendering()) {\n          isReady = false;\n        }\n      }\n    } // Geometries\n\n\n    for (index = 0; index < this.geometries.length; index++) {\n      const geometry = this.geometries[index];\n\n      if (geometry.delayLoadState === 2) {\n        isReady = false;\n      }\n    } // Post-processes\n\n\n    if (this.activeCameras && this.activeCameras.length > 0) {\n      for (const camera of this.activeCameras) {\n        if (!camera.isReady(true)) {\n          isReady = false;\n        }\n      }\n    } else if (this.activeCamera) {\n      if (!this.activeCamera.isReady(true)) {\n        isReady = false;\n      }\n    } // Particles\n\n\n    for (const particleSystem of this.particleSystems) {\n      if (!particleSystem.isReady()) {\n        isReady = false;\n      }\n    } // Layers\n\n\n    if (this.layers) {\n      for (const layer of this.layers) {\n        if (!layer.isReady()) {\n          isReady = false;\n        }\n      }\n    } // Effects\n\n\n    if (!engine.areAllEffectsReady()) {\n      isReady = false;\n    }\n\n    engine.currentRenderPassId = currentRenderPassId;\n    return isReady;\n  }\n  /** Resets all cached information relative to material (including effect and visibility) */\n\n\n  resetCachedMaterial() {\n    this._cachedMaterial = null;\n    this._cachedEffect = null;\n    this._cachedVisibility = null;\n  }\n  /**\n   * Registers a function to be called before every frame render\n   * @param func defines the function to register\n   */\n\n\n  registerBeforeRender(func) {\n    this.onBeforeRenderObservable.add(func);\n  }\n  /**\n   * Unregisters a function called before every frame render\n   * @param func defines the function to unregister\n   */\n\n\n  unregisterBeforeRender(func) {\n    this.onBeforeRenderObservable.removeCallback(func);\n  }\n  /**\n   * Registers a function to be called after every frame render\n   * @param func defines the function to register\n   */\n\n\n  registerAfterRender(func) {\n    this.onAfterRenderObservable.add(func);\n  }\n  /**\n   * Unregisters a function called after every frame render\n   * @param func defines the function to unregister\n   */\n\n\n  unregisterAfterRender(func) {\n    this.onAfterRenderObservable.removeCallback(func);\n  }\n\n  _executeOnceBeforeRender(func) {\n    const execFunc = () => {\n      func();\n      setTimeout(() => {\n        this.unregisterBeforeRender(execFunc);\n      });\n    };\n\n    this.registerBeforeRender(execFunc);\n  }\n  /**\n   * The provided function will run before render once and will be disposed afterwards.\n   * A timeout delay can be provided so that the function will be executed in N ms.\n   * The timeout is using the browser's native setTimeout so time percision cannot be guaranteed.\n   * @param func The function to be executed.\n   * @param timeout optional delay in ms\n   */\n\n\n  executeOnceBeforeRender(func, timeout) {\n    if (timeout !== undefined) {\n      setTimeout(() => {\n        this._executeOnceBeforeRender(func);\n      }, timeout);\n    } else {\n      this._executeOnceBeforeRender(func);\n    }\n  }\n  /**\n   * This function can help adding any object to the list of data awaited to be ready in order to check for a complete scene loading.\n   * @param data defines the object to wait for\n   */\n\n\n  addPendingData(data) {\n    this._pendingData.push(data);\n  }\n  /**\n   * Remove a pending data from the loading list which has previously been added with addPendingData.\n   * @param data defines the object to remove from the pending list\n   */\n\n\n  removePendingData(data) {\n    const wasLoading = this.isLoading;\n\n    const index = this._pendingData.indexOf(data);\n\n    if (index !== -1) {\n      this._pendingData.splice(index, 1);\n    }\n\n    if (wasLoading && !this.isLoading) {\n      this.onDataLoadedObservable.notifyObservers(this);\n    }\n  }\n  /**\n   * Returns the number of items waiting to be loaded\n   * @returns the number of items waiting to be loaded\n   */\n\n\n  getWaitingItemsCount() {\n    return this._pendingData.length;\n  }\n  /**\n   * Returns a boolean indicating if the scene is still loading data\n   */\n\n\n  get isLoading() {\n    return this._pendingData.length > 0;\n  }\n  /**\n   * Registers a function to be executed when the scene is ready\n   * @param func - the function to be executed\n   * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n   */\n\n\n  executeWhenReady(func, checkRenderTargets = false) {\n    this.onReadyObservable.addOnce(func);\n\n    if (this._executeWhenReadyTimeoutId !== null) {\n      return;\n    }\n\n    this._checkIsReady(checkRenderTargets);\n  }\n  /**\n   * Returns a promise that resolves when the scene is ready\n   * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\n   * @returns A promise that resolves when the scene is ready\n   */\n\n\n  whenReadyAsync(checkRenderTargets = false) {\n    return new Promise(resolve => {\n      this.executeWhenReady(() => {\n        resolve();\n      }, checkRenderTargets);\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _checkIsReady(checkRenderTargets = false) {\n    this._registerTransientComponents();\n\n    if (this.isReady(checkRenderTargets)) {\n      this.onReadyObservable.notifyObservers(this);\n      this.onReadyObservable.clear();\n      this._executeWhenReadyTimeoutId = null;\n      return;\n    }\n\n    if (this._isDisposed) {\n      this.onReadyObservable.clear();\n      this._executeWhenReadyTimeoutId = null;\n      return;\n    }\n\n    this._executeWhenReadyTimeoutId = setTimeout(() => {\n      // Ensure materials effects are checked outside render loops\n      this.incrementRenderId();\n\n      this._checkIsReady(checkRenderTargets);\n    }, 100);\n  }\n  /**\n   * Gets all animatable attached to the scene\n   */\n\n\n  get animatables() {\n    return this._activeAnimatables;\n  }\n  /**\n   * Resets the last animation time frame.\n   * Useful to override when animations start running when loading a scene for the first time.\n   */\n\n\n  resetLastAnimationTimeFrame() {\n    this._animationTimeLast = _precisionDate.PrecisionDate.Now;\n  } // Matrix\n\n  /**\n   * Gets the current view matrix\n   * @returns a Matrix\n   */\n\n\n  getViewMatrix() {\n    return this._viewMatrix;\n  }\n  /**\n   * Gets the current projection matrix\n   * @returns a Matrix\n   */\n\n\n  getProjectionMatrix() {\n    return this._projectionMatrix;\n  }\n  /**\n   * Gets the current transform matrix\n   * @returns a Matrix made of View * Projection\n   */\n\n\n  getTransformMatrix() {\n    return this._transformMatrix;\n  }\n  /**\n   * Sets the current transform matrix\n   * @param viewL defines the View matrix to use\n   * @param projectionL defines the Projection matrix to use\n   * @param viewR defines the right View matrix to use (if provided)\n   * @param projectionR defines the right Projection matrix to use (if provided)\n   */\n\n\n  setTransformMatrix(viewL, projectionL, viewR, projectionR) {\n    // clear the multiviewSceneUbo if no viewR and projectionR are defined\n    if (!viewR && !projectionR && this._multiviewSceneUbo) {\n      this._multiviewSceneUbo.dispose();\n\n      this._multiviewSceneUbo = null;\n    }\n\n    if (this._viewUpdateFlag === viewL.updateFlag && this._projectionUpdateFlag === projectionL.updateFlag) {\n      return;\n    }\n\n    this._viewUpdateFlag = viewL.updateFlag;\n    this._projectionUpdateFlag = projectionL.updateFlag;\n    this._viewMatrix = viewL;\n    this._projectionMatrix = projectionL;\n\n    this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix); // Update frustum\n\n\n    if (!this._frustumPlanes) {\n      this._frustumPlanes = _mathFrustum.Frustum.GetPlanes(this._transformMatrix);\n    } else {\n      _mathFrustum.Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\n    }\n\n    if (this._multiviewSceneUbo && this._multiviewSceneUbo.useUbo) {\n      this._updateMultiviewUbo(viewR, projectionR);\n    } else if (this._sceneUbo.useUbo) {\n      this._sceneUbo.updateMatrix(\"viewProjection\", this._transformMatrix);\n\n      this._sceneUbo.updateMatrix(\"view\", this._viewMatrix);\n\n      this._sceneUbo.updateMatrix(\"projection\", this._projectionMatrix);\n    }\n  }\n  /**\n   * Gets the uniform buffer used to store scene data\n   * @returns a UniformBuffer\n   */\n\n\n  getSceneUniformBuffer() {\n    return this._multiviewSceneUbo ? this._multiviewSceneUbo : this._sceneUbo;\n  }\n  /**\n   * Creates a scene UBO\n   * @param name name of the uniform buffer (optional, for debugging purpose only)\n   * @returns a new ubo\n   */\n\n\n  createSceneUniformBuffer(name) {\n    const sceneUbo = new _uniformBuffer.UniformBuffer(this._engine, undefined, false, name !== null && name !== void 0 ? name : \"scene\");\n    sceneUbo.addUniform(\"viewProjection\", 16);\n    sceneUbo.addUniform(\"view\", 16);\n    sceneUbo.addUniform(\"projection\", 16);\n    sceneUbo.addUniform(\"vEyePosition\", 4);\n    return sceneUbo;\n  }\n  /**\n   * Sets the scene ubo\n   * @param ubo the ubo to set for the scene\n   */\n\n\n  setSceneUniformBuffer(ubo) {\n    this._sceneUbo = ubo;\n    this._viewUpdateFlag = -1;\n    this._projectionUpdateFlag = -1;\n  }\n  /**\n   * Gets an unique (relatively to the current scene) Id\n   * @returns an unique number for the scene\n   */\n\n\n  getUniqueId() {\n    return _uniqueIdGenerator.UniqueIdGenerator.UniqueId;\n  }\n  /**\n   * Add a mesh to the list of scene's meshes\n   * @param newMesh defines the mesh to add\n   * @param recursive if all child meshes should also be added to the scene\n   */\n\n\n  addMesh(newMesh, recursive = false) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    this.meshes.push(newMesh);\n\n    newMesh._resyncLightSources();\n\n    if (!newMesh.parent) {\n      newMesh._addToSceneRootNodes();\n    }\n\n    this.onNewMeshAddedObservable.notifyObservers(newMesh);\n\n    if (recursive) {\n      newMesh.getChildMeshes().forEach(m => {\n        this.addMesh(m);\n      });\n    }\n  }\n  /**\n   * Remove a mesh for the list of scene's meshes\n   * @param toRemove defines the mesh to remove\n   * @param recursive if all child meshes should also be removed from the scene\n   * @returns the index where the mesh was in the mesh list\n   */\n\n\n  removeMesh(toRemove, recursive = false) {\n    const index = this.meshes.indexOf(toRemove);\n\n    if (index !== -1) {\n      // Remove from the scene if mesh found\n      this.meshes[index] = this.meshes[this.meshes.length - 1];\n      this.meshes.pop();\n\n      if (!toRemove.parent) {\n        toRemove._removeFromSceneRootNodes();\n      }\n    }\n\n    this._inputManager._invalidateMesh(toRemove);\n\n    this.onMeshRemovedObservable.notifyObservers(toRemove);\n\n    if (recursive) {\n      toRemove.getChildMeshes().forEach(m => {\n        this.removeMesh(m);\n      });\n    }\n\n    return index;\n  }\n  /**\n   * Add a transform node to the list of scene's transform nodes\n   * @param newTransformNode defines the transform node to add\n   */\n\n\n  addTransformNode(newTransformNode) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    if (newTransformNode.getScene() === this && newTransformNode._indexInSceneTransformNodesArray !== -1) {\n      // Already there?\n      return;\n    }\n\n    newTransformNode._indexInSceneTransformNodesArray = this.transformNodes.length;\n    this.transformNodes.push(newTransformNode);\n\n    if (!newTransformNode.parent) {\n      newTransformNode._addToSceneRootNodes();\n    }\n\n    this.onNewTransformNodeAddedObservable.notifyObservers(newTransformNode);\n  }\n  /**\n   * Remove a transform node for the list of scene's transform nodes\n   * @param toRemove defines the transform node to remove\n   * @returns the index where the transform node was in the transform node list\n   */\n\n\n  removeTransformNode(toRemove) {\n    const index = toRemove._indexInSceneTransformNodesArray;\n\n    if (index !== -1) {\n      if (index !== this.transformNodes.length - 1) {\n        const lastNode = this.transformNodes[this.transformNodes.length - 1];\n        this.transformNodes[index] = lastNode;\n        lastNode._indexInSceneTransformNodesArray = index;\n      }\n\n      toRemove._indexInSceneTransformNodesArray = -1;\n      this.transformNodes.pop();\n\n      if (!toRemove.parent) {\n        toRemove._removeFromSceneRootNodes();\n      }\n    }\n\n    this.onTransformNodeRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Remove a skeleton for the list of scene's skeletons\n   * @param toRemove defines the skeleton to remove\n   * @returns the index where the skeleton was in the skeleton list\n   */\n\n\n  removeSkeleton(toRemove) {\n    const index = this.skeletons.indexOf(toRemove);\n\n    if (index !== -1) {\n      // Remove from the scene if found\n      this.skeletons.splice(index, 1);\n      this.onSkeletonRemovedObservable.notifyObservers(toRemove); // Clean active container\n\n      this._executeActiveContainerCleanup(this._activeSkeletons);\n    }\n\n    return index;\n  }\n  /**\n   * Remove a morph target for the list of scene's morph targets\n   * @param toRemove defines the morph target to remove\n   * @returns the index where the morph target was in the morph target list\n   */\n\n\n  removeMorphTargetManager(toRemove) {\n    const index = this.morphTargetManagers.indexOf(toRemove);\n\n    if (index !== -1) {\n      // Remove from the scene if found\n      this.morphTargetManagers.splice(index, 1);\n    }\n\n    return index;\n  }\n  /**\n   * Remove a light for the list of scene's lights\n   * @param toRemove defines the light to remove\n   * @returns the index where the light was in the light list\n   */\n\n\n  removeLight(toRemove) {\n    const index = this.lights.indexOf(toRemove);\n\n    if (index !== -1) {\n      // Remove from meshes\n      for (const mesh of this.meshes) {\n        mesh._removeLightSource(toRemove, false);\n      } // Remove from the scene if mesh found\n\n\n      this.lights.splice(index, 1);\n      this.sortLightsByPriority();\n\n      if (!toRemove.parent) {\n        toRemove._removeFromSceneRootNodes();\n      }\n    }\n\n    this.onLightRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Remove a camera for the list of scene's cameras\n   * @param toRemove defines the camera to remove\n   * @returns the index where the camera was in the camera list\n   */\n\n\n  removeCamera(toRemove) {\n    const index = this.cameras.indexOf(toRemove);\n\n    if (index !== -1) {\n      // Remove from the scene if mesh found\n      this.cameras.splice(index, 1);\n\n      if (!toRemove.parent) {\n        toRemove._removeFromSceneRootNodes();\n      }\n    } // Remove from activeCameras\n\n\n    if (this.activeCameras) {\n      const index2 = this.activeCameras.indexOf(toRemove);\n\n      if (index2 !== -1) {\n        // Remove from the scene if mesh found\n        this.activeCameras.splice(index2, 1);\n      }\n    } // Reset the activeCamera\n\n\n    if (this.activeCamera === toRemove) {\n      if (this.cameras.length > 0) {\n        this.activeCamera = this.cameras[0];\n      } else {\n        this.activeCamera = null;\n      }\n    }\n\n    this.onCameraRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Remove a particle system for the list of scene's particle systems\n   * @param toRemove defines the particle system to remove\n   * @returns the index where the particle system was in the particle system list\n   */\n\n\n  removeParticleSystem(toRemove) {\n    const index = this.particleSystems.indexOf(toRemove);\n\n    if (index !== -1) {\n      this.particleSystems.splice(index, 1); // Clean active container\n\n      this._executeActiveContainerCleanup(this._activeParticleSystems);\n    }\n\n    return index;\n  }\n  /**\n   * Remove a animation for the list of scene's animations\n   * @param toRemove defines the animation to remove\n   * @returns the index where the animation was in the animation list\n   */\n\n\n  removeAnimation(toRemove) {\n    const index = this.animations.indexOf(toRemove);\n\n    if (index !== -1) {\n      this.animations.splice(index, 1);\n    }\n\n    return index;\n  }\n  /**\n   * Will stop the animation of the given target\n   * @param target - the target\n   * @param animationName - the name of the animation to stop (all animations will be stopped if both this and targetMask are empty)\n   * @param targetMask - a function that determines if the animation should be stopped based on its target (all animations will be stopped if both this and animationName are empty)\n   */\n\n\n  stopAnimation(target, animationName, targetMask) {// Do nothing as code will be provided by animation component\n  }\n  /**\n   * Removes the given animation group from this scene.\n   * @param toRemove The animation group to remove\n   * @returns The index of the removed animation group\n   */\n\n\n  removeAnimationGroup(toRemove) {\n    const index = this.animationGroups.indexOf(toRemove);\n\n    if (index !== -1) {\n      this.animationGroups.splice(index, 1);\n    }\n\n    return index;\n  }\n  /**\n   * Removes the given multi-material from this scene.\n   * @param toRemove The multi-material to remove\n   * @returns The index of the removed multi-material\n   */\n\n\n  removeMultiMaterial(toRemove) {\n    const index = this.multiMaterials.indexOf(toRemove);\n\n    if (index !== -1) {\n      this.multiMaterials.splice(index, 1);\n    }\n\n    this.onMultiMaterialRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Removes the given material from this scene.\n   * @param toRemove The material to remove\n   * @returns The index of the removed material\n   */\n\n\n  removeMaterial(toRemove) {\n    const index = toRemove._indexInSceneMaterialArray;\n\n    if (index !== -1 && index < this.materials.length) {\n      if (index !== this.materials.length - 1) {\n        const lastMaterial = this.materials[this.materials.length - 1];\n        this.materials[index] = lastMaterial;\n        lastMaterial._indexInSceneMaterialArray = index;\n      }\n\n      toRemove._indexInSceneMaterialArray = -1;\n      this.materials.pop();\n    }\n\n    this.onMaterialRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Removes the given action manager from this scene.\n   * @deprecated\n   * @param toRemove The action manager to remove\n   * @returns The index of the removed action manager\n   */\n\n\n  removeActionManager(toRemove) {\n    const index = this.actionManagers.indexOf(toRemove);\n\n    if (index !== -1) {\n      this.actionManagers.splice(index, 1);\n    }\n\n    return index;\n  }\n  /**\n   * Removes the given texture from this scene.\n   * @param toRemove The texture to remove\n   * @returns The index of the removed texture\n   */\n\n\n  removeTexture(toRemove) {\n    const index = this.textures.indexOf(toRemove);\n\n    if (index !== -1) {\n      this.textures.splice(index, 1);\n    }\n\n    this.onTextureRemovedObservable.notifyObservers(toRemove);\n    return index;\n  }\n  /**\n   * Adds the given light to this scene\n   * @param newLight The light to add\n   */\n\n\n  addLight(newLight) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    this.lights.push(newLight);\n    this.sortLightsByPriority();\n\n    if (!newLight.parent) {\n      newLight._addToSceneRootNodes();\n    } // Add light to all meshes (To support if the light is removed and then re-added)\n\n\n    for (const mesh of this.meshes) {\n      if (mesh.lightSources.indexOf(newLight) === -1) {\n        mesh.lightSources.push(newLight);\n\n        mesh._resyncLightSources();\n      }\n    }\n\n    this.onNewLightAddedObservable.notifyObservers(newLight);\n  }\n  /**\n   * Sorts the list list based on light priorities\n   */\n\n\n  sortLightsByPriority() {\n    if (this.requireLightSorting) {\n      this.lights.sort(_lightConstants.LightConstants.CompareLightsPriority);\n    }\n  }\n  /**\n   * Adds the given camera to this scene\n   * @param newCamera The camera to add\n   */\n\n\n  addCamera(newCamera) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    this.cameras.push(newCamera);\n    this.onNewCameraAddedObservable.notifyObservers(newCamera);\n\n    if (!newCamera.parent) {\n      newCamera._addToSceneRootNodes();\n    }\n  }\n  /**\n   * Adds the given skeleton to this scene\n   * @param newSkeleton The skeleton to add\n   */\n\n\n  addSkeleton(newSkeleton) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    this.skeletons.push(newSkeleton);\n    this.onNewSkeletonAddedObservable.notifyObservers(newSkeleton);\n  }\n  /**\n   * Adds the given particle system to this scene\n   * @param newParticleSystem The particle system to add\n   */\n\n\n  addParticleSystem(newParticleSystem) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    this.particleSystems.push(newParticleSystem);\n  }\n  /**\n   * Adds the given animation to this scene\n   * @param newAnimation The animation to add\n   */\n\n\n  addAnimation(newAnimation) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    this.animations.push(newAnimation);\n  }\n  /**\n   * Adds the given animation group to this scene.\n   * @param newAnimationGroup The animation group to add\n   */\n\n\n  addAnimationGroup(newAnimationGroup) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    this.animationGroups.push(newAnimationGroup);\n  }\n  /**\n   * Adds the given multi-material to this scene\n   * @param newMultiMaterial The multi-material to add\n   */\n\n\n  addMultiMaterial(newMultiMaterial) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    this.multiMaterials.push(newMultiMaterial);\n    this.onNewMultiMaterialAddedObservable.notifyObservers(newMultiMaterial);\n  }\n  /**\n   * Adds the given material to this scene\n   * @param newMaterial The material to add\n   */\n\n\n  addMaterial(newMaterial) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    if (newMaterial.getScene() === this && newMaterial._indexInSceneMaterialArray !== -1) {\n      // Already there??\n      return;\n    }\n\n    newMaterial._indexInSceneMaterialArray = this.materials.length;\n    this.materials.push(newMaterial);\n    this.onNewMaterialAddedObservable.notifyObservers(newMaterial);\n  }\n  /**\n   * Adds the given morph target to this scene\n   * @param newMorphTargetManager The morph target to add\n   */\n\n\n  addMorphTargetManager(newMorphTargetManager) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    this.morphTargetManagers.push(newMorphTargetManager);\n  }\n  /**\n   * Adds the given geometry to this scene\n   * @param newGeometry The geometry to add\n   */\n\n\n  addGeometry(newGeometry) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    if (this._geometriesByUniqueId) {\n      this._geometriesByUniqueId[newGeometry.uniqueId] = this.geometries.length;\n    }\n\n    this.geometries.push(newGeometry);\n  }\n  /**\n   * Adds the given action manager to this scene\n   * @deprecated\n   * @param newActionManager The action manager to add\n   */\n\n\n  addActionManager(newActionManager) {\n    this.actionManagers.push(newActionManager);\n  }\n  /**\n   * Adds the given texture to this scene.\n   * @param newTexture The texture to add\n   */\n\n\n  addTexture(newTexture) {\n    if (this._blockEntityCollection) {\n      return;\n    }\n\n    this.textures.push(newTexture);\n    this.onNewTextureAddedObservable.notifyObservers(newTexture);\n  }\n  /**\n   * Switch active camera\n   * @param newCamera defines the new active camera\n   * @param attachControl defines if attachControl must be called for the new active camera (default: true)\n   */\n\n\n  switchActiveCamera(newCamera, attachControl = true) {\n    const canvas = this._engine.getInputElement();\n\n    if (!canvas) {\n      return;\n    }\n\n    if (this.activeCamera) {\n      this.activeCamera.detachControl();\n    }\n\n    this.activeCamera = newCamera;\n\n    if (attachControl) {\n      newCamera.attachControl();\n    }\n  }\n  /**\n   * sets the active camera of the scene using its Id\n   * @param id defines the camera's Id\n   * @returns the new active camera or null if none found.\n   */\n\n\n  setActiveCameraById(id) {\n    const camera = this.getCameraById(id);\n\n    if (camera) {\n      this.activeCamera = camera;\n      return camera;\n    }\n\n    return null;\n  }\n  /**\n   * sets the active camera of the scene using its name\n   * @param name defines the camera's name\n   * @returns the new active camera or null if none found.\n   */\n\n\n  setActiveCameraByName(name) {\n    const camera = this.getCameraByName(name);\n\n    if (camera) {\n      this.activeCamera = camera;\n      return camera;\n    }\n\n    return null;\n  }\n  /**\n   * get an animation group using its name\n   * @param name defines the material's name\n   * @returns the animation group or null if none found.\n   */\n\n\n  getAnimationGroupByName(name) {\n    for (let index = 0; index < this.animationGroups.length; index++) {\n      if (this.animationGroups[index].name === name) {\n        return this.animationGroups[index];\n      }\n    }\n\n    return null;\n  }\n\n  _getMaterial(allowMultiMaterials, predicate) {\n    for (let index = 0; index < this.materials.length; index++) {\n      const material = this.materials[index];\n\n      if (predicate(material)) {\n        return material;\n      }\n    }\n\n    if (allowMultiMaterials) {\n      for (let index = 0; index < this.multiMaterials.length; index++) {\n        const material = this.multiMaterials[index];\n\n        if (predicate(material)) {\n          return material;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Get a material using its unique id\n   * @param uniqueId defines the material's unique id\n   * @param allowMultiMaterials determines whether multimaterials should be considered\n   * @returns the material or null if none found.\n   */\n\n\n  getMaterialByUniqueID(uniqueId, allowMultiMaterials = false) {\n    return this._getMaterial(allowMultiMaterials, m => m.uniqueId === uniqueId);\n  }\n  /**\n   * get a material using its id\n   * @param id defines the material's Id\n   * @param allowMultiMaterials determines whether multimaterials should be considered\n   * @returns the material or null if none found.\n   */\n\n\n  getMaterialById(id, allowMultiMaterials = false) {\n    return this._getMaterial(allowMultiMaterials, m => m.id === id);\n  }\n  /**\n   * Gets a material using its name\n   * @param name defines the material's name\n   * @param allowMultiMaterials determines whether multimaterials should be considered\n   * @returns the material or null if none found.\n   */\n\n\n  getMaterialByName(name, allowMultiMaterials = false) {\n    return this._getMaterial(allowMultiMaterials, m => m.name === name);\n  }\n  /**\n   * Gets a last added material using a given id\n   * @param id defines the material's id\n   * @param allowMultiMaterials determines whether multimaterials should be considered\n   * @returns the last material with the given id or null if none found.\n   */\n\n\n  getLastMaterialById(id, allowMultiMaterials = false) {\n    for (let index = this.materials.length - 1; index >= 0; index--) {\n      if (this.materials[index].id === id) {\n        return this.materials[index];\n      }\n    }\n\n    if (allowMultiMaterials) {\n      for (let index = this.multiMaterials.length - 1; index >= 0; index--) {\n        if (this.multiMaterials[index].id === id) {\n          return this.multiMaterials[index];\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Get a texture using its unique id\n   * @param uniqueId defines the texture's unique id\n   * @returns the texture or null if none found.\n   */\n\n\n  getTextureByUniqueId(uniqueId) {\n    for (let index = 0; index < this.textures.length; index++) {\n      if (this.textures[index].uniqueId === uniqueId) {\n        return this.textures[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a texture using its name\n   * @param name defines the texture's name\n   * @returns the texture or null if none found.\n   */\n\n\n  getTextureByName(name) {\n    for (let index = 0; index < this.textures.length; index++) {\n      if (this.textures[index].name === name) {\n        return this.textures[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a camera using its Id\n   * @param id defines the Id to look for\n   * @returns the camera or null if not found\n   */\n\n\n  getCameraById(id) {\n    for (let index = 0; index < this.cameras.length; index++) {\n      if (this.cameras[index].id === id) {\n        return this.cameras[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a camera using its unique Id\n   * @param uniqueId defines the unique Id to look for\n   * @returns the camera or null if not found\n   */\n\n\n  getCameraByUniqueId(uniqueId) {\n    for (let index = 0; index < this.cameras.length; index++) {\n      if (this.cameras[index].uniqueId === uniqueId) {\n        return this.cameras[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a camera using its name\n   * @param name defines the camera's name\n   * @returns the camera or null if none found.\n   */\n\n\n  getCameraByName(name) {\n    for (let index = 0; index < this.cameras.length; index++) {\n      if (this.cameras[index].name === name) {\n        return this.cameras[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a bone using its Id\n   * @param id defines the bone's Id\n   * @returns the bone or null if not found\n   */\n\n\n  getBoneById(id) {\n    for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n      const skeleton = this.skeletons[skeletonIndex];\n\n      for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n        if (skeleton.bones[boneIndex].id === id) {\n          return skeleton.bones[boneIndex];\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a bone using its id\n   * @param name defines the bone's name\n   * @returns the bone or null if not found\n   */\n\n\n  getBoneByName(name) {\n    for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\n      const skeleton = this.skeletons[skeletonIndex];\n\n      for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\n        if (skeleton.bones[boneIndex].name === name) {\n          return skeleton.bones[boneIndex];\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a light node using its name\n   * @param name defines the the light's name\n   * @returns the light or null if none found.\n   */\n\n\n  getLightByName(name) {\n    for (let index = 0; index < this.lights.length; index++) {\n      if (this.lights[index].name === name) {\n        return this.lights[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a light node using its Id\n   * @param id defines the light's Id\n   * @returns the light or null if none found.\n   */\n\n\n  getLightById(id) {\n    for (let index = 0; index < this.lights.length; index++) {\n      if (this.lights[index].id === id) {\n        return this.lights[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a light node using its scene-generated unique Id\n   * @param uniqueId defines the light's unique Id\n   * @returns the light or null if none found.\n   */\n\n\n  getLightByUniqueId(uniqueId) {\n    for (let index = 0; index < this.lights.length; index++) {\n      if (this.lights[index].uniqueId === uniqueId) {\n        return this.lights[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a particle system by Id\n   * @param id defines the particle system Id\n   * @returns the corresponding system or null if none found\n   */\n\n\n  getParticleSystemById(id) {\n    for (let index = 0; index < this.particleSystems.length; index++) {\n      if (this.particleSystems[index].id === id) {\n        return this.particleSystems[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a geometry using its Id\n   * @param id defines the geometry's Id\n   * @returns the geometry or null if none found.\n   */\n\n\n  getGeometryById(id) {\n    for (let index = 0; index < this.geometries.length; index++) {\n      if (this.geometries[index].id === id) {\n        return this.geometries[index];\n      }\n    }\n\n    return null;\n  }\n\n  _getGeometryByUniqueId(uniqueId) {\n    if (this._geometriesByUniqueId) {\n      const index = this._geometriesByUniqueId[uniqueId];\n\n      if (index !== undefined) {\n        return this.geometries[index];\n      }\n    } else {\n      for (let index = 0; index < this.geometries.length; index++) {\n        if (this.geometries[index].uniqueId === uniqueId) {\n          return this.geometries[index];\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Add a new geometry to this scene\n   * @param geometry defines the geometry to be added to the scene.\n   * @param force defines if the geometry must be pushed even if a geometry with this id already exists\n   * @returns a boolean defining if the geometry was added or not\n   */\n\n\n  pushGeometry(geometry, force) {\n    if (!force && this._getGeometryByUniqueId(geometry.uniqueId)) {\n      return false;\n    }\n\n    this.addGeometry(geometry);\n    this.onNewGeometryAddedObservable.notifyObservers(geometry);\n    return true;\n  }\n  /**\n   * Removes an existing geometry\n   * @param geometry defines the geometry to be removed from the scene\n   * @returns a boolean defining if the geometry was removed or not\n   */\n\n\n  removeGeometry(geometry) {\n    let index;\n\n    if (this._geometriesByUniqueId) {\n      index = this._geometriesByUniqueId[geometry.uniqueId];\n\n      if (index === undefined) {\n        return false;\n      }\n    } else {\n      index = this.geometries.indexOf(geometry);\n\n      if (index < 0) {\n        return false;\n      }\n    }\n\n    if (index !== this.geometries.length - 1) {\n      const lastGeometry = this.geometries[this.geometries.length - 1];\n\n      if (lastGeometry) {\n        this.geometries[index] = lastGeometry;\n\n        if (this._geometriesByUniqueId) {\n          this._geometriesByUniqueId[lastGeometry.uniqueId] = index;\n        }\n      }\n    }\n\n    if (this._geometriesByUniqueId) {\n      this._geometriesByUniqueId[geometry.uniqueId] = undefined;\n    }\n\n    this.geometries.pop();\n    this.onGeometryRemovedObservable.notifyObservers(geometry);\n    return true;\n  }\n  /**\n   * Gets the list of geometries attached to the scene\n   * @returns an array of Geometry\n   */\n\n\n  getGeometries() {\n    return this.geometries;\n  }\n  /**\n   * Gets the first added mesh found of a given Id\n   * @param id defines the Id to search for\n   * @returns the mesh found or null if not found at all\n   */\n\n\n  getMeshById(id) {\n    for (let index = 0; index < this.meshes.length; index++) {\n      if (this.meshes[index].id === id) {\n        return this.meshes[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a list of meshes using their Id\n   * @param id defines the Id to search for\n   * @returns a list of meshes\n   */\n\n\n  getMeshesById(id) {\n    return this.meshes.filter(function (m) {\n      return m.id === id;\n    });\n  }\n  /**\n   * Gets the first added transform node found of a given Id\n   * @param id defines the Id to search for\n   * @returns the found transform node or null if not found at all.\n   */\n\n\n  getTransformNodeById(id) {\n    for (let index = 0; index < this.transformNodes.length; index++) {\n      if (this.transformNodes[index].id === id) {\n        return this.transformNodes[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a transform node with its auto-generated unique Id\n   * @param uniqueId defines the unique Id to search for\n   * @returns the found transform node or null if not found at all.\n   */\n\n\n  getTransformNodeByUniqueId(uniqueId) {\n    for (let index = 0; index < this.transformNodes.length; index++) {\n      if (this.transformNodes[index].uniqueId === uniqueId) {\n        return this.transformNodes[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a list of transform nodes using their Id\n   * @param id defines the Id to search for\n   * @returns a list of transform nodes\n   */\n\n\n  getTransformNodesById(id) {\n    return this.transformNodes.filter(function (m) {\n      return m.id === id;\n    });\n  }\n  /**\n   * Gets a mesh with its auto-generated unique Id\n   * @param uniqueId defines the unique Id to search for\n   * @returns the found mesh or null if not found at all.\n   */\n\n\n  getMeshByUniqueId(uniqueId) {\n    for (let index = 0; index < this.meshes.length; index++) {\n      if (this.meshes[index].uniqueId === uniqueId) {\n        return this.meshes[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a the last added mesh using a given Id\n   * @param id defines the Id to search for\n   * @returns the found mesh or null if not found at all.\n   */\n\n\n  getLastMeshById(id) {\n    for (let index = this.meshes.length - 1; index >= 0; index--) {\n      if (this.meshes[index].id === id) {\n        return this.meshes[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a the last added node (Mesh, Camera, Light) using a given Id\n   * @param id defines the Id to search for\n   * @returns the found node or null if not found at all\n   */\n\n\n  getLastEntryById(id) {\n    let index;\n\n    for (index = this.meshes.length - 1; index >= 0; index--) {\n      if (this.meshes[index].id === id) {\n        return this.meshes[index];\n      }\n    }\n\n    for (index = this.transformNodes.length - 1; index >= 0; index--) {\n      if (this.transformNodes[index].id === id) {\n        return this.transformNodes[index];\n      }\n    }\n\n    for (index = this.cameras.length - 1; index >= 0; index--) {\n      if (this.cameras[index].id === id) {\n        return this.cameras[index];\n      }\n    }\n\n    for (index = this.lights.length - 1; index >= 0; index--) {\n      if (this.lights[index].id === id) {\n        return this.lights[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a node (Mesh, Camera, Light) using a given Id\n   * @param id defines the Id to search for\n   * @returns the found node or null if not found at all\n   */\n\n\n  getNodeById(id) {\n    const mesh = this.getMeshById(id);\n\n    if (mesh) {\n      return mesh;\n    }\n\n    const transformNode = this.getTransformNodeById(id);\n\n    if (transformNode) {\n      return transformNode;\n    }\n\n    const light = this.getLightById(id);\n\n    if (light) {\n      return light;\n    }\n\n    const camera = this.getCameraById(id);\n\n    if (camera) {\n      return camera;\n    }\n\n    const bone = this.getBoneById(id);\n\n    if (bone) {\n      return bone;\n    }\n\n    return null;\n  }\n  /**\n   * Gets a node (Mesh, Camera, Light) using a given name\n   * @param name defines the name to search for\n   * @returns the found node or null if not found at all.\n   */\n\n\n  getNodeByName(name) {\n    const mesh = this.getMeshByName(name);\n\n    if (mesh) {\n      return mesh;\n    }\n\n    const transformNode = this.getTransformNodeByName(name);\n\n    if (transformNode) {\n      return transformNode;\n    }\n\n    const light = this.getLightByName(name);\n\n    if (light) {\n      return light;\n    }\n\n    const camera = this.getCameraByName(name);\n\n    if (camera) {\n      return camera;\n    }\n\n    const bone = this.getBoneByName(name);\n\n    if (bone) {\n      return bone;\n    }\n\n    return null;\n  }\n  /**\n   * Gets a mesh using a given name\n   * @param name defines the name to search for\n   * @returns the found mesh or null if not found at all.\n   */\n\n\n  getMeshByName(name) {\n    for (let index = 0; index < this.meshes.length; index++) {\n      if (this.meshes[index].name === name) {\n        return this.meshes[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a transform node using a given name\n   * @param name defines the name to search for\n   * @returns the found transform node or null if not found at all.\n   */\n\n\n  getTransformNodeByName(name) {\n    for (let index = 0; index < this.transformNodes.length; index++) {\n      if (this.transformNodes[index].name === name) {\n        return this.transformNodes[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\n   * @param id defines the Id to search for\n   * @returns the found skeleton or null if not found at all.\n   */\n\n\n  getLastSkeletonById(id) {\n    for (let index = this.skeletons.length - 1; index >= 0; index--) {\n      if (this.skeletons[index].id === id) {\n        return this.skeletons[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a skeleton using a given auto generated unique id\n   * @param  uniqueId defines the unique id to search for\n   * @returns the found skeleton or null if not found at all.\n   */\n\n\n  getSkeletonByUniqueId(uniqueId) {\n    for (let index = 0; index < this.skeletons.length; index++) {\n      if (this.skeletons[index].uniqueId === uniqueId) {\n        return this.skeletons[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a skeleton using a given id (if many are found, this function will pick the first one)\n   * @param id defines the id to search for\n   * @returns the found skeleton or null if not found at all.\n   */\n\n\n  getSkeletonById(id) {\n    for (let index = 0; index < this.skeletons.length; index++) {\n      if (this.skeletons[index].id === id) {\n        return this.skeletons[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a skeleton using a given name\n   * @param name defines the name to search for\n   * @returns the found skeleton or null if not found at all.\n   */\n\n\n  getSkeletonByName(name) {\n    for (let index = 0; index < this.skeletons.length; index++) {\n      if (this.skeletons[index].name === name) {\n        return this.skeletons[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a morph target manager  using a given id (if many are found, this function will pick the last one)\n   * @param id defines the id to search for\n   * @returns the found morph target manager or null if not found at all.\n   */\n\n\n  getMorphTargetManagerById(id) {\n    for (let index = 0; index < this.morphTargetManagers.length; index++) {\n      if (this.morphTargetManagers[index].uniqueId === id) {\n        return this.morphTargetManagers[index];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a morph target using a given id (if many are found, this function will pick the first one)\n   * @param id defines the id to search for\n   * @returns the found morph target or null if not found at all.\n   */\n\n\n  getMorphTargetById(id) {\n    for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n      const morphTargetManager = this.morphTargetManagers[managerIndex];\n\n      for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n        const target = morphTargetManager.getTarget(index);\n\n        if (target.id === id) {\n          return target;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a morph target using a given name (if many are found, this function will pick the first one)\n   * @param name defines the name to search for\n   * @returns the found morph target or null if not found at all.\n   */\n\n\n  getMorphTargetByName(name) {\n    for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\n      const morphTargetManager = this.morphTargetManagers[managerIndex];\n\n      for (let index = 0; index < morphTargetManager.numTargets; ++index) {\n        const target = morphTargetManager.getTarget(index);\n\n        if (target.name === name) {\n          return target;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a post process using a given name (if many are found, this function will pick the first one)\n   * @param name defines the name to search for\n   * @returns the found post process or null if not found at all.\n   */\n\n\n  getPostProcessByName(name) {\n    for (let postProcessIndex = 0; postProcessIndex < this.postProcesses.length; ++postProcessIndex) {\n      const postProcess = this.postProcesses[postProcessIndex];\n\n      if (postProcess.name === name) {\n        return postProcess;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets a boolean indicating if the given mesh is active\n   * @param mesh defines the mesh to look for\n   * @returns true if the mesh is in the active list\n   */\n\n\n  isActiveMesh(mesh) {\n    return this._activeMeshes.indexOf(mesh) !== -1;\n  }\n  /**\n   * Return a unique id as a string which can serve as an identifier for the scene\n   */\n\n\n  get uid() {\n    if (!this._uid) {\n      this._uid = _tools.Tools.RandomId();\n    }\n\n    return this._uid;\n  }\n  /**\n   * Add an externally attached data from its key.\n   * This method call will fail and return false, if such key already exists.\n   * If you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\n   * @param key the unique key that identifies the data\n   * @param data the data object to associate to the key for this Engine instance\n   * @returns true if no such key were already present and the data was added successfully, false otherwise\n   */\n\n\n  addExternalData(key, data) {\n    if (!this._externalData) {\n      this._externalData = new _stringDictionary.StringDictionary();\n    }\n\n    return this._externalData.add(key, data);\n  }\n  /**\n   * Get an externally attached data from its key\n   * @param key the unique key that identifies the data\n   * @returns the associated data, if present (can be null), or undefined if not present\n   */\n\n\n  getExternalData(key) {\n    if (!this._externalData) {\n      return null;\n    }\n\n    return this._externalData.get(key);\n  }\n  /**\n   * Get an externally attached data from its key, create it using a factory if it's not already present\n   * @param key the unique key that identifies the data\n   * @param factory the factory that will be called to create the instance if and only if it doesn't exists\n   * @returns the associated data, can be null if the factory returned null.\n   */\n\n\n  getOrAddExternalDataWithFactory(key, factory) {\n    if (!this._externalData) {\n      this._externalData = new _stringDictionary.StringDictionary();\n    }\n\n    return this._externalData.getOrAddWithFactory(key, factory);\n  }\n  /**\n   * Remove an externally attached data from the Engine instance\n   * @param key the unique key that identifies the data\n   * @returns true if the data was successfully removed, false if it doesn't exist\n   */\n\n\n  removeExternalData(key) {\n    return this._externalData.remove(key);\n  }\n\n  _evaluateSubMesh(subMesh, mesh, initialMesh, forcePush) {\n    if (forcePush || subMesh.isInFrustum(this._frustumPlanes)) {\n      for (const step of this._evaluateSubMeshStage) {\n        step.action(mesh, subMesh);\n      }\n\n      const material = subMesh.getMaterial();\n\n      if (material !== null && material !== undefined) {\n        // Render targets\n        if (material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\n          if (this._processedMaterials.indexOf(material) === -1) {\n            this._processedMaterials.push(material);\n\n            this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures());\n          }\n        } // Dispatch\n\n\n        this._renderingManager.dispatch(subMesh, mesh, material);\n      }\n    }\n  }\n  /**\n   * Clear the processed materials smart array preventing retention point in material dispose.\n   */\n\n\n  freeProcessedMaterials() {\n    this._processedMaterials.dispose();\n  }\n  /** Gets or sets a boolean blocking all the calls to freeActiveMeshes and freeRenderingGroups\n   * It can be used in order to prevent going through methods freeRenderingGroups and freeActiveMeshes several times to improve performance\n   * when disposing several meshes in a row or a hierarchy of meshes.\n   * When used, it is the responsibility of the user to blockfreeActiveMeshesAndRenderingGroups back to false.\n   */\n\n\n  get blockfreeActiveMeshesAndRenderingGroups() {\n    return this._preventFreeActiveMeshesAndRenderingGroups;\n  }\n\n  set blockfreeActiveMeshesAndRenderingGroups(value) {\n    if (this._preventFreeActiveMeshesAndRenderingGroups === value) {\n      return;\n    }\n\n    if (value) {\n      this.freeActiveMeshes();\n      this.freeRenderingGroups();\n    }\n\n    this._preventFreeActiveMeshesAndRenderingGroups = value;\n  }\n  /**\n   * Clear the active meshes smart array preventing retention point in mesh dispose.\n   */\n\n\n  freeActiveMeshes() {\n    if (this.blockfreeActiveMeshesAndRenderingGroups) {\n      return;\n    }\n\n    this._activeMeshes.dispose();\n\n    if (this.activeCamera && this.activeCamera._activeMeshes) {\n      this.activeCamera._activeMeshes.dispose();\n    }\n\n    if (this.activeCameras) {\n      for (let i = 0; i < this.activeCameras.length; i++) {\n        const activeCamera = this.activeCameras[i];\n\n        if (activeCamera && activeCamera._activeMeshes) {\n          activeCamera._activeMeshes.dispose();\n        }\n      }\n    }\n  }\n  /**\n   * Clear the info related to rendering groups preventing retention points during dispose.\n   */\n\n\n  freeRenderingGroups() {\n    if (this.blockfreeActiveMeshesAndRenderingGroups) {\n      return;\n    }\n\n    if (this._renderingManager) {\n      this._renderingManager.freeRenderingGroups();\n    }\n\n    if (this.textures) {\n      for (let i = 0; i < this.textures.length; i++) {\n        const texture = this.textures[i];\n\n        if (texture && texture.renderList) {\n          texture.freeRenderingGroups();\n        }\n      }\n    }\n  }\n  /** @internal */\n\n\n  _isInIntermediateRendering() {\n    return this._intermediateRendering;\n  }\n  /**\n   * Use this function to stop evaluating active meshes. The current list will be keep alive between frames\n   * @param skipEvaluateActiveMeshes defines an optional boolean indicating that the evaluate active meshes step must be completely skipped\n   * @param onSuccess optional success callback\n   * @param onError optional error callback\n   * @param freezeMeshes defines if meshes should be frozen (true by default)\n   * @param keepFrustumCulling defines if you want to keep running the frustum clipping (false by default)\n   * @returns the current scene\n   */\n\n\n  freezeActiveMeshes(skipEvaluateActiveMeshes = false, onSuccess, onError, freezeMeshes = true, keepFrustumCulling = false) {\n    this.executeWhenReady(() => {\n      if (!this.activeCamera) {\n        onError && onError(\"No active camera found\");\n        return;\n      }\n\n      if (!this._frustumPlanes) {\n        this.updateTransformMatrix();\n      }\n\n      this._evaluateActiveMeshes();\n\n      this._activeMeshesFrozen = true;\n      this._activeMeshesFrozenButKeepClipping = keepFrustumCulling;\n      this._skipEvaluateActiveMeshesCompletely = skipEvaluateActiveMeshes;\n\n      if (freezeMeshes) {\n        for (let index = 0; index < this._activeMeshes.length; index++) {\n          this._activeMeshes.data[index]._freeze();\n        }\n      }\n\n      onSuccess && onSuccess();\n    });\n    return this;\n  }\n  /**\n   * Use this function to restart evaluating active meshes on every frame\n   * @returns the current scene\n   */\n\n\n  unfreezeActiveMeshes() {\n    for (let index = 0; index < this.meshes.length; index++) {\n      const mesh = this.meshes[index];\n\n      if (mesh._internalAbstractMeshDataInfo) {\n        mesh._internalAbstractMeshDataInfo._isActive = false;\n      }\n    }\n\n    for (let index = 0; index < this._activeMeshes.length; index++) {\n      this._activeMeshes.data[index]._unFreeze();\n    }\n\n    this._activeMeshesFrozen = false;\n    return this;\n  }\n\n  _executeActiveContainerCleanup(container) {\n    const isInFastMode = this._engine.snapshotRendering && this._engine.snapshotRenderingMode === 1;\n\n    if (!isInFastMode && this._activeMeshesFrozen && this._activeMeshes.length) {\n      return; // Do not execute in frozen mode\n    } // We need to ensure we are not in the rendering loop\n\n\n    this.onBeforeRenderObservable.addOnce(() => container.dispose());\n  }\n\n  _evaluateActiveMeshes() {\n    var _a;\n\n    if (this._engine.snapshotRendering && this._engine.snapshotRenderingMode === 1) {\n      if (this._activeMeshes.length > 0) {\n        (_a = this.activeCamera) === null || _a === void 0 ? void 0 : _a._activeMeshes.reset();\n\n        this._activeMeshes.reset();\n\n        this._renderingManager.reset();\n\n        this._processedMaterials.reset();\n\n        this._activeParticleSystems.reset();\n\n        this._activeSkeletons.reset();\n\n        this._softwareSkinnedMeshes.reset();\n      }\n\n      return;\n    }\n\n    if (this._activeMeshesFrozen && this._activeMeshes.length) {\n      if (!this._skipEvaluateActiveMeshesCompletely) {\n        const len = this._activeMeshes.length;\n\n        for (let i = 0; i < len; i++) {\n          const mesh = this._activeMeshes.data[i];\n          mesh.computeWorldMatrix();\n        }\n      }\n\n      if (this._activeParticleSystems) {\n        const psLength = this._activeParticleSystems.length;\n\n        for (let i = 0; i < psLength; i++) {\n          this._activeParticleSystems.data[i].animate();\n        }\n      }\n\n      this._renderingManager.resetSprites();\n\n      return;\n    }\n\n    if (!this.activeCamera) {\n      return;\n    }\n\n    this.onBeforeActiveMeshesEvaluationObservable.notifyObservers(this);\n\n    this.activeCamera._activeMeshes.reset();\n\n    this._activeMeshes.reset();\n\n    this._renderingManager.reset();\n\n    this._processedMaterials.reset();\n\n    this._activeParticleSystems.reset();\n\n    this._activeSkeletons.reset();\n\n    this._softwareSkinnedMeshes.reset();\n\n    this._materialsRenderTargets.reset();\n\n    for (const step of this._beforeEvaluateActiveMeshStage) {\n      step.action();\n    } // Determine mesh candidates\n\n\n    const meshes = this.getActiveMeshCandidates(); // Check each mesh\n\n    const len = meshes.length;\n\n    for (let i = 0; i < len; i++) {\n      const mesh = meshes.data[i];\n      mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = false;\n\n      if (mesh.isBlocked) {\n        continue;\n      }\n\n      this._totalVertices.addCount(mesh.getTotalVertices(), false);\n\n      if (!mesh.isReady() || !mesh.isEnabled() || mesh.scaling.hasAZeroComponent) {\n        continue;\n      }\n\n      mesh.computeWorldMatrix(); // Intersections\n\n      if (mesh.actionManager && mesh.actionManager.hasSpecificTriggers2(12, 13)) {\n        this._meshesForIntersections.pushNoDuplicate(mesh);\n      } // Switch to current LOD\n\n\n      let meshToRender = this.customLODSelector ? this.customLODSelector(mesh, this.activeCamera) : mesh.getLOD(this.activeCamera);\n      mesh._internalAbstractMeshDataInfo._currentLOD = meshToRender;\n      mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = true;\n\n      if (meshToRender === undefined || meshToRender === null) {\n        continue;\n      } // Compute world matrix if LOD is billboard\n\n\n      if (meshToRender !== mesh && meshToRender.billboardMode !== 0) {\n        meshToRender.computeWorldMatrix();\n      }\n\n      mesh._preActivate();\n\n      if (mesh.isVisible && mesh.visibility > 0 && (mesh.layerMask & this.activeCamera.layerMask) !== 0 && (this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh || mesh.isInFrustum(this._frustumPlanes))) {\n        this._activeMeshes.push(mesh);\n\n        this.activeCamera._activeMeshes.push(mesh);\n\n        if (meshToRender !== mesh) {\n          meshToRender._activate(this._renderId, false);\n        }\n\n        for (const step of this._preActiveMeshStage) {\n          step.action(mesh);\n        }\n\n        if (mesh._activate(this._renderId, false)) {\n          if (!mesh.isAnInstance) {\n            meshToRender._internalAbstractMeshDataInfo._onlyForInstances = false;\n          } else {\n            if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\n              meshToRender = mesh;\n            }\n          }\n\n          meshToRender._internalAbstractMeshDataInfo._isActive = true;\n\n          this._activeMesh(mesh, meshToRender);\n        }\n\n        mesh._postActivate();\n      }\n    }\n\n    this.onAfterActiveMeshesEvaluationObservable.notifyObservers(this); // Particle systems\n\n    if (this.particlesEnabled) {\n      this.onBeforeParticlesRenderingObservable.notifyObservers(this);\n\n      for (let particleIndex = 0; particleIndex < this.particleSystems.length; particleIndex++) {\n        const particleSystem = this.particleSystems[particleIndex];\n\n        if (!particleSystem.isStarted() || !particleSystem.emitter) {\n          continue;\n        }\n\n        const emitter = particleSystem.emitter;\n\n        if (!emitter.position || emitter.isEnabled()) {\n          this._activeParticleSystems.push(particleSystem);\n\n          particleSystem.animate();\n\n          this._renderingManager.dispatchParticles(particleSystem);\n        }\n      }\n\n      this.onAfterParticlesRenderingObservable.notifyObservers(this);\n    }\n  }\n\n  _activeMesh(sourceMesh, mesh) {\n    if (this._skeletonsEnabled && mesh.skeleton !== null && mesh.skeleton !== undefined) {\n      if (this._activeSkeletons.pushNoDuplicate(mesh.skeleton)) {\n        mesh.skeleton.prepare();\n\n        this._activeBones.addCount(mesh.skeleton.bones.length, false);\n      }\n\n      if (!mesh.computeBonesUsingShaders) {\n        this._softwareSkinnedMeshes.pushNoDuplicate(mesh);\n      }\n    }\n\n    let forcePush = sourceMesh.hasInstances || sourceMesh.isAnInstance || this.dispatchAllSubMeshesOfActiveMeshes || this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh;\n\n    if (mesh && mesh.subMeshes && mesh.subMeshes.length > 0) {\n      const subMeshes = this.getActiveSubMeshCandidates(mesh);\n      const len = subMeshes.length;\n      forcePush = forcePush || len === 1;\n\n      for (let i = 0; i < len; i++) {\n        const subMesh = subMeshes.data[i];\n\n        this._evaluateSubMesh(subMesh, mesh, sourceMesh, forcePush);\n      }\n    }\n  }\n  /**\n   * Update the transform matrix to update from the current active camera\n   * @param force defines a boolean used to force the update even if cache is up to date\n   */\n\n\n  updateTransformMatrix(force) {\n    if (!this.activeCamera) {\n      return;\n    }\n\n    if (this.activeCamera._renderingMultiview) {\n      const leftCamera = this.activeCamera._rigCameras[0];\n      const rightCamera = this.activeCamera._rigCameras[1];\n      this.setTransformMatrix(leftCamera.getViewMatrix(), leftCamera.getProjectionMatrix(force), rightCamera.getViewMatrix(), rightCamera.getProjectionMatrix(force));\n    } else {\n      this.setTransformMatrix(this.activeCamera.getViewMatrix(), this.activeCamera.getProjectionMatrix(force));\n    }\n  }\n\n  _bindFrameBuffer(camera, clear = true) {\n    if (camera && camera._multiviewTexture) {\n      camera._multiviewTexture._bindFrameBuffer();\n    } else if (camera && camera.outputRenderTarget) {\n      camera.outputRenderTarget._bindFrameBuffer();\n    } else {\n      if (!this._engine._currentFrameBufferIsDefaultFrameBuffer()) {\n        this._engine.restoreDefaultFramebuffer();\n      }\n    }\n\n    if (clear) {\n      this._clearFrameBuffer(camera);\n    }\n  }\n\n  _clearFrameBuffer(camera) {\n    // we assume the framebuffer currently bound is the right one\n    if (camera && camera._multiviewTexture) {// no clearing?\n    } else if (camera && camera.outputRenderTarget && !camera._renderingMultiview) {\n      const rtt = camera.outputRenderTarget;\n\n      if (rtt.onClearObservable.hasObservers()) {\n        rtt.onClearObservable.notifyObservers(this._engine);\n      } else if (!rtt.skipInitialClear) {\n        if (this.autoClear) {\n          this._engine.clear(rtt.clearColor || this.clearColor, !rtt._cleared, true, true);\n        }\n\n        rtt._cleared = true;\n      }\n    } else {\n      if (!this._defaultFrameBufferCleared) {\n        this._defaultFrameBufferCleared = true;\n\n        this._clear();\n      } else {\n        this._engine.clear(null, false, true, true);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _renderForCamera(camera, rigParent, bindFrameBuffer = true) {\n    var _a, _b, _c;\n\n    if (camera && camera._skipRendering) {\n      return;\n    }\n\n    const engine = this._engine; // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n\n    this._activeCamera = camera;\n\n    if (!this.activeCamera) {\n      throw new Error(\"Active camera not set\");\n    } // Viewport\n\n\n    engine.setViewport(this.activeCamera.viewport); // Camera\n\n    this.resetCachedMaterial();\n    this._renderId++;\n\n    if (!this.prePass && bindFrameBuffer) {\n      let skipInitialClear = true;\n\n      if (camera._renderingMultiview && camera.outputRenderTarget) {\n        skipInitialClear = camera.outputRenderTarget.skipInitialClear;\n\n        if (this.autoClear) {\n          this._defaultFrameBufferCleared = false;\n          camera.outputRenderTarget.skipInitialClear = false;\n        }\n      }\n\n      this._bindFrameBuffer(this._activeCamera);\n\n      if (camera._renderingMultiview && camera.outputRenderTarget) {\n        camera.outputRenderTarget.skipInitialClear = skipInitialClear;\n      }\n    }\n\n    this.updateTransformMatrix();\n    this.onBeforeCameraRenderObservable.notifyObservers(this.activeCamera); // Meshes\n\n    this._evaluateActiveMeshes(); // Software skinning\n\n\n    for (let softwareSkinnedMeshIndex = 0; softwareSkinnedMeshIndex < this._softwareSkinnedMeshes.length; softwareSkinnedMeshIndex++) {\n      const mesh = this._softwareSkinnedMeshes.data[softwareSkinnedMeshIndex];\n      mesh.applySkeleton(mesh.skeleton);\n    } // Render targets\n\n\n    this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n\n    this._renderTargets.concatWithNoDuplicate(this._materialsRenderTargets);\n\n    if (camera.customRenderTargets && camera.customRenderTargets.length > 0) {\n      this._renderTargets.concatWithNoDuplicate(camera.customRenderTargets);\n    }\n\n    if (rigParent && rigParent.customRenderTargets && rigParent.customRenderTargets.length > 0) {\n      this._renderTargets.concatWithNoDuplicate(rigParent.customRenderTargets);\n    }\n\n    if (this.environmentTexture && this.environmentTexture.isRenderTarget) {\n      this._renderTargets.pushNoDuplicate(this.environmentTexture);\n    } // Collects render targets from external components.\n\n\n    for (const step of this._gatherActiveCameraRenderTargetsStage) {\n      step.action(this._renderTargets);\n    }\n\n    let needRebind = false;\n\n    if (this.renderTargetsEnabled) {\n      this._intermediateRendering = true;\n\n      if (this._renderTargets.length > 0) {\n        _tools.Tools.StartPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n\n        for (let renderIndex = 0; renderIndex < this._renderTargets.length; renderIndex++) {\n          const renderTarget = this._renderTargets.data[renderIndex];\n\n          if (renderTarget._shouldRender()) {\n            this._renderId++;\n            const hasSpecialRenderTargetCamera = renderTarget.activeCamera && renderTarget.activeCamera !== this.activeCamera;\n            renderTarget.render(hasSpecialRenderTargetCamera, this.dumpNextRenderTargets);\n            needRebind = true;\n          }\n        }\n\n        _tools.Tools.EndPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\n\n        this._renderId++;\n      }\n\n      for (const step of this._cameraDrawRenderTargetStage) {\n        needRebind = step.action(this.activeCamera) || needRebind;\n      }\n\n      this._intermediateRendering = false;\n    }\n\n    this._engine.currentRenderPassId = (_c = (_b = (_a = camera.outputRenderTarget) === null || _a === void 0 ? void 0 : _a.renderPassId) !== null && _b !== void 0 ? _b : camera.renderPassId) !== null && _c !== void 0 ? _c : 0; // Restore framebuffer after rendering to targets\n\n    if (needRebind && !this.prePass) {\n      this._bindFrameBuffer(this._activeCamera, false);\n    }\n\n    this.onAfterRenderTargetsRenderObservable.notifyObservers(this); // Prepare Frame\n\n    if (this.postProcessManager && !camera._multiviewTexture && !this.prePass) {\n      this.postProcessManager._prepareFrame();\n    } // Before Camera Draw\n\n\n    for (const step of this._beforeCameraDrawStage) {\n      step.action(this.activeCamera);\n    } // Render\n\n\n    this.onBeforeDrawPhaseObservable.notifyObservers(this);\n\n    if (engine.snapshotRendering && engine.snapshotRenderingMode === 1) {\n      this.finalizeSceneUbo();\n    }\n\n    this._renderingManager.render(null, null, true, true);\n\n    this.onAfterDrawPhaseObservable.notifyObservers(this); // After Camera Draw\n\n    for (const step of this._afterCameraDrawStage) {\n      step.action(this.activeCamera);\n    } // Finalize frame\n\n\n    if (this.postProcessManager && !camera._multiviewTexture) {\n      // if the camera has an output render target, render the post process to the render target\n      const texture = camera.outputRenderTarget ? camera.outputRenderTarget.renderTarget : undefined;\n\n      this.postProcessManager._finalizeFrame(camera.isIntermediate, texture);\n    } // After post process\n\n\n    for (const step of this._afterCameraPostProcessStage) {\n      step.action(this.activeCamera);\n    } // Reset some special arrays\n\n\n    this._renderTargets.reset();\n\n    this.onAfterCameraRenderObservable.notifyObservers(this.activeCamera);\n  }\n\n  _processSubCameras(camera, bindFrameBuffer = true) {\n    if (camera.cameraRigMode === 0 || camera._renderingMultiview) {\n      if (camera._renderingMultiview && !this._multiviewSceneUbo) {\n        this._createMultiviewUbo();\n      }\n\n      this._renderForCamera(camera, undefined, bindFrameBuffer);\n\n      this.onAfterRenderCameraObservable.notifyObservers(camera);\n      return;\n    }\n\n    if (camera._useMultiviewToSingleView) {\n      this._renderMultiviewToSingleView(camera);\n    } else {\n      // rig cameras\n      this.onBeforeCameraRenderObservable.notifyObservers(camera);\n\n      for (let index = 0; index < camera._rigCameras.length; index++) {\n        this._renderForCamera(camera._rigCameras[index], camera);\n      }\n    } // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\n\n\n    this._activeCamera = camera;\n    this.updateTransformMatrix();\n    this.onAfterRenderCameraObservable.notifyObservers(camera);\n  }\n\n  _checkIntersections() {\n    for (let index = 0; index < this._meshesForIntersections.length; index++) {\n      const sourceMesh = this._meshesForIntersections.data[index];\n\n      if (!sourceMesh.actionManager) {\n        continue;\n      }\n\n      for (let actionIndex = 0; sourceMesh.actionManager && actionIndex < sourceMesh.actionManager.actions.length; actionIndex++) {\n        const action = sourceMesh.actionManager.actions[actionIndex];\n\n        if (action.trigger === 12 || action.trigger === 13) {\n          const parameters = action.getTriggerParameter();\n          const otherMesh = parameters.mesh ? parameters.mesh : parameters;\n          const areIntersecting = otherMesh.intersectsMesh(sourceMesh, parameters.usePreciseIntersection);\n\n          const currentIntersectionInProgress = sourceMesh._intersectionsInProgress.indexOf(otherMesh);\n\n          if (areIntersecting && currentIntersectionInProgress === -1) {\n            if (action.trigger === 12) {\n              action._executeCurrent(_actionEvent.ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n\n              sourceMesh._intersectionsInProgress.push(otherMesh);\n            } else if (action.trigger === 13) {\n              sourceMesh._intersectionsInProgress.push(otherMesh);\n            }\n          } else if (!areIntersecting && currentIntersectionInProgress > -1) {\n            //They intersected, and now they don't.\n            //is this trigger an exit trigger? execute an event.\n            if (action.trigger === 13) {\n              action._executeCurrent(_actionEvent.ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\n            } //if this is an exit trigger, or no exit trigger exists, remove the id from the intersection in progress array.\n\n\n            if (!sourceMesh.actionManager.hasSpecificTrigger(13, parameter => {\n              const parameterMesh = parameter.mesh ? parameter.mesh : parameter;\n              return otherMesh === parameterMesh;\n            }) || action.trigger === 13) {\n              sourceMesh._intersectionsInProgress.splice(currentIntersectionInProgress, 1);\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _advancePhysicsEngineStep(step) {// Do nothing. Code will be replaced if physics engine component is referenced\n  }\n  /** @internal */\n\n\n  _animate() {// Nothing to do as long as Animatable have not been imported.\n  }\n  /** Execute all animations (for a frame) */\n\n\n  animate() {\n    if (this._engine.isDeterministicLockStep()) {\n      let deltaTime = Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime)) + this._timeAccumulator;\n\n      const defaultFrameTime = this._engine.getTimeStep();\n\n      const defaultFPS = 1000.0 / defaultFrameTime / 1000.0;\n      let stepsTaken = 0;\n\n      const maxSubSteps = this._engine.getLockstepMaxSteps();\n\n      let internalSteps = Math.floor(deltaTime / defaultFrameTime);\n      internalSteps = Math.min(internalSteps, maxSubSteps);\n\n      while (deltaTime > 0 && stepsTaken < internalSteps) {\n        this.onBeforeStepObservable.notifyObservers(this); // Animations\n\n        this._animationRatio = defaultFrameTime * defaultFPS;\n\n        this._animate();\n\n        this.onAfterAnimationsObservable.notifyObservers(this); // Physics\n\n        if (this.physicsEnabled) {\n          this._advancePhysicsEngineStep(defaultFrameTime);\n        }\n\n        this.onAfterStepObservable.notifyObservers(this);\n        this._currentStepId++;\n        stepsTaken++;\n        deltaTime -= defaultFrameTime;\n      }\n\n      this._timeAccumulator = deltaTime < 0 ? 0 : deltaTime;\n    } else {\n      // Animations\n      const deltaTime = this.useConstantAnimationDeltaTime ? 16 : Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime));\n      this._animationRatio = deltaTime * (60.0 / 1000.0);\n\n      this._animate();\n\n      this.onAfterAnimationsObservable.notifyObservers(this); // Physics\n\n      if (this.physicsEnabled) {\n        this._advancePhysicsEngineStep(deltaTime);\n      }\n    }\n  }\n\n  _clear() {\n    if (this.autoClearDepthAndStencil || this.autoClear) {\n      this._engine.clear(this.clearColor, this.autoClear || this.forceWireframe || this.forcePointsCloud, this.autoClearDepthAndStencil, this.autoClearDepthAndStencil);\n    }\n  }\n\n  _checkCameraRenderTarget(camera) {\n    var _a;\n\n    if ((camera === null || camera === void 0 ? void 0 : camera.outputRenderTarget) && !(camera === null || camera === void 0 ? void 0 : camera.isRigCamera)) {\n      camera.outputRenderTarget._cleared = false;\n    }\n\n    if ((_a = camera === null || camera === void 0 ? void 0 : camera.rigCameras) === null || _a === void 0 ? void 0 : _a.length) {\n      for (let i = 0; i < camera.rigCameras.length; ++i) {\n        const rtt = camera.rigCameras[i].outputRenderTarget;\n\n        if (rtt) {\n          rtt._cleared = false;\n        }\n      }\n    }\n  }\n  /**\n   * Resets the draw wrappers cache of all meshes\n   * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\n   */\n\n\n  resetDrawCache(passId) {\n    if (!this.meshes) {\n      return;\n    }\n\n    for (const mesh of this.meshes) {\n      mesh.resetDrawCache(passId);\n    }\n  }\n  /**\n   * Render the scene\n   * @param updateCameras defines a boolean indicating if cameras must update according to their inputs (true by default)\n   * @param ignoreAnimations defines a boolean indicating if animations should not be executed (false by default)\n   */\n\n\n  render(updateCameras = true, ignoreAnimations = false) {\n    var _a, _b, _c;\n\n    if (this.isDisposed) {\n      return;\n    }\n\n    if (this.onReadyObservable.hasObservers() && this._executeWhenReadyTimeoutId === null) {\n      this._checkIsReady();\n    }\n\n    this._frameId++;\n    this._defaultFrameBufferCleared = false;\n\n    this._checkCameraRenderTarget(this.activeCamera);\n\n    if ((_a = this.activeCameras) === null || _a === void 0 ? void 0 : _a.length) {\n      this.activeCameras.forEach(this._checkCameraRenderTarget);\n    } // Register components that have been associated lately to the scene.\n\n\n    this._registerTransientComponents();\n\n    this._activeParticles.fetchNewFrame();\n\n    this._totalVertices.fetchNewFrame();\n\n    this._activeIndices.fetchNewFrame();\n\n    this._activeBones.fetchNewFrame();\n\n    this._meshesForIntersections.reset();\n\n    this.resetCachedMaterial();\n    this.onBeforeAnimationsObservable.notifyObservers(this); // Actions\n\n    if (this.actionManager) {\n      this.actionManager.processTrigger(11);\n    } // Animations\n\n\n    if (!ignoreAnimations) {\n      this.animate();\n    } // Before camera update steps\n\n\n    for (const step of this._beforeCameraUpdateStage) {\n      step.action();\n    } // Update Cameras\n\n\n    if (updateCameras) {\n      if (this.activeCameras && this.activeCameras.length > 0) {\n        for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n          const camera = this.activeCameras[cameraIndex];\n          camera.update();\n\n          if (camera.cameraRigMode !== 0) {\n            // rig cameras\n            for (let index = 0; index < camera._rigCameras.length; index++) {\n              camera._rigCameras[index].update();\n            }\n          }\n        }\n      } else if (this.activeCamera) {\n        this.activeCamera.update();\n\n        if (this.activeCamera.cameraRigMode !== 0) {\n          // rig cameras\n          for (let index = 0; index < this.activeCamera._rigCameras.length; index++) {\n            this.activeCamera._rigCameras[index].update();\n          }\n        }\n      }\n    } // Before render\n\n\n    this.onBeforeRenderObservable.notifyObservers(this);\n    const engine = this.getEngine(); // Customs render targets\n\n    this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\n    const currentActiveCamera = ((_b = this.activeCameras) === null || _b === void 0 ? void 0 : _b.length) ? this.activeCameras[0] : this.activeCamera;\n\n    if (this.renderTargetsEnabled) {\n      _tools.Tools.StartPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n\n      this._intermediateRendering = true;\n\n      for (let customIndex = 0; customIndex < this.customRenderTargets.length; customIndex++) {\n        const renderTarget = this.customRenderTargets[customIndex];\n\n        if (renderTarget._shouldRender()) {\n          this._renderId++;\n          this.activeCamera = renderTarget.activeCamera || this.activeCamera;\n\n          if (!this.activeCamera) {\n            throw new Error(\"Active camera not set\");\n          } // Viewport\n\n\n          engine.setViewport(this.activeCamera.viewport); // Camera\n\n          this.updateTransformMatrix();\n          renderTarget.render(currentActiveCamera !== this.activeCamera, this.dumpNextRenderTargets);\n        }\n      }\n\n      _tools.Tools.EndPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\n\n      this._intermediateRendering = false;\n      this._renderId++;\n    }\n\n    this._engine.currentRenderPassId = (_c = currentActiveCamera === null || currentActiveCamera === void 0 ? void 0 : currentActiveCamera.renderPassId) !== null && _c !== void 0 ? _c : 0; // Restore back buffer\n\n    this.activeCamera = currentActiveCamera;\n\n    if (this._activeCamera && this._activeCamera.cameraRigMode !== 22 && !this.prePass) {\n      this._bindFrameBuffer(this._activeCamera, false);\n    }\n\n    this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\n\n    for (const step of this._beforeClearStage) {\n      step.action();\n    } // Clear\n\n\n    this._clearFrameBuffer(this.activeCamera); // Collects render targets from external components.\n\n\n    for (const step of this._gatherRenderTargetsStage) {\n      step.action(this._renderTargets);\n    } // Multi-cameras?\n\n\n    if (this.activeCameras && this.activeCameras.length > 0) {\n      for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\n        this._processSubCameras(this.activeCameras[cameraIndex], cameraIndex > 0);\n      }\n    } else {\n      if (!this.activeCamera) {\n        throw new Error(\"No camera defined\");\n      }\n\n      this._processSubCameras(this.activeCamera, !!this.activeCamera.outputRenderTarget);\n    } // Intersection checks\n\n\n    this._checkIntersections(); // Executes the after render stage actions.\n\n\n    for (const step of this._afterRenderStage) {\n      step.action();\n    } // After render\n\n\n    if (this.afterRender) {\n      this.afterRender();\n    }\n\n    this.onAfterRenderObservable.notifyObservers(this); // Cleaning\n\n    if (this._toBeDisposed.length) {\n      for (let index = 0; index < this._toBeDisposed.length; index++) {\n        const data = this._toBeDisposed[index];\n\n        if (data) {\n          data.dispose();\n        }\n      }\n\n      this._toBeDisposed.length = 0;\n    }\n\n    if (this.dumpNextRenderTargets) {\n      this.dumpNextRenderTargets = false;\n    }\n\n    this._activeBones.addCount(0, true);\n\n    this._activeIndices.addCount(0, true);\n\n    this._activeParticles.addCount(0, true);\n\n    this._engine.restoreDefaultFramebuffer();\n  }\n  /**\n   * Freeze all materials\n   * A frozen material will not be updatable but should be faster to render\n   * Note: multimaterials will not be frozen, but their submaterials will\n   */\n\n\n  freezeMaterials() {\n    for (let i = 0; i < this.materials.length; i++) {\n      this.materials[i].freeze();\n    }\n  }\n  /**\n   * Unfreeze all materials\n   * A frozen material will not be updatable but should be faster to render\n   */\n\n\n  unfreezeMaterials() {\n    for (let i = 0; i < this.materials.length; i++) {\n      this.materials[i].unfreeze();\n    }\n  }\n  /**\n   * Releases all held resources\n   */\n\n\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n\n    this.beforeRender = null;\n    this.afterRender = null;\n    this.metadata = null;\n    this.skeletons.length = 0;\n    this.morphTargetManagers.length = 0;\n    this._transientComponents.length = 0;\n\n    this._isReadyForMeshStage.clear();\n\n    this._beforeEvaluateActiveMeshStage.clear();\n\n    this._evaluateSubMeshStage.clear();\n\n    this._preActiveMeshStage.clear();\n\n    this._cameraDrawRenderTargetStage.clear();\n\n    this._beforeCameraDrawStage.clear();\n\n    this._beforeRenderTargetDrawStage.clear();\n\n    this._beforeRenderingGroupDrawStage.clear();\n\n    this._beforeRenderingMeshStage.clear();\n\n    this._afterRenderingMeshStage.clear();\n\n    this._afterRenderingGroupDrawStage.clear();\n\n    this._afterCameraDrawStage.clear();\n\n    this._afterRenderTargetDrawStage.clear();\n\n    this._afterRenderStage.clear();\n\n    this._beforeCameraUpdateStage.clear();\n\n    this._beforeClearStage.clear();\n\n    this._gatherRenderTargetsStage.clear();\n\n    this._gatherActiveCameraRenderTargetsStage.clear();\n\n    this._pointerMoveStage.clear();\n\n    this._pointerDownStage.clear();\n\n    this._pointerUpStage.clear();\n\n    this.importedMeshesFiles = new Array();\n\n    if (this.stopAllAnimations) {\n      this.stopAllAnimations();\n    }\n\n    this.resetCachedMaterial(); // Smart arrays\n\n    if (this.activeCamera) {\n      this.activeCamera._activeMeshes.dispose();\n\n      this.activeCamera = null;\n    }\n\n    this.activeCameras = null;\n\n    this._activeMeshes.dispose();\n\n    this._renderingManager.dispose();\n\n    this._processedMaterials.dispose();\n\n    this._activeParticleSystems.dispose();\n\n    this._activeSkeletons.dispose();\n\n    this._softwareSkinnedMeshes.dispose();\n\n    this._renderTargets.dispose();\n\n    this._materialsRenderTargets.dispose();\n\n    this._registeredForLateAnimationBindings.dispose();\n\n    this._meshesForIntersections.dispose();\n\n    this._toBeDisposed.length = 0; // Abort active requests\n\n    const activeRequests = this._activeRequests.slice();\n\n    for (const request of activeRequests) {\n      request.abort();\n    }\n\n    this._activeRequests.length = 0; // Events\n\n    try {\n      this.onDisposeObservable.notifyObservers(this);\n    } catch (e) {\n      console.error(\"An error occurred while calling onDisposeObservable!\", e);\n    }\n\n    this.detachControl(); // Detach cameras\n\n    const canvas = this._engine.getInputElement();\n\n    if (canvas) {\n      for (let index = 0; index < this.cameras.length; index++) {\n        this.cameras[index].detachControl();\n      }\n    } // Release animation groups\n\n\n    this._disposeList(this.animationGroups); // Release lights\n\n\n    this._disposeList(this.lights); // Release meshes\n\n\n    this._disposeList(this.meshes, item => item.dispose(true));\n\n    this._disposeList(this.transformNodes, item => item.dispose(true)); // Release cameras\n\n\n    const cameras = this.cameras;\n\n    this._disposeList(cameras); // Release materials\n\n\n    if (this._defaultMaterial) {\n      this._defaultMaterial.dispose();\n    }\n\n    this._disposeList(this.multiMaterials);\n\n    this._disposeList(this.materials); // Release particles\n\n\n    this._disposeList(this.particleSystems); // Release postProcesses\n\n\n    this._disposeList(this.postProcesses); // Release textures\n\n\n    this._disposeList(this.textures); // Release morph targets\n\n\n    this._disposeList(this.morphTargetManagers); // Release UBO\n\n\n    this._sceneUbo.dispose();\n\n    if (this._multiviewSceneUbo) {\n      this._multiviewSceneUbo.dispose();\n    } // Post-processes\n\n\n    this.postProcessManager.dispose(); // Components\n\n    this._disposeList(this._components); // Remove from engine\n\n\n    let index = this._engine.scenes.indexOf(this);\n\n    if (index > -1) {\n      this._engine.scenes.splice(index, 1);\n    }\n\n    if (_engineStore.EngineStore._LastCreatedScene === this) {\n      if (this._engine.scenes.length > 0) {\n        _engineStore.EngineStore._LastCreatedScene = this._engine.scenes[this._engine.scenes.length - 1];\n      } else {\n        _engineStore.EngineStore._LastCreatedScene = null;\n      }\n    }\n\n    index = this._engine._virtualScenes.indexOf(this);\n\n    if (index > -1) {\n      this._engine._virtualScenes.splice(index, 1);\n    }\n\n    this._engine.wipeCaches(true);\n\n    this.onDisposeObservable.clear();\n    this.onBeforeRenderObservable.clear();\n    this.onAfterRenderObservable.clear();\n    this.onBeforeRenderTargetsRenderObservable.clear();\n    this.onAfterRenderTargetsRenderObservable.clear();\n    this.onAfterStepObservable.clear();\n    this.onBeforeStepObservable.clear();\n    this.onBeforeActiveMeshesEvaluationObservable.clear();\n    this.onAfterActiveMeshesEvaluationObservable.clear();\n    this.onBeforeParticlesRenderingObservable.clear();\n    this.onAfterParticlesRenderingObservable.clear();\n    this.onBeforeDrawPhaseObservable.clear();\n    this.onAfterDrawPhaseObservable.clear();\n    this.onBeforeAnimationsObservable.clear();\n    this.onAfterAnimationsObservable.clear();\n    this.onDataLoadedObservable.clear();\n    this.onBeforeRenderingGroupObservable.clear();\n    this.onAfterRenderingGroupObservable.clear();\n    this.onMeshImportedObservable.clear();\n    this.onBeforeCameraRenderObservable.clear();\n    this.onAfterCameraRenderObservable.clear();\n    this.onAfterRenderCameraObservable.clear();\n    this.onReadyObservable.clear();\n    this.onNewCameraAddedObservable.clear();\n    this.onCameraRemovedObservable.clear();\n    this.onNewLightAddedObservable.clear();\n    this.onLightRemovedObservable.clear();\n    this.onNewGeometryAddedObservable.clear();\n    this.onGeometryRemovedObservable.clear();\n    this.onNewTransformNodeAddedObservable.clear();\n    this.onTransformNodeRemovedObservable.clear();\n    this.onNewMeshAddedObservable.clear();\n    this.onMeshRemovedObservable.clear();\n    this.onNewSkeletonAddedObservable.clear();\n    this.onSkeletonRemovedObservable.clear();\n    this.onNewMaterialAddedObservable.clear();\n    this.onNewMultiMaterialAddedObservable.clear();\n    this.onMaterialRemovedObservable.clear();\n    this.onMultiMaterialRemovedObservable.clear();\n    this.onNewTextureAddedObservable.clear();\n    this.onTextureRemovedObservable.clear();\n    this.onPrePointerObservable.clear();\n    this.onPointerObservable.clear();\n    this.onPreKeyboardObservable.clear();\n    this.onKeyboardObservable.clear();\n    this.onActiveCameraChanged.clear();\n    this.onScenePerformancePriorityChangedObservable.clear();\n    this._isDisposed = true;\n  }\n\n  _disposeList(items, callback) {\n    const itemsCopy = items.slice(0);\n    callback = callback !== null && callback !== void 0 ? callback : item => item.dispose();\n\n    for (const item of itemsCopy) {\n      callback(item);\n    }\n\n    items.length = 0;\n  }\n  /**\n   * Gets if the scene is already disposed\n   */\n\n\n  get isDisposed() {\n    return this._isDisposed;\n  }\n  /**\n   * Call this function to reduce memory footprint of the scene.\n   * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\n   */\n\n\n  clearCachedVertexData() {\n    for (let meshIndex = 0; meshIndex < this.meshes.length; meshIndex++) {\n      const mesh = this.meshes[meshIndex];\n      const geometry = mesh.geometry;\n\n      if (geometry) {\n        geometry.clearCachedData();\n      }\n    }\n  }\n  /**\n   * This function will remove the local cached buffer data from texture.\n   * It will save memory but will prevent the texture from being rebuilt\n   */\n\n\n  cleanCachedTextureBuffer() {\n    for (const baseTexture of this.textures) {\n      const buffer = baseTexture._buffer;\n\n      if (buffer) {\n        baseTexture._buffer = null;\n      }\n    }\n  }\n  /**\n   * Get the world extend vectors with an optional filter\n   *\n   * @param filterPredicate the predicate - which meshes should be included when calculating the world size\n   * @returns {{ min: Vector3; max: Vector3 }} min and max vectors\n   */\n\n\n  getWorldExtends(filterPredicate) {\n    const min = new _mathVector.Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    const max = new _mathVector.Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    filterPredicate = filterPredicate || (() => true);\n\n    this.meshes.filter(filterPredicate).forEach(mesh => {\n      mesh.computeWorldMatrix(true);\n\n      if (!mesh.subMeshes || mesh.subMeshes.length === 0 || mesh.infiniteDistance) {\n        return;\n      }\n\n      const boundingInfo = mesh.getBoundingInfo();\n      const minBox = boundingInfo.boundingBox.minimumWorld;\n      const maxBox = boundingInfo.boundingBox.maximumWorld;\n\n      _mathVector.Vector3.CheckExtends(minBox, min, max);\n\n      _mathVector.Vector3.CheckExtends(maxBox, min, max);\n    });\n    return {\n      min: min,\n      max: max\n    };\n  } // Picking\n\n  /**\n   * Creates a ray that can be used to pick in the scene\n   * @param x defines the x coordinate of the origin (on-screen)\n   * @param y defines the y coordinate of the origin (on-screen)\n   * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n   * @param camera defines the camera to use for the picking\n   * @param cameraViewSpace defines if picking will be done in view space (false by default)\n   * @returns a Ray\n   */\n\n\n  createPickingRay(x, y, world, camera, cameraViewSpace = false) {\n    throw (0, _devTools._WarnImport)(\"Ray\");\n  }\n  /**\n   * Creates a ray that can be used to pick in the scene\n   * @param x defines the x coordinate of the origin (on-screen)\n   * @param y defines the y coordinate of the origin (on-screen)\n   * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\n   * @param result defines the ray where to store the picking ray\n   * @param camera defines the camera to use for the picking\n   * @param cameraViewSpace defines if picking will be done in view space (false by default)\n   * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\n   * @returns the current scene\n   */\n\n\n  createPickingRayToRef(x, y, world, result, camera, cameraViewSpace = false, enableDistantPicking = false) {\n    throw (0, _devTools._WarnImport)(\"Ray\");\n  }\n  /**\n   * Creates a ray that can be used to pick in the scene\n   * @param x defines the x coordinate of the origin (on-screen)\n   * @param y defines the y coordinate of the origin (on-screen)\n   * @param camera defines the camera to use for the picking\n   * @returns a Ray\n   */\n\n\n  createPickingRayInCameraSpace(x, y, camera) {\n    throw (0, _devTools._WarnImport)(\"Ray\");\n  }\n  /**\n   * Creates a ray that can be used to pick in the scene\n   * @param x defines the x coordinate of the origin (on-screen)\n   * @param y defines the y coordinate of the origin (on-screen)\n   * @param result defines the ray where to store the picking ray\n   * @param camera defines the camera to use for the picking\n   * @returns the current scene\n   */\n\n\n  createPickingRayInCameraSpaceToRef(x, y, result, camera) {\n    throw (0, _devTools._WarnImport)(\"Ray\");\n  }\n  /** @internal */\n\n\n  get _pickingAvailable() {\n    return false;\n  }\n  /** Launch a ray to try to pick a mesh in the scene\n   * @param x position on screen\n   * @param y position on screen\n   * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n   * @param fastCheck defines if the first intersection will be used (and not the closest)\n   * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n   * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n   * @returns a PickingInfo\n   */\n\n\n  pick(x, y, predicate, fastCheck, camera, trianglePredicate) {\n    // Dummy info if picking as not been imported\n    return new _pickingInfo.PickingInfo();\n  }\n  /** Launch a ray to try to pick a mesh in the scene using only bounding information of the main mesh (not using submeshes)\n   * @param x position on screen\n   * @param y position on screen\n   * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n   * @param fastCheck defines if the first intersection will be used (and not the closest)\n   * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n   * @returns a PickingInfo (Please note that some info will not be set like distance, bv, bu and everything that cannot be capture by only using bounding infos)\n   */\n\n\n  pickWithBoundingInfo(x, y, predicate, fastCheck, camera) {\n    // Dummy info if picking as not been imported\n    return new _pickingInfo.PickingInfo();\n  }\n  /**\n   * Use the given ray to pick a mesh in the scene. A mesh triangle can be picked both from its front and back sides,\n   * irrespective of orientation.\n   * @param ray The ray to use to pick meshes\n   * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must have isPickable set to true\n   * @param fastCheck defines if the first intersection will be used (and not the closest)\n   * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n   * @returns a PickingInfo\n   */\n\n\n  pickWithRay(ray, predicate, fastCheck, trianglePredicate) {\n    throw (0, _devTools._WarnImport)(\"Ray\");\n  }\n  /**\n   * Launch a ray to try to pick a mesh in the scene. A mesh triangle can be picked both from its front and back sides,\n   * irrespective of orientation.\n   * @param x X position on screen\n   * @param y Y position on screen\n   * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n   * @param camera camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\n   * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n   * @returns an array of PickingInfo\n   */\n\n\n  multiPick(x, y, predicate, camera, trianglePredicate) {\n    throw (0, _devTools._WarnImport)(\"Ray\");\n  }\n  /**\n   * Launch a ray to try to pick a mesh in the scene\n   * @param ray Ray to use\n   * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true\n   * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\n   * @returns an array of PickingInfo\n   */\n\n\n  multiPickWithRay(ray, predicate, trianglePredicate) {\n    throw (0, _devTools._WarnImport)(\"Ray\");\n  }\n  /**\n   * Force the value of meshUnderPointer\n   * @param mesh defines the mesh to use\n   * @param pointerId optional pointer id when using more than one pointer\n   * @param pickResult optional pickingInfo data used to find mesh\n   */\n\n\n  setPointerOverMesh(mesh, pointerId, pickResult) {\n    this._inputManager.setPointerOverMesh(mesh, pointerId, pickResult);\n  }\n  /**\n   * Gets the mesh under the pointer\n   * @returns a Mesh or null if no mesh is under the pointer\n   */\n\n\n  getPointerOverMesh() {\n    return this._inputManager.getPointerOverMesh();\n  } // Misc.\n\n  /** @internal */\n\n\n  _rebuildGeometries() {\n    for (const geometry of this.geometries) {\n      geometry._rebuild();\n    }\n\n    for (const mesh of this.meshes) {\n      mesh._rebuild();\n    }\n\n    if (this.postProcessManager) {\n      this.postProcessManager._rebuild();\n    }\n\n    for (const component of this._components) {\n      component.rebuild();\n    }\n\n    for (const system of this.particleSystems) {\n      system.rebuild();\n    }\n\n    if (this.spriteManagers) {\n      for (const spriteMgr of this.spriteManagers) {\n        spriteMgr.rebuild();\n      }\n    }\n  }\n  /** @internal */\n\n\n  _rebuildTextures() {\n    for (const texture of this.textures) {\n      texture._rebuild();\n    }\n\n    this.markAllMaterialsAsDirty(1);\n  } // Tags\n\n\n  _getByTags(list, tagsQuery, forEach) {\n    if (tagsQuery === undefined) {\n      // returns the complete list (could be done with Tags.MatchesQuery but no need to have a for-loop here)\n      return list;\n    }\n\n    const listByTags = [];\n\n    forEach = forEach || (item => {\n      return;\n    });\n\n    for (const i in list) {\n      const item = list[i];\n\n      if (_tags.Tags && _tags.Tags.MatchesQuery(item, tagsQuery)) {\n        listByTags.push(item);\n        forEach(item);\n      }\n    }\n\n    return listByTags;\n  }\n  /**\n   * Get a list of meshes by tags\n   * @param tagsQuery defines the tags query to use\n   * @param forEach defines a predicate used to filter results\n   * @returns an array of Mesh\n   */\n\n\n  getMeshesByTags(tagsQuery, forEach) {\n    return this._getByTags(this.meshes, tagsQuery, forEach);\n  }\n  /**\n   * Get a list of cameras by tags\n   * @param tagsQuery defines the tags query to use\n   * @param forEach defines a predicate used to filter results\n   * @returns an array of Camera\n   */\n\n\n  getCamerasByTags(tagsQuery, forEach) {\n    return this._getByTags(this.cameras, tagsQuery, forEach);\n  }\n  /**\n   * Get a list of lights by tags\n   * @param tagsQuery defines the tags query to use\n   * @param forEach defines a predicate used to filter results\n   * @returns an array of Light\n   */\n\n\n  getLightsByTags(tagsQuery, forEach) {\n    return this._getByTags(this.lights, tagsQuery, forEach);\n  }\n  /**\n   * Get a list of materials by tags\n   * @param tagsQuery defines the tags query to use\n   * @param forEach defines a predicate used to filter results\n   * @returns an array of Material\n   */\n\n\n  getMaterialByTags(tagsQuery, forEach) {\n    return this._getByTags(this.materials, tagsQuery, forEach).concat(this._getByTags(this.multiMaterials, tagsQuery, forEach));\n  }\n  /**\n   * Get a list of transform nodes by tags\n   * @param tagsQuery defines the tags query to use\n   * @param forEach defines a predicate used to filter results\n   * @returns an array of TransformNode\n   */\n\n\n  getTransformNodesByTags(tagsQuery, forEach) {\n    return this._getByTags(this.transformNodes, tagsQuery, forEach);\n  }\n  /**\n   * Overrides the default sort function applied in the rendering group to prepare the meshes.\n   * This allowed control for front to back rendering or reversly depending of the special needs.\n   *\n   * @param renderingGroupId The rendering group id corresponding to its index\n   * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\n   * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\n   * @param transparentSortCompareFn The transparent queue comparison function use to sort.\n   */\n\n\n  setRenderingOrder(renderingGroupId, opaqueSortCompareFn = null, alphaTestSortCompareFn = null, transparentSortCompareFn = null) {\n    this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\n  }\n  /**\n   * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\n   *\n   * @param renderingGroupId The rendering group id corresponding to its index\n   * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\n   * @param depth Automatically clears depth between groups if true and autoClear is true.\n   * @param stencil Automatically clears stencil between groups if true and autoClear is true.\n   */\n\n\n  setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth = true, stencil = true) {\n    this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth, stencil);\n  }\n  /**\n   * Gets the current auto clear configuration for one rendering group of the rendering\n   * manager.\n   * @param index the rendering group index to get the information for\n   * @returns The auto clear setup for the requested rendering group\n   */\n\n\n  getAutoClearDepthStencilSetup(index) {\n    return this._renderingManager.getAutoClearDepthStencilSetup(index);\n  }\n  /** Gets or sets a boolean blocking all the calls to markAllMaterialsAsDirty (ie. the materials won't be updated if they are out of sync) */\n\n\n  get blockMaterialDirtyMechanism() {\n    return this._blockMaterialDirtyMechanism;\n  }\n\n  set blockMaterialDirtyMechanism(value) {\n    if (this._blockMaterialDirtyMechanism === value) {\n      return;\n    }\n\n    this._blockMaterialDirtyMechanism = value;\n\n    if (!value) {\n      // Do a complete update\n      this.markAllMaterialsAsDirty(63);\n    }\n  }\n  /**\n   * Will flag all materials as dirty to trigger new shader compilation\n   * @param flag defines the flag used to specify which material part must be marked as dirty\n   * @param predicate If not null, it will be used to specify if a material has to be marked as dirty\n   */\n\n\n  markAllMaterialsAsDirty(flag, predicate) {\n    if (this._blockMaterialDirtyMechanism) {\n      return;\n    }\n\n    for (const material of this.materials) {\n      if (predicate && !predicate(material)) {\n        continue;\n      }\n\n      material.markAsDirty(flag);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _loadFile(fileOrUrl, onSuccess, onProgress, useOfflineSupport, useArrayBuffer, onError, onOpened) {\n    const request = (0, _fileTools.LoadFile)(fileOrUrl, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n\n    this._activeRequests.push(request);\n\n    request.onCompleteObservable.add(request => {\n      this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n    });\n    return request;\n  }\n  /**\n   * @internal\n   */\n\n\n  _loadFileAsync(fileOrUrl, onProgress, useOfflineSupport, useArrayBuffer, onOpened) {\n    return new Promise((resolve, reject) => {\n      this._loadFile(fileOrUrl, data => {\n        resolve(data);\n      }, onProgress, useOfflineSupport, useArrayBuffer, (request, exception) => {\n        reject(exception);\n      }, onOpened);\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _requestFile(url, onSuccess, onProgress, useOfflineSupport, useArrayBuffer, onError, onOpened) {\n    const request = (0, _fileTools.RequestFile)(url, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\n\n    this._activeRequests.push(request);\n\n    request.onCompleteObservable.add(request => {\n      this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n    });\n    return request;\n  }\n  /**\n   * @internal\n   */\n\n\n  _requestFileAsync(url, onProgress, useOfflineSupport, useArrayBuffer, onOpened) {\n    return new Promise((resolve, reject) => {\n      this._requestFile(url, data => {\n        resolve(data);\n      }, onProgress, useOfflineSupport, useArrayBuffer, error => {\n        reject(error);\n      }, onOpened);\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _readFile(file, onSuccess, onProgress, useArrayBuffer, onError) {\n    const request = (0, _fileTools.ReadFile)(file, onSuccess, onProgress, useArrayBuffer, onError);\n\n    this._activeRequests.push(request);\n\n    request.onCompleteObservable.add(request => {\n      this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\n    });\n    return request;\n  }\n  /**\n   * @internal\n   */\n\n\n  _readFileAsync(file, onProgress, useArrayBuffer) {\n    return new Promise((resolve, reject) => {\n      this._readFile(file, data => {\n        resolve(data);\n      }, onProgress, useArrayBuffer, error => {\n        reject(error);\n      });\n    });\n  }\n  /**\n   * This method gets the performance collector belonging to the scene, which is generally shared with the inspector.\n   * @returns the perf collector belonging to the scene.\n   */\n\n\n  getPerfCollector() {\n    throw (0, _devTools._WarnImport)(\"performanceViewerSceneExtension\");\n  } // deprecated\n\n  /**\n   * Sets the active camera of the scene using its Id\n   * @param id defines the camera's Id\n   * @returns the new active camera or null if none found.\n   * @deprecated Please use setActiveCameraById instead\n   */\n\n\n  setActiveCameraByID(id) {\n    return this.setActiveCameraById(id);\n  }\n  /**\n   * Get a material using its id\n   * @param id defines the material's Id\n   * @returns the material or null if none found.\n   * @deprecated Please use getMaterialById instead\n   */\n\n\n  getMaterialByID(id) {\n    return this.getMaterialById(id);\n  }\n  /**\n   * Gets a the last added material using a given id\n   * @param id defines the material's Id\n   * @returns the last material with the given id or null if none found.\n   * @deprecated Please use getLastMaterialById instead\n   */\n\n\n  getLastMaterialByID(id) {\n    return this.getLastMaterialById(id);\n  }\n  /**\n   * Get a texture using its unique id\n   * @param uniqueId defines the texture's unique id\n   * @returns the texture or null if none found.\n   * @deprecated Please use getTextureByUniqueId instead\n   */\n\n\n  getTextureByUniqueID(uniqueId) {\n    return this.getTextureByUniqueId(uniqueId);\n  }\n  /**\n   * Gets a camera using its Id\n   * @param id defines the Id to look for\n   * @returns the camera or null if not found\n   * @deprecated Please use getCameraById instead\n   */\n\n\n  getCameraByID(id) {\n    return this.getCameraById(id);\n  }\n  /**\n   * Gets a camera using its unique Id\n   * @param uniqueId defines the unique Id to look for\n   * @returns the camera or null if not found\n   * @deprecated Please use getCameraByUniqueId instead\n   */\n\n\n  getCameraByUniqueID(uniqueId) {\n    return this.getCameraByUniqueId(uniqueId);\n  }\n  /**\n   * Gets a bone using its Id\n   * @param id defines the bone's Id\n   * @returns the bone or null if not found\n   * @deprecated Please use getBoneById instead\n   */\n\n\n  getBoneByID(id) {\n    return this.getBoneById(id);\n  }\n  /**\n   * Gets a light node using its Id\n   * @param id defines the light's Id\n   * @returns the light or null if none found.\n   * @deprecated Please use getLightById instead\n   */\n\n\n  getLightByID(id) {\n    return this.getLightById(id);\n  }\n  /**\n   * Gets a light node using its scene-generated unique Id\n   * @param uniqueId defines the light's unique Id\n   * @returns the light or null if none found.\n   * @deprecated Please use getLightByUniqueId instead\n   */\n\n\n  getLightByUniqueID(uniqueId) {\n    return this.getLightByUniqueId(uniqueId);\n  }\n  /**\n   * Gets a particle system by Id\n   * @param id defines the particle system Id\n   * @returns the corresponding system or null if none found\n   * @deprecated Please use getParticleSystemById instead\n   */\n\n\n  getParticleSystemByID(id) {\n    return this.getParticleSystemById(id);\n  }\n  /**\n   * Gets a geometry using its Id\n   * @param id defines the geometry's Id\n   * @returns the geometry or null if none found.\n   * @deprecated Please use getGeometryById instead\n   */\n\n\n  getGeometryByID(id) {\n    return this.getGeometryById(id);\n  }\n  /**\n   * Gets the first added mesh found of a given Id\n   * @param id defines the Id to search for\n   * @returns the mesh found or null if not found at all\n   * @deprecated Please use getMeshById instead\n   */\n\n\n  getMeshByID(id) {\n    return this.getMeshById(id);\n  }\n  /**\n   * Gets a mesh with its auto-generated unique Id\n   * @param uniqueId defines the unique Id to search for\n   * @returns the found mesh or null if not found at all.\n   * @deprecated Please use getMeshByUniqueId instead\n   */\n\n\n  getMeshByUniqueID(uniqueId) {\n    return this.getMeshByUniqueId(uniqueId);\n  }\n  /**\n   * Gets a the last added mesh using a given Id\n   * @param id defines the Id to search for\n   * @returns the found mesh or null if not found at all.\n   * @deprecated Please use getLastMeshById instead\n   */\n\n\n  getLastMeshByID(id) {\n    return this.getLastMeshById(id);\n  }\n  /**\n   * Gets a list of meshes using their Id\n   * @param id defines the Id to search for\n   * @returns a list of meshes\n   * @deprecated Please use getMeshesById instead\n   */\n\n\n  getMeshesByID(id) {\n    return this.getMeshesById(id);\n  }\n  /**\n   * Gets the first added transform node found of a given Id\n   * @param id defines the Id to search for\n   * @returns the found transform node or null if not found at all.\n   * @deprecated Please use getTransformNodeById instead\n   */\n\n\n  getTransformNodeByID(id) {\n    return this.getTransformNodeById(id);\n  }\n  /**\n   * Gets a transform node with its auto-generated unique Id\n   * @param uniqueId defines the unique Id to search for\n   * @returns the found transform node or null if not found at all.\n   * @deprecated Please use getTransformNodeByUniqueId instead\n   */\n\n\n  getTransformNodeByUniqueID(uniqueId) {\n    return this.getTransformNodeByUniqueId(uniqueId);\n  }\n  /**\n   * Gets a list of transform nodes using their Id\n   * @param id defines the Id to search for\n   * @returns a list of transform nodes\n   * @deprecated Please use getTransformNodesById instead\n   */\n\n\n  getTransformNodesByID(id) {\n    return this.getTransformNodesById(id);\n  }\n  /**\n   * Gets a node (Mesh, Camera, Light) using a given Id\n   * @param id defines the Id to search for\n   * @returns the found node or null if not found at all\n   * @deprecated Please use getNodeById instead\n   */\n\n\n  getNodeByID(id) {\n    return this.getNodeById(id);\n  }\n  /**\n   * Gets a the last added node (Mesh, Camera, Light) using a given Id\n   * @param id defines the Id to search for\n   * @returns the found node or null if not found at all\n   * @deprecated Please use getLastEntryById instead\n   */\n\n\n  getLastEntryByID(id) {\n    return this.getLastEntryById(id);\n  }\n  /**\n   * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\n   * @param id defines the Id to search for\n   * @returns the found skeleton or null if not found at all.\n   * @deprecated Please use getLastSkeletonById instead\n   */\n\n\n  getLastSkeletonByID(id) {\n    return this.getLastSkeletonById(id);\n  }\n\n}\n/** The fog is deactivated */\n\n\nexports.Scene = Scene;\nScene.FOGMODE_NONE = 0;\n/** The fog density is following an exponential function */\n\nScene.FOGMODE_EXP = 1;\n/** The fog density is following an exponential function faster than FOGMODE_EXP */\n\nScene.FOGMODE_EXP2 = 2;\n/** The fog density is following a linear function. */\n\nScene.FOGMODE_LINEAR = 3;\n/**\n * Gets or sets the minimum deltatime when deterministic lock step is enabled\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n */\n\nScene.MinDeltaTime = 1.0;\n/**\n * Gets or sets the maximum deltatime when deterministic lock step is enabled\n * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\n */\n\nScene.MaxDeltaTime = 1000.0;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Scene","ScenePerformancePriority","_tools","_precisionDate","_observable","_smartArray","_stringDictionary","_tags","_mathVector","_abstractScene","_imageProcessingConfiguration","_uniformBuffer","_pickingInfo","_actionEvent","_postProcessManager","_renderingManager","_sceneComponent","_domManagement","_engineStore","_devTools","_sceneInputManager","_perfCounter","_mathColor","_mathFrustum","_uniqueIdGenerator","_fileTools","_lightConstants","_arrayTools","_pointerPickingConfiguration","AbstractScene","DefaultMaterialFactory","scene","_WarnImport","CollisionCoordinatorFactory","_environmentTexture","markAllMaterialsAsDirty","_performancePriority","BackwardCompatible","skipFrustumClipping","skipPointerMovePicking","maintainStateBetweenFrames","autoClear","Intermediate","Aggressive","onScenePerformancePriorityChangedObservable","notifyObservers","_forceWireframe","_skipFrustumClipping","_forcePointsCloud","_animationPropertiesOverride","callback","_onDisposeObserver","onDisposeObservable","remove","add","_onBeforeRenderObserver","onBeforeRenderObservable","_onAfterRenderObserver","onAfterRenderObservable","_onBeforeCameraRenderObserver","onBeforeCameraRenderObservable","_onAfterCameraRenderObserver","onAfterCameraRenderObservable","pointerDownPredicate","pointerUpPredicate","pointerMovePredicate","pointerDownFastCheck","pointerUpFastCheck","pointerMoveFastCheck","skipPointerDownPicking","skipPointerUpPicking","_inputManager","unTranslatedPointer","InputManager","DragMovementThreshold","LongPressDelay","DoubleClickDelay","ExclusiveDoubleClickMode","bindEyePosition","effect","variableName","isVector3","_a","eyePosition","_forcedViewPosition","_mirroredCameraPosition","activeCamera","globalPosition","devicePosition","TmpVectors","Vector4","set","x","y","z","useRightHandedSystem","setFloat3","setVector4","finalizeSceneUbo","ubo","getSceneUniformBuffer","updateFloat4","w","update","_useRightHandedSystem","setStepId","newStepId","_currentStepId","getStepId","getInternalStep","_currentInternalStep","_fogEnabled","_fogMode","prePassRenderer","defaultRT","enabled","_shadowsEnabled","_lightsEnabled","_activeCameras","cameras","_unObserveActiveCameras","_ObserveArray","onActiveCamerasChanged","_activeCamera","onActiveCameraChanged","_defaultMaterial","_texturesEnabled","_skeletonsEnabled","_collisionCoordinator","init","_frustumPlanes","_registerTransientComponents","_transientComponents","length","component","register","_addComponent","_components","push","addFromContainer","serialize","_serializableComponents","_getComponent","name","constructor","engine","options","cameraToUseForPointers","_isScene","_blockEntityCollection","autoClearDepthAndStencil","clearColor","Color4","ambientColor","Color3","environmentIntensity","Observable","animationsEnabled","constantlyUpdateMeshUnderPointer","useConstantAnimationDeltaTime","hoverCursor","defaultCursor","doNotHandleCursors","preventDefaultOnPointerUp","preventDefaultOnPointerDown","reservedDataStore","metadata","disableOfflineSupportExceptionRules","onAfterRenderCameraObservable","onBeforeAnimationsObservable","onAfterAnimationsObservable","onBeforeDrawPhaseObservable","onAfterDrawPhaseObservable","onReadyObservable","onBeforeActiveMeshesEvaluationObservable","onAfterActiveMeshesEvaluationObservable","onBeforeParticlesRenderingObservable","onAfterParticlesRenderingObservable","onDataLoadedObservable","onNewCameraAddedObservable","onCameraRemovedObservable","onNewLightAddedObservable","onLightRemovedObservable","onNewGeometryAddedObservable","onGeometryRemovedObservable","onNewTransformNodeAddedObservable","onTransformNodeRemovedObservable","onNewMeshAddedObservable","onMeshRemovedObservable","onNewSkeletonAddedObservable","onSkeletonRemovedObservable","onNewMaterialAddedObservable","onNewMultiMaterialAddedObservable","onMaterialRemovedObservable","onMultiMaterialRemovedObservable","onNewTextureAddedObservable","onTextureRemovedObservable","onBeforeRenderTargetsRenderObservable","onAfterRenderTargetsRenderObservable","onBeforeStepObservable","onAfterStepObservable","onBeforeRenderingGroupObservable","onAfterRenderingGroupObservable","onMeshImportedObservable","onAnimationFileImportedObservable","_registeredForLateAnimationBindings","SmartArrayNoDuplicate","PointerPickingConfiguration","onPrePointerObservable","onPointerObservable","onPreKeyboardObservable","onKeyboardObservable","_timeAccumulator","FOGMODE_NONE","fogColor","fogDensity","fogStart","fogEnd","needsPreviousWorldMatrices","collisionsEnabled","lensFlaresEnabled","spritesEnabled","particlesEnabled","physicsEnabled","gravity","Vector3","renderTargetsEnabled","postProcessesEnabled","dumpNextRenderTargets","customRenderTargets","importedMeshesFiles","probesEnabled","_meshesForIntersections","proceduralTexturesEnabled","_totalVertices","PerfCounter","_activeIndices","_activeParticles","_activeBones","_animationTime","animationTimeScale","_frameId","_renderId","_executeWhenReadyTimeoutId","_defaultFrameBufferCleared","_intermediateRendering","_projectionUpdateFlag","_viewUpdateFlag","_toBeDisposed","Array","_activeRequests","_pendingData","dispatchAllSubMeshesOfActiveMeshes","_isDisposed","_activeMeshes","SmartArray","_processedMaterials","_renderTargets","_materialsRenderTargets","_activeParticleSystems","_activeSkeletons","_softwareSkinnedMeshes","_activeAnimatables","_transformMatrix","Matrix","Zero","requireLightSorting","_beforeCameraUpdateStage","Stage","Create","_beforeClearStage","_beforeRenderTargetClearStage","_gatherRenderTargetsStage","_gatherActiveCameraRenderTargetsStage","_isReadyForMeshStage","_beforeEvaluateActiveMeshStage","_evaluateSubMeshStage","_preActiveMeshStage","_cameraDrawRenderTargetStage","_beforeCameraDrawStage","_beforeRenderTargetDrawStage","_beforeRenderingGroupDrawStage","_beforeRenderingMeshStage","_afterRenderingMeshStage","_afterRenderingGroupDrawStage","_afterCameraDrawStage","_afterCameraPostProcessStage","_afterRenderTargetDrawStage","_afterRenderTargetPostProcessStage","_afterRenderStage","_pointerMoveStage","_pointerDownStage","_pointerUpStage","_geometriesByUniqueId","_defaultMeshCandidates","data","_defaultSubMeshCandidates","_skipEvaluateActiveMeshesCompletely","_activeMeshesFrozenButKeepClipping","_activeMeshesFrozen","_preventFreeActiveMeshesAndRenderingGroups","_allowPostProcessClearColor","getDeterministicFrameTime","this.getDeterministicFrameTime","_engine","getTimeStep","_registeredActions","_blockMaterialDirtyMechanism","_perfCollector","activeCameras","fullOptions","assign","useGeometryUniqueIdsMap","useMaterialMeshMap","useClonedMeshMap","virtual","EngineStore","LastCreatedEngine","_virtualScenes","_LastCreatedScene","scenes","_uid","RenderingManager","PostProcessManager","postProcessManager","IsWindowObjectExist","attachControl","_createUbo","ImageProcessingConfiguration","setDefaultCandidateProviders","onNewSceneAddedObservable","getClassName","_getDefaultMeshCandidates","meshes","_getDefaultSubMeshCandidates","mesh","subMeshes","getActiveMeshCandidates","bind","getActiveSubMeshCandidates","getIntersectingSubMeshCandidates","getCollidingSubMeshCandidates","meshUnderPointer","pointerX","pointerY","getCachedMaterial","_cachedMaterial","getCachedEffect","_cachedEffect","getCachedVisibility","_cachedVisibility","isCachedMaterialInvalid","material","visibility","getEngine","getTotalVertices","current","getActiveIndices","getActiveParticles","getActiveBones","getActiveMeshes","getAnimationRatio","undefined","_animationRatio","getRenderId","getFrameId","incrementRenderId","setSceneUniformBuffer","createSceneUniformBuffer","simulatePointerMove","pickResult","pointerEventInit","simulatePointerDown","simulatePointerUp","doubleTap","isPointerCaptured","pointerId","attachUp","attachDown","attachMove","detachControl","isReady","checkRenderTargets","_b","_c","currentRenderPassId","renderPassId","reset","index","hardwareInstancedRendering","hasThinInstances","getCaps","instancedArrays","instances","step","action","mat","defaultMaterial","_storeEffectOnSubMeshes","subMesh","getMaterial","hasRenderTargetTextures","getRenderTargetTextures","indexOf","concatWithNoDuplicate","rtt","isReadyForRendering","geometries","geometry","delayLoadState","camera","particleSystem","particleSystems","layers","layer","areAllEffectsReady","resetCachedMaterial","registerBeforeRender","func","unregisterBeforeRender","removeCallback","registerAfterRender","unregisterAfterRender","_executeOnceBeforeRender","execFunc","setTimeout","executeOnceBeforeRender","timeout","addPendingData","removePendingData","wasLoading","isLoading","splice","getWaitingItemsCount","executeWhenReady","addOnce","_checkIsReady","whenReadyAsync","Promise","resolve","clear","resetLastAnimationTimeFrame","_animationTimeLast","PrecisionDate","Now","getViewMatrix","_viewMatrix","getProjectionMatrix","_projectionMatrix","getTransformMatrix","setTransformMatrix","viewL","projectionL","viewR","projectionR","_multiviewSceneUbo","dispose","updateFlag","multiplyToRef","Frustum","GetPlanesToRef","GetPlanes","useUbo","_updateMultiviewUbo","_sceneUbo","updateMatrix","sceneUbo","UniformBuffer","addUniform","getUniqueId","UniqueIdGenerator","UniqueId","addMesh","newMesh","recursive","_resyncLightSources","parent","_addToSceneRootNodes","getChildMeshes","forEach","m","removeMesh","toRemove","pop","_removeFromSceneRootNodes","_invalidateMesh","addTransformNode","newTransformNode","getScene","_indexInSceneTransformNodesArray","transformNodes","removeTransformNode","lastNode","removeSkeleton","skeletons","_executeActiveContainerCleanup","removeMorphTargetManager","morphTargetManagers","removeLight","lights","_removeLightSource","sortLightsByPriority","removeCamera","index2","removeParticleSystem","removeAnimation","animations","stopAnimation","target","animationName","targetMask","removeAnimationGroup","animationGroups","removeMultiMaterial","multiMaterials","removeMaterial","_indexInSceneMaterialArray","materials","lastMaterial","removeActionManager","actionManagers","removeTexture","textures","addLight","newLight","lightSources","sort","LightConstants","CompareLightsPriority","addCamera","newCamera","addSkeleton","newSkeleton","addParticleSystem","newParticleSystem","addAnimation","newAnimation","addAnimationGroup","newAnimationGroup","addMultiMaterial","newMultiMaterial","addMaterial","newMaterial","addMorphTargetManager","newMorphTargetManager","addGeometry","newGeometry","uniqueId","addActionManager","newActionManager","addTexture","newTexture","switchActiveCamera","getInputElement","canvas","setActiveCameraById","id","getCameraById","setActiveCameraByName","getCameraByName","getAnimationGroupByName","_getMaterial","allowMultiMaterials","predicate","getMaterialByUniqueID","getMaterialById","getMaterialByName","getLastMaterialById","getTextureByUniqueId","getTextureByName","getCameraByUniqueId","getBoneById","skeletonIndex","skeleton","boneIndex","bones","getBoneByName","getLightByName","getLightById","getLightByUniqueId","getParticleSystemById","getGeometryById","_getGeometryByUniqueId","pushGeometry","force","removeGeometry","lastGeometry","getGeometries","getMeshById","getMeshesById","filter","getTransformNodeById","getTransformNodeByUniqueId","getTransformNodesById","getMeshByUniqueId","getLastMeshById","getLastEntryById","getNodeById","transformNode","light","bone","getNodeByName","getMeshByName","getTransformNodeByName","getLastSkeletonById","getSkeletonByUniqueId","getSkeletonById","getSkeletonByName","getMorphTargetManagerById","getMorphTargetById","managerIndex","morphTargetManager","numTargets","getTarget","getMorphTargetByName","getPostProcessByName","postProcessIndex","postProcesses","postProcess","isActiveMesh","Tools","RandomId","addExternalData","key","_externalData","StringDictionary","getExternalData","get","getOrAddExternalDataWithFactory","factory","getOrAddWithFactory","removeExternalData","_evaluateSubMesh","initialMesh","forcePush","isInFrustum","dispatch","freeProcessedMaterials","freeActiveMeshes","freeRenderingGroups","blockfreeActiveMeshesAndRenderingGroups","i","texture","renderList","_isInIntermediateRendering","freezeActiveMeshes","skipEvaluateActiveMeshes","onSuccess","onError","freezeMeshes","keepFrustumCulling","updateTransformMatrix","_evaluateActiveMeshes","_freeze","unfreezeActiveMeshes","_internalAbstractMeshDataInfo","_isActive","_unFreeze","container","snapshotRendering","snapshotRenderingMode","len","computeWorldMatrix","psLength","animate","resetSprites","_currentLODIsUpToDate","isBlocked","addCount","isEnabled","scaling","hasAZeroComponent","actionManager","hasSpecificTriggers2","pushNoDuplicate","meshToRender","customLODSelector","getLOD","_currentLOD","billboardMode","_preActivate","isVisible","layerMask","alwaysSelectAsActiveMesh","_activate","isAnInstance","_actAsRegularMesh","_onlyForInstances","_activeMesh","_postActivate","particleIndex","isStarted","emitter","position","dispatchParticles","sourceMesh","prepare","computeBonesUsingShaders","hasInstances","_renderingMultiview","leftCamera","_rigCameras","rightCamera","_bindFrameBuffer","_multiviewTexture","outputRenderTarget","_currentFrameBufferIsDefaultFrameBuffer","restoreDefaultFramebuffer","_clearFrameBuffer","onClearObservable","hasObservers","skipInitialClear","_cleared","_clear","_renderForCamera","rigParent","bindFrameBuffer","_skipRendering","Error","setViewport","viewport","prePass","softwareSkinnedMeshIndex","applySkeleton","environmentTexture","isRenderTarget","needRebind","StartPerformanceCounter","renderIndex","renderTarget","_shouldRender","render","EndPerformanceCounter","_prepareFrame","_finalizeFrame","isIntermediate","_processSubCameras","cameraRigMode","_createMultiviewUbo","_useMultiviewToSingleView","_renderMultiviewToSingleView","_checkIntersections","actionIndex","actions","trigger","parameters","getTriggerParameter","otherMesh","areIntersecting","intersectsMesh","usePreciseIntersection","currentIntersectionInProgress","_intersectionsInProgress","_executeCurrent","ActionEvent","CreateNew","hasSpecificTrigger","parameter","parameterMesh","_advancePhysicsEngineStep","_animate","isDeterministicLockStep","deltaTime","Math","max","MinDeltaTime","min","getDeltaTime","MaxDeltaTime","defaultFrameTime","defaultFPS","stepsTaken","maxSubSteps","getLockstepMaxSteps","internalSteps","floor","forceWireframe","forcePointsCloud","_checkCameraRenderTarget","isRigCamera","rigCameras","resetDrawCache","passId","updateCameras","ignoreAnimations","isDisposed","fetchNewFrame","processTrigger","cameraIndex","currentActiveCamera","customIndex","afterRender","freezeMaterials","freeze","unfreezeMaterials","unfreeze","beforeRender","stopAllAnimations","activeRequests","slice","request","abort","e","console","error","_disposeList","item","wipeCaches","items","itemsCopy","clearCachedVertexData","meshIndex","clearCachedData","cleanCachedTextureBuffer","baseTexture","_buffer","getWorldExtends","filterPredicate","Number","MAX_VALUE","infiniteDistance","boundingInfo","getBoundingInfo","maxBox","boundingBox","maximumWorld","CheckExtends","minimumWorld","createPickingRay","world","cameraViewSpace","createPickingRayToRef","result","enableDistantPicking","createPickingRayInCameraSpace","createPickingRayInCameraSpaceToRef","pick","fastCheck","trianglePredicate","PickingInfo","pickWithBoundingInfo","pickWithRay","ray","multiPick","multiPickWithRay","setPointerOverMesh","getPointerOverMesh","_rebuildGeometries","_rebuild","rebuild","system","spriteManagers","spriteMgr","_rebuildTextures","_getByTags","list","tagsQuery","listByTags","Tags","MatchesQuery","getMeshesByTags","getCamerasByTags","getLightsByTags","getMaterialByTags","concat","getTransformNodesByTags","setRenderingOrder","renderingGroupId","opaqueSortCompareFn","alphaTestSortCompareFn","transparentSortCompareFn","setRenderingAutoClearDepthStencil","autoClearDepthStencil","depth","stencil","getAutoClearDepthStencilSetup","flag","markAsDirty","_loadFile","fileOrUrl","onProgress","useOfflineSupport","useArrayBuffer","onOpened","LoadFile","offlineProvider","onCompleteObservable","_loadFileAsync","reject","exception","_requestFile","url","RequestFile","_requestFileAsync","_readFile","file","ReadFile","_readFileAsync","getPerfCollector","setActiveCameraByID","getMaterialByID","getLastMaterialByID","getTextureByUniqueID","getCameraByID","getCameraByUniqueID","getBoneByID","getLightByID","getLightByUniqueID","getParticleSystemByID","getGeometryByID","getMeshByID","getMeshByUniqueID","getLastMeshByID","getMeshesByID","getTransformNodeByID","getTransformNodeByUniqueID","getTransformNodesByID","getNodeByID","getLastEntryByID","getLastSkeletonByID","FOGMODE_EXP","FOGMODE_EXP2","FOGMODE_LINEAR"]
}
