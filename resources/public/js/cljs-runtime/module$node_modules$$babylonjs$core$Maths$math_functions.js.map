{
"version":3,
"file":"module$node_modules$$babylonjs$core$Maths$math_functions.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Maths/math.functions.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Maths$math_functions\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractMinAndMaxIndexed = extractMinAndMaxIndexed;\nexports.extractMinAndMax = extractMinAndMax;\n\nvar _tslibEs = require(\"../tslib.es6.js\");\n\nvar _mathVector = require(\"./math.vector.js\");\n\nvar _decorators = require(\"../Misc/decorators.js\");\n\n// This helper class is only here so we can apply the nativeOverride decorator to functions.\nclass MathHelpers {\n  static extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, minimum, maximum) {\n    for (let index = indexStart; index < indexStart + indexCount; index++) {\n      const offset = indices[index] * 3;\n      const x = positions[offset];\n      const y = positions[offset + 1];\n      const z = positions[offset + 2];\n      minimum.minimizeInPlaceFromFloats(x, y, z);\n      maximum.maximizeInPlaceFromFloats(x, y, z);\n    }\n  }\n\n  static extractMinAndMax(positions, start, count, stride, minimum, maximum) {\n    for (let index = start, offset = start * stride; index < start + count; index++, offset += stride) {\n      const x = positions[offset];\n      const y = positions[offset + 1];\n      const z = positions[offset + 2];\n      minimum.minimizeInPlaceFromFloats(x, y, z);\n      maximum.maximizeInPlaceFromFloats(x, y, z);\n    }\n  }\n\n}\n\n(0, _tslibEs.__decorate)([_decorators.nativeOverride.filter((...[positions, indices]) => !Array.isArray(positions) && !Array.isArray(indices)) // eslint-disable-next-line @typescript-eslint/naming-convention\n], MathHelpers, \"extractMinAndMaxIndexed\", null);\n(0, _tslibEs.__decorate)([_decorators.nativeOverride.filter((...[positions]) => !Array.isArray(positions)) // eslint-disable-next-line @typescript-eslint/naming-convention\n], MathHelpers, \"extractMinAndMax\", null);\n/**\n * Extracts minimum and maximum values from a list of indexed positions\n * @param positions defines the positions to use\n * @param indices defines the indices to the positions\n * @param indexStart defines the start index\n * @param indexCount defines the end index\n * @param bias defines bias value to add to the result\n * @returns minimum and maximum values\n */\n\nfunction extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, bias = null) {\n  const minimum = new _mathVector.Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  const maximum = new _mathVector.Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n  MathHelpers.extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, minimum, maximum);\n\n  if (bias) {\n    minimum.x -= minimum.x * bias.x + bias.y;\n    minimum.y -= minimum.y * bias.x + bias.y;\n    minimum.z -= minimum.z * bias.x + bias.y;\n    maximum.x += maximum.x * bias.x + bias.y;\n    maximum.y += maximum.y * bias.x + bias.y;\n    maximum.z += maximum.z * bias.x + bias.y;\n  }\n\n  return {\n    minimum: minimum,\n    maximum: maximum\n  };\n}\n/**\n * Extracts minimum and maximum values from a list of positions\n * @param positions defines the positions to use\n * @param start defines the start index in the positions array\n * @param count defines the number of positions to handle\n * @param bias defines bias value to add to the result\n * @param stride defines the stride size to use (distance between two positions in the positions array)\n * @returns minimum and maximum values\n */\n\n\nfunction extractMinAndMax(positions, start, count, bias = null, stride) {\n  const minimum = new _mathVector.Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  const maximum = new _mathVector.Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n  if (!stride) {\n    stride = 3;\n  }\n\n  MathHelpers.extractMinAndMax(positions, start, count, stride, minimum, maximum);\n\n  if (bias) {\n    minimum.x -= minimum.x * bias.x + bias.y;\n    minimum.y -= minimum.y * bias.x + bias.y;\n    minimum.z -= minimum.z * bias.x + bias.y;\n    maximum.x += maximum.x * bias.x + bias.y;\n    maximum.y += maximum.y * bias.x + bias.y;\n    maximum.z += maximum.z * bias.x + bias.y;\n  }\n\n  return {\n    minimum: minimum,\n    maximum: maximum\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","extractMinAndMaxIndexed","positions","indices","indexStart","indexCount","bias","minimum","_mathVector","Vector3","Number","MAX_VALUE","maximum","MathHelpers","x","y","z","extractMinAndMax","start","count","stride","_tslibEs","_decorators","index","offset","minimizeInPlaceFromFloats","maximizeInPlaceFromFloats","__decorate","nativeOverride","filter","Array","isArray"]
}
