shadow$provide.module$node_modules$$babylonjs$core$DeviceInput$InputDevices$deviceSourceManager=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.DeviceSourceManager=void 0;var _deviceEnums=require("module$node_modules$$babylonjs$core$DeviceInput$InputDevices$deviceEnums"),_observable=require("module$node_modules$$babylonjs$core$Misc$observable"),_internalDeviceSourceManager=require("module$node_modules$$babylonjs$core$DeviceInput$internalDeviceSourceManager");
class DeviceSourceManager{getDeviceSource(deviceType,deviceSlot){if(void 0===deviceSlot){if(void 0===this._firstDevice[deviceType])return null;deviceSlot=this._firstDevice[deviceType]}return this._devices[deviceType]&&void 0!==this._devices[deviceType][deviceSlot]?this._devices[deviceType][deviceSlot]:null}getDeviceSources(deviceType){return this._devices[deviceType]?this._devices[deviceType].filter(source=>!!source):[]}constructor(engine){const numberOfDeviceTypes=Object.keys(_deviceEnums.DeviceType).length/
2;this._devices=Array(numberOfDeviceTypes);this._firstDevice=Array(numberOfDeviceTypes);this._engine=engine;this._engine._deviceSourceManager||(this._engine._deviceSourceManager=new _internalDeviceSourceManager.InternalDeviceSourceManager(engine));this._engine._deviceSourceManager._refCount++;this.onDeviceConnectedObservable=new _observable.Observable(observer=>{for(const devices of this._devices)if(devices)for(const device of devices)device&&this.onDeviceConnectedObservable.notifyObserver(observer,
device)});this.onDeviceDisconnectedObservable=new _observable.Observable;this._engine._deviceSourceManager.registerManager(this);this._onDisposeObserver=engine.onDisposeObservable.add(()=>{this.dispose()})}dispose(){this.onDeviceConnectedObservable.clear();this.onDeviceDisconnectedObservable.clear();this._engine._deviceSourceManager&&(this._engine._deviceSourceManager.unregisterManager(this),1>--this._engine._deviceSourceManager._refCount&&(this._engine._deviceSourceManager.dispose(),delete this._engine._deviceSourceManager));
this._engine.onDisposeObservable.remove(this._onDisposeObserver)}_addDevice(deviceSource){this._devices[deviceSource.deviceType]||(this._devices[deviceSource.deviceType]=[]);this._devices[deviceSource.deviceType][deviceSource.deviceSlot]||(this._devices[deviceSource.deviceType][deviceSource.deviceSlot]=deviceSource,this._updateFirstDevices(deviceSource.deviceType));this.onDeviceConnectedObservable.notifyObservers(deviceSource)}_removeDevice(deviceType,deviceSlot){var _a,_b;const deviceSource=null===
(_a=this._devices[deviceType])||void 0===_a?void 0:_a[deviceSlot];this.onDeviceDisconnectedObservable.notifyObservers(deviceSource);(null===(_b=this._devices[deviceType])||void 0===_b?0:_b[deviceSlot])&&delete this._devices[deviceType][deviceSlot];this._updateFirstDevices(deviceType)}_onInputChanged(deviceType,deviceSlot,eventData){var _a,_b;null===(_b=null===(_a=this._devices[deviceType])||void 0===_a?void 0:_a[deviceSlot])||void 0===_b?void 0:_b.onInputChangedObservable.notifyObservers(eventData)}_updateFirstDevices(type){switch(type){case _deviceEnums.DeviceType.Keyboard:case _deviceEnums.DeviceType.Mouse:this._firstDevice[type]=
0;break;case _deviceEnums.DeviceType.Touch:case _deviceEnums.DeviceType.DualSense:case _deviceEnums.DeviceType.DualShock:case _deviceEnums.DeviceType.Xbox:case _deviceEnums.DeviceType.Switch:case _deviceEnums.DeviceType.Generic:delete this._firstDevice[type];const devices=this._devices[type];if(devices)for(let i=0;i<devices.length;i++)if(devices[i]){this._firstDevice[type]=i;break}}}}exports.DeviceSourceManager=DeviceSourceManager}
//# sourceMappingURL=module$node_modules$$babylonjs$core$DeviceInput$InputDevices$deviceSourceManager.js.map
