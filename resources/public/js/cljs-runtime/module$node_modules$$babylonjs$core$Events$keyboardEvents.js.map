{
"version":3,
"file":"module$node_modules$$babylonjs$core$Events$keyboardEvents.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,eAAR,CAA0BJ,OAAQK,CAAAA,YAAlC,CAAiDL,OAAQM,CAAAA,kBAAzD,CAA8E,IAAK,EAKnF,MAAMA,mBAAN,EAMAN,OAAQM,CAAAA,kBAAR,CAA6BA,kBAC7BA,mBAAmBC,CAAAA,OAAnB,CAA6B,CAK7BD,mBAAmBE,CAAAA,KAAnB,CAA2B,CAK3B,MAAMH,aAAN,CAOEI,WAAW,CAIXC,IAJW,CAQXC,KARW,CAQJ,CACL,IAAKD,CAAAA,IAAL,CAAYA,IACZ,KAAKC,CAAAA,KAAL,CAAaA,KAFR,CAfT,CA2BAX,OAAQK,CAAAA,YAAR,CAAuBA,YAEvB,MAAMD,gBAAN,QAA8BC,aAA9B,CAKM,2BAA0B,EAAA,CAC5B,MAAO,KAAKO,CAAAA,wBADgB,CAI1B,2BAAuB,CAACT,KAAD,CAAQ,CACjC,IAAKS,CAAAA,wBAAL;AAAgCT,KADC,CAWnCM,WAAW,CAIXC,IAJW,CAQXC,KARW,CAQJ,CACL,KAAA,CAAMD,IAAN,CAAYC,KAAZ,CACA,KAAKD,CAAAA,IAAL,CAAYA,IACZ,KAAKC,CAAAA,KAAL,CAAaA,KACb,KAAKC,CAAAA,wBAAL,CAAgC,CAAA,CAJ3B,CA5BT,CAqCAZ,OAAQI,CAAAA,eAAR,CAA0BA,eA9F4F;",
"sources":["node_modules/@babylonjs/core/Events/keyboardEvents.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Events$keyboardEvents\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyboardInfoPre = exports.KeyboardInfo = exports.KeyboardEventTypes = void 0;\n\n/**\n * Gather the list of keyboard event types as constants.\n */\nclass KeyboardEventTypes {}\n/**\n * The keydown event is fired when a key becomes active (pressed).\n */\n\n\nexports.KeyboardEventTypes = KeyboardEventTypes;\nKeyboardEventTypes.KEYDOWN = 0x01;\n/**\n * The keyup event is fired when a key has been released.\n */\n\nKeyboardEventTypes.KEYUP = 0x02;\n/**\n * This class is used to store keyboard related info for the onKeyboardObservable event.\n */\n\nclass KeyboardInfo {\n  /**\n   * Instantiates a new keyboard info.\n   * This class is used to store keyboard related info for the onKeyboardObservable event.\n   * @param type Defines the type of event (KeyboardEventTypes)\n   * @param event Defines the related dom event\n   */\n  constructor(\n  /**\n   * Defines the type of event (KeyboardEventTypes)\n   */\n  type,\n  /**\n   * Defines the related dom event\n   */\n  event) {\n    this.type = type;\n    this.event = event;\n  }\n\n}\n/**\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\n */\n\n\nexports.KeyboardInfo = KeyboardInfo;\n\nclass KeyboardInfoPre extends KeyboardInfo {\n  /**\n   * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\n   * @deprecated use skipOnKeyboardObservable property instead\n   */\n  get skipOnPointerObservable() {\n    return this.skipOnKeyboardObservable;\n  }\n\n  set skipOnPointerObservable(value) {\n    this.skipOnKeyboardObservable = value;\n  }\n  /**\n   * Instantiates a new keyboard pre info.\n   * This class is used to store keyboard related info for the onPreKeyboardObservable event.\n   * @param type Defines the type of event (KeyboardEventTypes)\n   * @param event Defines the related dom event\n   */\n\n\n  constructor(\n  /**\n   * Defines the type of event (KeyboardEventTypes)\n   */\n  type,\n  /**\n   * Defines the related dom event\n   */\n  event) {\n    super(type, event);\n    this.type = type;\n    this.event = event;\n    this.skipOnKeyboardObservable = false;\n  }\n\n}\n\nexports.KeyboardInfoPre = KeyboardInfoPre;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","KeyboardInfoPre","KeyboardInfo","KeyboardEventTypes","KEYDOWN","KEYUP","constructor","type","event","skipOnKeyboardObservable"]
}
