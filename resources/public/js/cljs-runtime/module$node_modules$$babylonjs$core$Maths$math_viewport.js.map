{
"version":3,
"file":"module$node_modules$$babylonjs$core$Maths$math_viewport.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,QAAR,CAAmB,IAAK,EAKxB,MAAMA,SAAN,CAQEC,WAAW,CAEXC,CAFW,CAIXC,CAJW,CAMXC,KANW,CAQXC,MARW,CAQH,CACN,IAAKH,CAAAA,CAAL,CAASA,CACT,KAAKC,CAAAA,CAAL,CAASA,CACT,KAAKC,CAAAA,KAAL,CAAaA,KACb,KAAKC,CAAAA,MAAL,CAAcA,MAJR,CAcRC,QAAQ,CAACC,WAAD,CAAcC,YAAd,CAA4B,CAClC,MAAO,KAAIR,QAAJ,CAAa,IAAKE,CAAAA,CAAlB,CAAsBK,WAAtB,CAAmC,IAAKJ,CAAAA,CAAxC,CAA4CK,YAA5C,CAA0D,IAAKJ,CAAAA,KAA/D,CAAuEG,WAAvE,CAAoF,IAAKF,CAAAA,MAAzF,CAAkGG,YAAlG,CAD2B,CAYpCC,aAAa,CAACF,WAAD,CAAcC,YAAd,CAA4BE,GAA5B,CAAiC,CAC5CA,GAAIR,CAAAA,CAAJ,CAAQ,IAAKA,CAAAA,CAAb,CAAiBK,WACjBG;GAAIP,CAAAA,CAAJ,CAAQ,IAAKA,CAAAA,CAAb,CAAiBK,YACjBE,IAAIN,CAAAA,KAAJ,CAAY,IAAKA,CAAAA,KAAjB,CAAyBG,WACzBG,IAAIL,CAAAA,MAAJ,CAAa,IAAKA,CAAAA,MAAlB,CAA2BG,YAC3B,OAAO,KALqC,CAa9CG,KAAK,EAAG,CACN,MAAO,KAAIX,QAAJ,CAAa,IAAKE,CAAAA,CAAlB,CAAqB,IAAKC,CAAAA,CAA1B,CAA6B,IAAKC,CAAAA,KAAlC,CAAyC,IAAKC,CAAAA,MAA9C,CADD,CAvDV,CA6DAT,OAAQI,CAAAA,QAAR,CAAmBA,QAxEiG;",
"sources":["node_modules/@babylonjs/core/Maths/math.viewport.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Maths$math_viewport\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Viewport = void 0;\n\n/**\n * Class used to represent a viewport on screen\n */\nclass Viewport {\n  /**\n   * Creates a Viewport object located at (x, y) and sized (width, height)\n   * @param x defines viewport left coordinate\n   * @param y defines viewport top coordinate\n   * @param width defines the viewport width\n   * @param height defines the viewport height\n   */\n  constructor(\n  /** viewport left coordinate */\n  x,\n  /** viewport top coordinate */\n  y,\n  /**viewport width */\n  width,\n  /** viewport height */\n  height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n  /**\n   * Creates a new viewport using absolute sizing (from 0-> width, 0-> height instead of 0->1)\n   * @param renderWidth defines the rendering width\n   * @param renderHeight defines the rendering height\n   * @returns a new Viewport\n   */\n\n\n  toGlobal(renderWidth, renderHeight) {\n    return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\n  }\n  /**\n   * Stores absolute viewport value into a target viewport (from 0-> width, 0-> height instead of 0->1)\n   * @param renderWidth defines the rendering width\n   * @param renderHeight defines the rendering height\n   * @param ref defines the target viewport\n   * @returns the current viewport\n   */\n\n\n  toGlobalToRef(renderWidth, renderHeight, ref) {\n    ref.x = this.x * renderWidth;\n    ref.y = this.y * renderHeight;\n    ref.width = this.width * renderWidth;\n    ref.height = this.height * renderHeight;\n    return this;\n  }\n  /**\n   * Returns a new Viewport copied from the current one\n   * @returns a new Viewport\n   */\n\n\n  clone() {\n    return new Viewport(this.x, this.y, this.width, this.height);\n  }\n\n}\n\nexports.Viewport = Viewport;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Viewport","constructor","x","y","width","height","toGlobal","renderWidth","renderHeight","toGlobalToRef","ref","clone"]
}
