{
"version":3,
"file":"module$node_modules$$babylonjs$core$DeviceInput$eventFactory.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/DeviceInput/eventFactory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$DeviceInput$eventFactory\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DeviceEventFactory = void 0;\n\nvar _deviceInputEvents = require(\"../Events/deviceInputEvents.js\");\n\nvar _deviceEnums = require(\"./InputDevices/deviceEnums.js\");\n\n/**\n * Class to wrap DeviceInputSystem data into an event object\n */\nclass DeviceEventFactory {\n  /**\n   * Create device input events based on provided type and slot\n   *\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object\n   */\n  static CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId) {\n    switch (deviceType) {\n      case _deviceEnums.DeviceType.Keyboard:\n        return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n\n      case _deviceEnums.DeviceType.Mouse:\n        if (inputIndex === _deviceEnums.PointerInput.MouseWheelX || inputIndex === _deviceEnums.PointerInput.MouseWheelY || inputIndex === _deviceEnums.PointerInput.MouseWheelZ) {\n          return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case _deviceEnums.DeviceType.Touch:\n        return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId);\n\n      default:\n        throw `Unable to generate event for device ${_deviceEnums.DeviceType[deviceType]}`;\n    }\n  }\n  /**\n   * Creates pointer event\n   *\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Pointer)\n   */\n\n\n  static _CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId) {\n    const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n\n    if (deviceType === _deviceEnums.DeviceType.Mouse) {\n      evt.deviceType = _deviceEnums.DeviceType.Mouse;\n      evt.pointerId = 1;\n      evt.pointerType = \"mouse\";\n    } else {\n      evt.deviceType = _deviceEnums.DeviceType.Touch;\n      evt.pointerId = pointerId !== null && pointerId !== void 0 ? pointerId : deviceSlot;\n      evt.pointerType = \"touch\";\n    }\n\n    if (inputIndex === _deviceEnums.PointerInput.Move) {\n      evt.type = \"pointermove\";\n    } else if (inputIndex >= _deviceEnums.PointerInput.LeftClick && inputIndex <= _deviceEnums.PointerInput.RightClick) {\n      evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\n      evt.button = inputIndex - 2;\n    }\n\n    return evt;\n  }\n  /**\n   * Create Mouse Wheel Event\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Wheel)\n   */\n\n\n  static _CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo); // While WheelEvents don't generally have a pointerId, we used to add one in the InputManager\n    // This line has been added to make the InputManager more platform-agnostic\n    // Similar code exists in the WebDeviceInputSystem to handle browser created events\n\n\n    evt.pointerId = 1;\n    evt.type = \"wheel\";\n    evt.deltaMode = _deviceInputEvents.EventConstants.DOM_DELTA_PIXEL;\n    evt.deltaX = 0;\n    evt.deltaY = 0;\n    evt.deltaZ = 0;\n\n    switch (inputIndex) {\n      case _deviceEnums.PointerInput.MouseWheelX:\n        evt.deltaX = currentState;\n        break;\n\n      case _deviceEnums.PointerInput.MouseWheelY:\n        evt.deltaY = currentState;\n        break;\n\n      case _deviceEnums.PointerInput.MouseWheelZ:\n        evt.deltaZ = currentState;\n        break;\n    }\n\n    return evt;\n  }\n  /**\n   * Create Mouse Event\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Mouse)\n   */\n\n\n  static _CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    const evt = this._CreateEvent(elementToAttachTo);\n\n    const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, _deviceEnums.PointerInput.Horizontal);\n    const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, _deviceEnums.PointerInput.Vertical); // Handle offsets/deltas based on existence of HTMLElement\n\n    if (elementToAttachTo) {\n      evt.movementX = 0;\n      evt.movementY = 0;\n      evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\n      evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\n    } else {\n      evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, _deviceEnums.NativePointerInput.DeltaHorizontal); // DeltaHorizontal\n\n      evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, _deviceEnums.NativePointerInput.DeltaVertical); // DeltaVertical\n\n      evt.offsetX = 0;\n      evt.offsetY = 0;\n    }\n\n    this._CheckNonCharacterKeys(evt, deviceInputSystem);\n\n    evt.clientX = pointerX;\n    evt.clientY = pointerY;\n    evt.x = pointerX;\n    evt.y = pointerY;\n    evt.deviceType = deviceType;\n    evt.deviceSlot = deviceSlot;\n    evt.inputIndex = inputIndex;\n    return evt;\n  }\n  /**\n   * Create Keyboard Event\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IEvent object (Keyboard)\n   */\n\n\n  static _CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    const evt = this._CreateEvent(elementToAttachTo);\n\n    this._CheckNonCharacterKeys(evt, deviceInputSystem);\n\n    evt.deviceType = _deviceEnums.DeviceType.Keyboard;\n    evt.deviceSlot = 0;\n    evt.inputIndex = inputIndex;\n    evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\n    evt.key = String.fromCharCode(inputIndex);\n    evt.keyCode = inputIndex;\n    return evt;\n  }\n  /**\n   * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\n   * @param evt Event object to add parameters to\n   * @param deviceInputSystem DeviceInputSystem to pull values from\n   */\n\n\n  static _CheckNonCharacterKeys(evt, deviceInputSystem) {\n    const isKeyboardActive = deviceInputSystem.isDeviceAvailable(_deviceEnums.DeviceType.Keyboard);\n    const altKey = isKeyboardActive && deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard, 0, 18) === 1;\n    const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard, 0, 17) === 1;\n    const metaKey = isKeyboardActive && (deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard, 0, 91) === 1 || deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard, 0, 92) === 1 || deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard, 0, 93) === 1);\n    const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(_deviceEnums.DeviceType.Keyboard, 0, 16) === 1;\n    evt.altKey = altKey;\n    evt.ctrlKey = ctrlKey;\n    evt.metaKey = metaKey;\n    evt.shiftKey = shiftKey;\n  }\n  /**\n   * Create base event object\n   * @param elementToAttachTo Value to use as event target\n   * @returns\n   */\n\n\n  static _CreateEvent(elementToAttachTo) {\n    const evt = {};\n\n    evt.preventDefault = () => {};\n\n    evt.target = elementToAttachTo;\n    return evt;\n  }\n\n}\n\nexports.DeviceEventFactory = DeviceEventFactory;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","DeviceEventFactory","_deviceInputEvents","_deviceEnums","CreateDeviceEvent","deviceType","deviceSlot","inputIndex","currentState","deviceInputSystem","elementToAttachTo","pointerId","DeviceType","Keyboard","_CreateKeyboardEvent","Mouse","PointerInput","MouseWheelX","MouseWheelY","MouseWheelZ","_CreateWheelEvent","Touch","_CreatePointerEvent","evt","_CreateMouseEvent","pointerType","Move","type","LeftClick","RightClick","button","deltaMode","EventConstants","DOM_DELTA_PIXEL","deltaX","deltaY","deltaZ","_CreateEvent","pointerX","pollInput","Horizontal","pointerY","Vertical","movementX","movementY","offsetX","getBoundingClientRect","x","offsetY","y","NativePointerInput","DeltaHorizontal","DeltaVertical","_CheckNonCharacterKeys","clientX","clientY","key","String","fromCharCode","keyCode","isKeyboardActive","isDeviceAvailable","altKey","ctrlKey","metaKey","shiftKey","evt.preventDefault","target"]
}
