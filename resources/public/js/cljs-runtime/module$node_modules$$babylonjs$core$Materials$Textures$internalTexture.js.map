{
"version":3,
"file":"module$node_modules$$babylonjs$core$Materials$Textures$internalTexture.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Materials/Textures/internalTexture.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Materials$Textures$internalTexture\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InternalTexture = exports.InternalTextureSource = void 0;\n\nvar _observable = require(\"../../Misc/observable.js\");\n\nvar _textureSampler = require(\"./textureSampler.js\");\n\n/**\n * Defines the source of the internal texture\n */\nvar InternalTextureSource;\nexports.InternalTextureSource = InternalTextureSource;\n\n(function (InternalTextureSource) {\n  /**\n   * The source of the texture data is unknown\n   */\n  InternalTextureSource[InternalTextureSource[\"Unknown\"] = 0] = \"Unknown\";\n  /**\n   * Texture data comes from an URL\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Url\"] = 1] = \"Url\";\n  /**\n   * Texture data is only used for temporary storage\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Temp\"] = 2] = \"Temp\";\n  /**\n   * Texture data comes from raw data (ArrayBuffer)\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Raw\"] = 3] = \"Raw\";\n  /**\n   * Texture content is dynamic (video or dynamic texture)\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Dynamic\"] = 4] = \"Dynamic\";\n  /**\n   * Texture content is generated by rendering to it\n   */\n\n  InternalTextureSource[InternalTextureSource[\"RenderTarget\"] = 5] = \"RenderTarget\";\n  /**\n   * Texture content is part of a multi render target process\n   */\n\n  InternalTextureSource[InternalTextureSource[\"MultiRenderTarget\"] = 6] = \"MultiRenderTarget\";\n  /**\n   * Texture data comes from a cube data file\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Cube\"] = 7] = \"Cube\";\n  /**\n   * Texture data comes from a raw cube data\n   */\n\n  InternalTextureSource[InternalTextureSource[\"CubeRaw\"] = 8] = \"CubeRaw\";\n  /**\n   * Texture data come from a prefiltered cube data file\n   */\n\n  InternalTextureSource[InternalTextureSource[\"CubePrefiltered\"] = 9] = \"CubePrefiltered\";\n  /**\n   * Texture content is raw 3D data\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Raw3D\"] = 10] = \"Raw3D\";\n  /**\n   * Texture content is raw 2D array data\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Raw2DArray\"] = 11] = \"Raw2DArray\";\n  /**\n   * Texture content is a depth/stencil texture\n   */\n\n  InternalTextureSource[InternalTextureSource[\"DepthStencil\"] = 12] = \"DepthStencil\";\n  /**\n   * Texture data comes from a raw cube data encoded with RGBD\n   */\n\n  InternalTextureSource[InternalTextureSource[\"CubeRawRGBD\"] = 13] = \"CubeRawRGBD\";\n  /**\n   * Texture content is a depth texture\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Depth\"] = 14] = \"Depth\";\n})(InternalTextureSource || (exports.InternalTextureSource = InternalTextureSource = {}));\n/**\n * Class used to store data associated with WebGL texture data for the engine\n * This class should not be used directly\n */\n\n\nclass InternalTexture extends _textureSampler.TextureSampler {\n  /**\n   * Gets a boolean indicating if the texture uses mipmaps\n   * TODO implements useMipMaps as a separate setting from generateMipMaps\n   */\n  get useMipMaps() {\n    return this.generateMipMaps;\n  }\n\n  set useMipMaps(value) {\n    this.generateMipMaps = value;\n  }\n  /** Gets the unique id of the internal texture */\n\n\n  get uniqueId() {\n    return this._uniqueId;\n  }\n  /** @internal */\n\n\n  _setUniqueId(id) {\n    this._uniqueId = id;\n  }\n  /**\n   * Gets the Engine the texture belongs to.\n   * @returns The babylon engine\n   */\n\n\n  getEngine() {\n    return this._engine;\n  }\n  /**\n   * Gets the data source type of the texture\n   */\n\n\n  get source() {\n    return this._source;\n  }\n  /**\n   * Creates a new InternalTexture\n   * @param engine defines the engine to use\n   * @param source defines the type of data that will be used\n   * @param delayAllocation if the texture allocation should be delayed (default: false)\n   */\n\n\n  constructor(engine, source, delayAllocation = false) {\n    super();\n    /**\n     * Defines if the texture is ready\n     */\n\n    this.isReady = false;\n    /**\n     * Defines if the texture is a cube texture\n     */\n\n    this.isCube = false;\n    /**\n     * Defines if the texture contains 3D data\n     */\n\n    this.is3D = false;\n    /**\n     * Defines if the texture contains 2D array data\n     */\n\n    this.is2DArray = false;\n    /**\n     * Defines if the texture contains multiview data\n     */\n\n    this.isMultiview = false;\n    /**\n     * Gets the URL used to load this texture\n     */\n\n    this.url = \"\";\n    /**\n     * Gets a boolean indicating if the texture needs mipmaps generation\n     */\n\n    this.generateMipMaps = false;\n    /**\n     * Gets the number of samples used by the texture (WebGL2+ only)\n     */\n\n    this.samples = 0;\n    /**\n     * Gets the type of the texture (int, float...)\n     */\n\n    this.type = -1;\n    /**\n     * Gets the format of the texture (RGB, RGBA...)\n     */\n\n    this.format = -1;\n    /**\n     * Observable called when the texture is loaded\n     */\n\n    this.onLoadedObservable = new _observable.Observable();\n    /**\n     * Observable called when the texture load is raising an error\n     */\n\n    this.onErrorObservable = new _observable.Observable();\n    /**\n     * If this callback is defined it will be called instead of the default _rebuild function\n     */\n\n    this.onRebuildCallback = null;\n    /**\n     * Gets the width of the texture\n     */\n\n    this.width = 0;\n    /**\n     * Gets the height of the texture\n     */\n\n    this.height = 0;\n    /**\n     * Gets the depth of the texture\n     */\n\n    this.depth = 0;\n    /**\n     * Gets the initial width of the texture (It could be rescaled if the current system does not support non power of two textures)\n     */\n\n    this.baseWidth = 0;\n    /**\n     * Gets the initial height of the texture (It could be rescaled if the current system does not support non power of two textures)\n     */\n\n    this.baseHeight = 0;\n    /**\n     * Gets the initial depth of the texture (It could be rescaled if the current system does not support non power of two textures)\n     */\n\n    this.baseDepth = 0;\n    /**\n     * Gets a boolean indicating if the texture is inverted on Y axis\n     */\n\n    this.invertY = false; // Private\n\n    /** @internal */\n\n    this._invertVScale = false;\n    /** @internal */\n\n    this._associatedChannel = -1;\n    /** @internal */\n\n    this._source = InternalTextureSource.Unknown;\n    /** @internal */\n\n    this._buffer = null;\n    /** @internal */\n\n    this._bufferView = null;\n    /** @internal */\n\n    this._bufferViewArray = null;\n    /** @internal */\n\n    this._bufferViewArrayArray = null;\n    /** @internal */\n\n    this._size = 0;\n    /** @internal */\n\n    this._extension = \"\";\n    /** @internal */\n\n    this._files = null;\n    /** @internal */\n\n    this._workingCanvas = null;\n    /** @internal */\n\n    this._workingContext = null;\n    /** @internal */\n\n    this._cachedCoordinatesMode = null;\n    /** @internal */\n\n    this._isDisabled = false;\n    /** @internal */\n\n    this._compression = null;\n    /** @internal */\n\n    this._sphericalPolynomial = null;\n    /** @internal */\n\n    this._sphericalPolynomialPromise = null;\n    /** @internal */\n\n    this._sphericalPolynomialComputed = false;\n    /** @internal */\n\n    this._lodGenerationScale = 0;\n    /** @internal */\n\n    this._lodGenerationOffset = 0;\n    /** @internal */\n\n    this._useSRGBBuffer = false; // The following three fields helps sharing generated fixed LODs for texture filtering\n    // In environment not supporting the textureLOD extension like EDGE. They are for internal use only.\n    // They are at the level of the gl texture to benefit from the cache.\n\n    /** @internal */\n\n    this._lodTextureHigh = null;\n    /** @internal */\n\n    this._lodTextureMid = null;\n    /** @internal */\n\n    this._lodTextureLow = null;\n    /** @internal */\n\n    this._isRGBD = false;\n    /** @internal */\n\n    this._linearSpecularLOD = false;\n    /** @internal */\n\n    this._irradianceTexture = null;\n    /** @internal */\n\n    this._hardwareTexture = null;\n    /** @internal */\n\n    this._maxLodLevel = null;\n    /** @internal */\n\n    this._references = 1;\n    /** @internal */\n\n    this._gammaSpace = null;\n    this._engine = engine;\n    this._source = source;\n    this._uniqueId = InternalTexture._Counter++;\n\n    if (!delayAllocation) {\n      this._hardwareTexture = engine._createHardwareTexture();\n    }\n  }\n  /**\n   * Increments the number of references (ie. the number of Texture that point to it)\n   */\n\n\n  incrementReferences() {\n    this._references++;\n  }\n  /**\n   * Change the size of the texture (not the size of the content)\n   * @param width defines the new width\n   * @param height defines the new height\n   * @param depth defines the new depth (1 by default)\n   */\n\n\n  updateSize(width, height, depth = 1) {\n    this._engine.updateTextureDimensions(this, width, height, depth);\n\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.baseWidth = width;\n    this.baseHeight = height;\n    this.baseDepth = depth;\n    this._size = width * height * depth;\n  }\n  /** @internal */\n\n\n  _rebuild() {\n    var _a;\n\n    this.isReady = false;\n    this._cachedCoordinatesMode = null;\n    this._cachedWrapU = null;\n    this._cachedWrapV = null;\n    this._cachedWrapR = null;\n    this._cachedAnisotropicFilteringLevel = null;\n\n    if (this.onRebuildCallback) {\n      const data = this.onRebuildCallback(this);\n\n      const swapAndSetIsReady = proxyInternalTexture => {\n        proxyInternalTexture._swapAndDie(this, false);\n\n        this.isReady = data.isReady;\n      };\n\n      if (data.isAsync) {\n        data.proxy.then(swapAndSetIsReady);\n      } else {\n        swapAndSetIsReady(data.proxy);\n      }\n\n      return;\n    }\n\n    let proxy;\n\n    switch (this.source) {\n      case InternalTextureSource.Temp:\n        break;\n\n      case InternalTextureSource.Url:\n        proxy = this._engine.createTexture((_a = this._originalUrl) !== null && _a !== void 0 ? _a : this.url, !this.generateMipMaps, this.invertY, null, this.samplingMode, // Do not use Proxy here as it could be fully synchronous\n        // and proxy would be undefined.\n        temp => {\n          temp._swapAndDie(this, false);\n\n          this.isReady = true;\n        }, null, this._buffer, undefined, this.format, this._extension, undefined, undefined, undefined, this._useSRGBBuffer);\n        return;\n\n      case InternalTextureSource.Raw:\n        proxy = this._engine.createRawTexture(this._bufferView, this.baseWidth, this.baseHeight, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression, this.type, undefined, this._useSRGBBuffer);\n\n        proxy._swapAndDie(this, false);\n\n        this.isReady = true;\n        break;\n\n      case InternalTextureSource.Raw3D:\n        proxy = this._engine.createRawTexture3D(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression, this.type);\n\n        proxy._swapAndDie(this, false);\n\n        this.isReady = true;\n        break;\n\n      case InternalTextureSource.Raw2DArray:\n        proxy = this._engine.createRawTexture2DArray(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression, this.type);\n\n        proxy._swapAndDie(this, false);\n\n        this.isReady = true;\n        break;\n\n      case InternalTextureSource.Dynamic:\n        proxy = this._engine.createDynamicTexture(this.baseWidth, this.baseHeight, this.generateMipMaps, this.samplingMode);\n\n        proxy._swapAndDie(this, false);\n\n        this._engine.updateDynamicTexture(this, this._engine.getRenderingCanvas(), this.invertY, undefined, undefined, true); // The engine will make sure to update content so no need to flag it as isReady = true\n\n\n        break;\n\n      case InternalTextureSource.Cube:\n        proxy = this._engine.createCubeTexture(this.url, null, this._files, !this.generateMipMaps, () => {\n          proxy._swapAndDie(this, false);\n\n          this.isReady = true;\n        }, null, this.format, this._extension, false, 0, 0, null, undefined, this._useSRGBBuffer);\n        return;\n\n      case InternalTextureSource.CubeRaw:\n        proxy = this._engine.createRawCubeTexture(this._bufferViewArray, this.width, this.format, this.type, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\n\n        proxy._swapAndDie(this, false);\n\n        this.isReady = true;\n        break;\n\n      case InternalTextureSource.CubeRawRGBD:\n        // This case is being handeled by the environment texture tools and is not a part of the rebuild process.\n        // To use CubeRawRGBD use updateRGBDAsync on the cube texture.\n        return;\n\n      case InternalTextureSource.CubePrefiltered:\n        proxy = this._engine.createPrefilteredCubeTexture(this.url, null, this._lodGenerationScale, this._lodGenerationOffset, proxy => {\n          if (proxy) {\n            proxy._swapAndDie(this, false);\n          }\n\n          this.isReady = true;\n        }, null, this.format, this._extension);\n        proxy._sphericalPolynomial = this._sphericalPolynomial;\n        return;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _swapAndDie(target, swapAll = true) {\n    // TODO what about refcount on target?\n    var _a;\n\n    (_a = this._hardwareTexture) === null || _a === void 0 ? void 0 : _a.setUsage(target._source, this.generateMipMaps, this.isCube, this.width, this.height);\n    target._hardwareTexture = this._hardwareTexture;\n\n    if (swapAll) {\n      target._isRGBD = this._isRGBD;\n    }\n\n    if (this._lodTextureHigh) {\n      if (target._lodTextureHigh) {\n        target._lodTextureHigh.dispose();\n      }\n\n      target._lodTextureHigh = this._lodTextureHigh;\n    }\n\n    if (this._lodTextureMid) {\n      if (target._lodTextureMid) {\n        target._lodTextureMid.dispose();\n      }\n\n      target._lodTextureMid = this._lodTextureMid;\n    }\n\n    if (this._lodTextureLow) {\n      if (target._lodTextureLow) {\n        target._lodTextureLow.dispose();\n      }\n\n      target._lodTextureLow = this._lodTextureLow;\n    }\n\n    if (this._irradianceTexture) {\n      if (target._irradianceTexture) {\n        target._irradianceTexture.dispose();\n      }\n\n      target._irradianceTexture = this._irradianceTexture;\n    }\n\n    const cache = this._engine.getLoadedTexturesCache();\n\n    let index = cache.indexOf(this);\n\n    if (index !== -1) {\n      cache.splice(index, 1);\n    }\n\n    index = cache.indexOf(target);\n\n    if (index === -1) {\n      cache.push(target);\n    }\n  }\n  /**\n   * Dispose the current allocated resources\n   */\n\n\n  dispose() {\n    this._references--;\n    this.onLoadedObservable.clear();\n    this.onErrorObservable.clear();\n\n    if (this._references === 0) {\n      this._engine._releaseTexture(this);\n\n      this._hardwareTexture = null;\n    }\n  }\n\n}\n/** @internal */\n\n\nexports.InternalTexture = InternalTexture;\nInternalTexture._Counter = 0;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","InternalTexture","InternalTextureSource","_observable","_textureSampler","TextureSampler","generateMipMaps","_uniqueId","_setUniqueId","id","getEngine","_engine","_source","constructor","engine","source","delayAllocation","isMultiview","is2DArray","is3D","isCube","isReady","url","samples","format","type","onLoadedObservable","Observable","onErrorObservable","onRebuildCallback","baseDepth","baseHeight","baseWidth","depth","height","width","_invertVScale","invertY","_associatedChannel","_bufferViewArrayArray","_bufferViewArray","_bufferView","_buffer","_size","_extension","_cachedCoordinatesMode","_workingContext","_workingCanvas","_files","_isDisabled","_sphericalPolynomialPromise","_sphericalPolynomial","_compression","_sphericalPolynomialComputed","_lodGenerationOffset","_lodGenerationScale","_useSRGBBuffer","_lodTextureLow","_lodTextureMid","_lodTextureHigh","_linearSpecularLOD","_isRGBD","_maxLodLevel","_hardwareTexture","_irradianceTexture","_references","_gammaSpace","_Counter","_createHardwareTexture","incrementReferences","updateSize","updateTextureDimensions","_rebuild","_cachedAnisotropicFilteringLevel","_cachedWrapR","_cachedWrapV","_cachedWrapU","data","swapAndSetIsReady","proxyInternalTexture","_swapAndDie","isAsync","proxy","then","Url","createTexture","_a","_originalUrl","samplingMode","temp","undefined","Raw","createRawTexture","Raw3D","createRawTexture3D","Raw2DArray","createRawTexture2DArray","Dynamic","createDynamicTexture","updateDynamicTexture","getRenderingCanvas","Cube","createCubeTexture","CubeRaw","createRawCubeTexture","CubePrefiltered","createPrefilteredCubeTexture","target","swapAll","setUsage","dispose","cache","getLoadedTexturesCache","index","indexOf","splice","push","clear","_releaseTexture"]
}
