shadow$provide.module$node_modules$$babylonjs$core$Materials$material=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Material=void 0;global=require("module$node_modules$$babylonjs$core$tslib_es6");var _decorators=require("module$node_modules$$babylonjs$core$Misc$decorators"),_tools=require("module$node_modules$$babylonjs$core$Misc$tools"),_observable=require("module$node_modules$$babylonjs$core$Misc$observable"),_engineStore=require("module$node_modules$$babylonjs$core$Engines$engineStore"),
_subMesh=require("module$node_modules$$babylonjs$core$Meshes$subMesh"),_uniformBuffer=require("module$node_modules$$babylonjs$core$Materials$uniformBuffer"),_logger=require("module$node_modules$$babylonjs$core$Misc$logger"),_mathPlane=require("module$node_modules$$babylonjs$core$Maths$math_plane"),_materialHelper=require("module$node_modules$$babylonjs$core$Materials$materialHelper"),_drawWrapper=require("module$node_modules$$babylonjs$core$Materials$drawWrapper"),_materialStencilState=require("module$node_modules$$babylonjs$core$Materials$materialStencilState"),
_scene=require("module$node_modules$$babylonjs$core$scene"),_materialPluginEvent=require("module$node_modules$$babylonjs$core$Materials$materialPluginEvent");class Material{get canRenderToMRT(){return!1}set alpha(value){if(this._alpha!==value){var oldValue=this._alpha;this._alpha=value;1!==oldValue&&1!==value||this.markAsDirty(Material.MiscDirtyFlag+Material.PrePassDirtyFlag)}}get alpha(){return this._alpha}set backFaceCulling(value){this._backFaceCulling!==value&&(this._backFaceCulling=value,this.markAsDirty(Material.TextureDirtyFlag))}get backFaceCulling(){return this._backFaceCulling}set cullBackFaces(value){this._cullBackFaces!==
value&&(this._cullBackFaces=value,this.markAsDirty(Material.TextureDirtyFlag))}get cullBackFaces(){return this._cullBackFaces}get blockDirtyMechanism(){return this._blockDirtyMechanism}set blockDirtyMechanism(value){this._blockDirtyMechanism!==value&&((this._blockDirtyMechanism=value)||this.markDirty())}atomicMaterialsUpdate(callback){this.blockDirtyMechanism=!0;try{callback(this)}finally{this.blockDirtyMechanism=!1}}get hasRenderTargetTextures(){this._eventInfo.hasRenderTargetTextures=!1;this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);
return this._eventInfo.hasRenderTargetTextures}set onDispose(callback){this._onDisposeObserver&&this.onDisposeObservable.remove(this._onDisposeObserver);this._onDisposeObserver=this.onDisposeObservable.add(callback)}get onBindObservable(){this._onBindObservable||(this._onBindObservable=new _observable.Observable);return this._onBindObservable}set onBind(callback){this._onBindObserver&&this.onBindObservable.remove(this._onBindObserver);this._onBindObserver=this.onBindObservable.add(callback)}get onUnBindObservable(){this._onUnBindObservable||
(this._onUnBindObservable=new _observable.Observable);return this._onUnBindObservable}get onEffectCreatedObservable(){this._onEffectCreatedObservable||(this._onEffectCreatedObservable=new _observable.Observable);return this._onEffectCreatedObservable}set alphaMode(value){this._alphaMode!==value&&(this._alphaMode=value,this.markAsDirty(Material.TextureDirtyFlag))}get alphaMode(){return this._alphaMode}set needDepthPrePass(value){this._needDepthPrePass!==value&&(this._needDepthPrePass=value)&&(this.checkReadyOnEveryCall=
!0)}get needDepthPrePass(){return this._needDepthPrePass}get isPrePassCapable(){return!1}set fogEnabled(value){this._fogEnabled!==value&&(this._fogEnabled=value,this.markAsDirty(Material.MiscDirtyFlag))}get fogEnabled(){return this._fogEnabled}get wireframe(){switch(this._fillMode){case Material.WireFrameFillMode:case Material.LineListDrawMode:case Material.LineLoopDrawMode:case Material.LineStripDrawMode:return!0}return this._scene.forceWireframe}set wireframe(value){this.fillMode=value?Material.WireFrameFillMode:
Material.TriangleFillMode}get pointsCloud(){switch(this._fillMode){case Material.PointFillMode:case Material.PointListDrawMode:return!0}return this._scene.forcePointsCloud}set pointsCloud(value){this.fillMode=value?Material.PointFillMode:Material.TriangleFillMode}get fillMode(){return this._fillMode}set fillMode(value){this._fillMode!==value&&(this._fillMode=value,this.markAsDirty(Material.MiscDirtyFlag))}_getDrawWrapper(){return this._drawWrapper}_setDrawWrapper(drawWrapper){this._drawWrapper=drawWrapper}constructor(name,
scene,doNotAdd){this.shadowDepthWrapper=null;this.allowShaderHotSwapping=!0;this.reservedDataStore=this.metadata=null;this.checkReadyOnlyOnce=this.checkReadyOnEveryCall=!1;this.state="";this._alpha=1;this._cullBackFaces=this._backFaceCulling=!0;this._blockDirtyMechanism=!1;this.getRenderTargetTextures=this.onError=this.onCompiled=null;this._storeEffectOnSubMeshes=this.doNotSerialize=!1;this.animations=null;this.onDisposeObservable=new _observable.Observable;this._onBindObserver=this._onUnBindObservable=
this._onDisposeObserver=null;this._alphaMode=2;this.forceDepthWrite=this.disableColorWrite=this.disableDepthWrite=this._needDepthPrePass=!1;this.depthFunction=0;this.separateCullingPass=!1;this._fogEnabled=!0;this.pointSize=1;this.zOffsetUnits=this.zOffset=0;this.stencil=new _materialStencilState.MaterialStencilState;this._useUBO=!1;this._fillMode=Material.TriangleFillMode;this._cachedColorWriteState=this._cachedDepthWriteState=!1;this._cachedDepthFunctionState=0;this._indexInSceneMaterialArray=-1;
this._parentContainer=this.meshMap=null;this._uniformBufferLayoutBuilt=!1;this._eventInfo={};this._callbackPluginEventGeneric=()=>{};this._callbackPluginEventIsReadyForSubMesh=()=>{};this._callbackPluginEventPrepareDefines=()=>{};this._callbackPluginEventPrepareDefinesBeforeAttributes=()=>{};this._callbackPluginEventHardBindForSubMesh=()=>{};this._callbackPluginEventBindForSubMesh=()=>{};this._callbackPluginEventHasRenderTargetTextures=()=>{};this._callbackPluginEventFillRenderTargetTextures=()=>
{};this._forceAlphaTest=!1;this._transparencyMode=null;this.name=name;if(scene=scene||_engineStore.EngineStore.LastCreatedScene)this._scene=scene,this._dirtyCallbacks={},this._dirtyCallbacks[1]=this._markAllSubMeshesAsTexturesDirty.bind(this),this._dirtyCallbacks[2]=this._markAllSubMeshesAsLightsDirty.bind(this),this._dirtyCallbacks[4]=this._markAllSubMeshesAsFresnelDirty.bind(this),this._dirtyCallbacks[8]=this._markAllSubMeshesAsAttributesDirty.bind(this),this._dirtyCallbacks[16]=this._markAllSubMeshesAsMiscDirty.bind(this),
this._dirtyCallbacks[32]=this._markAllSubMeshesAsPrePassDirty.bind(this),this._dirtyCallbacks[63]=this._markAllSubMeshesAsAllDirty.bind(this),this.id=name||_tools.Tools.RandomId(),this.uniqueId=this._scene.getUniqueId(),this._materialContext=this._scene.getEngine().createMaterialContext(),this._drawWrapper=new _drawWrapper.DrawWrapper(this._scene.getEngine(),!1),this._drawWrapper.materialContext=this._materialContext,this.sideOrientation=this._scene.useRightHandedSystem?Material.ClockWiseSideOrientation:
Material.CounterClockWiseSideOrientation,this._uniformBuffer=new _uniformBuffer.UniformBuffer(this._scene.getEngine(),void 0,void 0,name),this._useUBO=this.getScene().getEngine().supportsUniformBuffers,doNotAdd||this._scene.addMaterial(this),this._scene.useMaterialMeshMap&&(this.meshMap={}),Material.OnEventObservable.notifyObservers(this,_materialPluginEvent.MaterialPluginEvent.Created)}toString(fullDetails){return"Name: "+this.name}getClassName(){return"Material"}get _isMaterial(){return!0}get isFrozen(){return this.checkReadyOnlyOnce}freeze(){this.markDirty();
this.checkReadyOnlyOnce=!0}unfreeze(){this.markDirty();this.checkReadyOnlyOnce=!1}isReady(mesh,useInstances){return!0}isReadyForSubMesh(mesh,subMesh,useInstances){mesh=subMesh.materialDefines;if(!mesh)return!1;this._eventInfo.isReadyForSubMesh=!0;this._eventInfo.defines=mesh;this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);return this._eventInfo.isReadyForSubMesh}getEffect(){return this._drawWrapper.effect}getScene(){return this._scene}get transparencyMode(){return this._transparencyMode}set transparencyMode(value){this._transparencyMode!==
value&&(this._transparencyMode=value,this._forceAlphaTest=value===Material.MATERIAL_ALPHATESTANDBLEND,this._markAllSubMeshesAsTexturesAndMiscDirty())}get _disableAlphaBlending(){return this._transparencyMode===Material.MATERIAL_OPAQUE||this._transparencyMode===Material.MATERIAL_ALPHATEST}needAlphaBlending(){return this._disableAlphaBlending?!1:1>this.alpha}needAlphaBlendingForMesh(mesh){return 1>mesh.visibility?!0:this._disableAlphaBlending?!1:mesh.hasVertexAlpha||this.needAlphaBlending()}needAlphaTesting(){return this._forceAlphaTest?
!0:!1}_shouldTurnAlphaTestOn(mesh){return!this.needAlphaBlendingForMesh(mesh)&&this.needAlphaTesting()}getAlphaTestTexture(){return null}markDirty(forceMaterialDirty=!1){const meshes=this.getScene().meshes;for(const mesh of meshes)if(mesh.subMeshes)for(const subMesh of mesh.subMeshes)subMesh.getMaterial()===this&&subMesh.effect&&(subMesh.effect._wasPreviouslyReady=!1,subMesh.effect._wasPreviouslyUsingInstances=null,subMesh.effect._forceRebindOnNextCall=forceMaterialDirty);forceMaterialDirty&&this.markAsDirty(Material.AllDirtyFlag)}_preBind(effect,
overrideOrientation=null){const engine=this._scene.getEngine();overrideOrientation=(null==overrideOrientation?this.sideOrientation:overrideOrientation)===Material.ClockWiseSideOrientation;engine.enableEffect(effect?effect:this._getDrawWrapper());engine.setState(this.backFaceCulling,this.zOffset,!1,overrideOrientation,this._scene._mirroredCameraPosition?!this.cullBackFaces:this.cullBackFaces,this.stencil,this.zOffsetUnits);return overrideOrientation}bind(world,mesh){}buildUniformLayout(){const ubo=
this._uniformBuffer;this._eventInfo.ubo=ubo;this._callbackPluginEventGeneric(_materialPluginEvent.MaterialPluginEvent.PrepareUniformBuffer,this._eventInfo);ubo.create();this._uniformBufferLayoutBuilt=!0}bindForSubMesh(world,mesh,subMesh){if(world=subMesh.effect)this._eventInfo.subMesh=subMesh,this._callbackPluginEventBindForSubMesh(this._eventInfo),world._forceRebindOnNextCall=!1}bindOnlyWorldMatrix(world){}bindView(effect){this._useUBO?this._needToBindSceneUbo=!0:effect.setMatrix("view",this.getScene().getViewMatrix())}bindViewProjection(effect){this._useUBO?
this._needToBindSceneUbo=!0:(effect.setMatrix("viewProjection",this.getScene().getTransformMatrix()),effect.setMatrix("projection",this.getScene().getProjectionMatrix()))}bindEyePosition(effect,variableName){this._useUBO?this._needToBindSceneUbo=!0:this._scene.bindEyePosition(effect,variableName)}_afterBind(mesh,effect=null){this._scene._cachedMaterial=this;this._needToBindSceneUbo&&effect&&(this._needToBindSceneUbo=!1,_materialHelper.MaterialHelper.BindSceneUniformBuffer(effect,this.getScene().getSceneUniformBuffer()),
this._scene.finalizeSceneUbo());this._scene._cachedVisibility=mesh?mesh.visibility:1;this._onBindObservable&&mesh&&this._onBindObservable.notifyObservers(mesh);this.disableDepthWrite&&(mesh=this._scene.getEngine(),this._cachedDepthWriteState=mesh.getDepthWrite(),mesh.setDepthWrite(!1));this.disableColorWrite&&(mesh=this._scene.getEngine(),this._cachedColorWriteState=mesh.getColorWrite(),mesh.setColorWrite(!1));0!==this.depthFunction&&(mesh=this._scene.getEngine(),this._cachedDepthFunctionState=mesh.getDepthFunction()||
0,mesh.setDepthFunction(this.depthFunction))}unbind(){this._onUnBindObservable&&this._onUnBindObservable.notifyObservers(this);0!==this.depthFunction&&this._scene.getEngine().setDepthFunction(this._cachedDepthFunctionState);this.disableDepthWrite&&this._scene.getEngine().setDepthWrite(this._cachedDepthWriteState);this.disableColorWrite&&this._scene.getEngine().setColorWrite(this._cachedColorWriteState)}getAnimatables(){this._eventInfo.animatables=[];this._callbackPluginEventGeneric(_materialPluginEvent.MaterialPluginEvent.GetAnimatables,
this._eventInfo);return this._eventInfo.animatables}getActiveTextures(){this._eventInfo.activeTextures=[];this._callbackPluginEventGeneric(_materialPluginEvent.MaterialPluginEvent.GetActiveTextures,this._eventInfo);return this._eventInfo.activeTextures}hasTexture(texture){this._eventInfo.hasTexture=!1;this._eventInfo.texture=texture;this._callbackPluginEventGeneric(_materialPluginEvent.MaterialPluginEvent.HasTexture,this._eventInfo);return this._eventInfo.hasTexture}clone(name){return null}_clonePlugins(targetMaterial,
rootUrl){const serializationObject={};this._serializePlugins(serializationObject);Material._parsePlugins(serializationObject,targetMaterial,this._scene,rootUrl);if(this.pluginManager)for(const plugin of this.pluginManager._plugins)rootUrl=targetMaterial.pluginManager.getPlugin(plugin.name),plugin.copyTo(rootUrl)}getBindedMeshes(){if(this.meshMap){const result=[];for(const meshId in this.meshMap){const mesh=this.meshMap[meshId];mesh&&result.push(mesh)}return result}return this._scene.meshes.filter(mesh=>
mesh.material===this)}forceCompilation(mesh,onCompiled,options,onError){const localOptions=Object.assign({clipPlane:!1,useInstances:!1},options),scene=this.getScene(),currentHotSwapingState=this.allowShaderHotSwapping;this.allowShaderHotSwapping=!1;const checkReady=()=>{if(this._scene&&this._scene.getEngine()){var clipPlaneState=scene.clipPlane;localOptions.clipPlane&&(scene.clipPlane=new _mathPlane.Plane(0,0,0,1));if(this._storeEffectOnSubMeshes){let allDone=!0,lastError=null;if(mesh.subMeshes){const tempSubMesh=
new _subMesh.SubMesh(0,0,0,0,0,mesh,void 0,!1,!1);tempSubMesh.materialDefines&&(tempSubMesh.materialDefines._renderId=-1);this.isReadyForSubMesh(mesh,tempSubMesh,localOptions.useInstances)||(tempSubMesh.effect&&tempSubMesh.effect.getCompilationError()&&tempSubMesh.effect.allFallbacksProcessed()?lastError=tempSubMesh.effect.getCompilationError():(allDone=!1,setTimeout(checkReady,16)))}allDone&&(this.allowShaderHotSwapping=currentHotSwapingState,lastError&&onError&&onError(lastError),onCompiled&&onCompiled(this))}else this.isReady()?
(this.allowShaderHotSwapping=currentHotSwapingState,onCompiled&&onCompiled(this)):setTimeout(checkReady,16);localOptions.clipPlane&&(scene.clipPlane=clipPlaneState)}};checkReady()}forceCompilationAsync(mesh,options){return new Promise((resolve,reject)=>{this.forceCompilation(mesh,()=>{resolve()},options,reason=>{reject(reason)})})}markAsDirty(flag){this.getScene().blockMaterialDirtyMechanism||this._blockDirtyMechanism||(Material._DirtyCallbackArray.length=0,flag&Material.TextureDirtyFlag&&Material._DirtyCallbackArray.push(Material._TextureDirtyCallBack),
flag&Material.LightDirtyFlag&&Material._DirtyCallbackArray.push(Material._LightsDirtyCallBack),flag&Material.FresnelDirtyFlag&&Material._DirtyCallbackArray.push(Material._FresnelDirtyCallBack),flag&Material.AttributesDirtyFlag&&Material._DirtyCallbackArray.push(Material._AttributeDirtyCallBack),flag&Material.MiscDirtyFlag&&Material._DirtyCallbackArray.push(Material._MiscDirtyCallBack),flag&Material.PrePassDirtyFlag&&Material._DirtyCallbackArray.push(Material._PrePassDirtyCallBack),Material._DirtyCallbackArray.length&&
this._markAllSubMeshesAsDirty(Material._RunDirtyCallBacks),this.getScene().resetCachedMaterial())}resetDrawCache(){const meshes=this.getScene().meshes;for(const mesh of meshes)if(mesh.subMeshes)for(const subMesh of mesh.subMeshes)subMesh.getMaterial()===this&&subMesh.resetDrawCache()}_markAllSubMeshesAsDirty(func){if(!this.getScene().blockMaterialDirtyMechanism&&!this._blockDirtyMechanism){var meshes=this.getScene().meshes;for(const mesh of meshes)if(mesh.subMeshes)for(const subMesh of mesh.subMeshes)if(subMesh.getMaterial(!1)===
this)for(const drawWrapper of subMesh._drawWrappers)drawWrapper&&drawWrapper.defines&&drawWrapper.defines.markAllAsDirty&&this._materialContext===drawWrapper.materialContext&&func(drawWrapper.defines)}}_markScenePrePassDirty(){if(!this.getScene().blockMaterialDirtyMechanism&&!this._blockDirtyMechanism){var prePassRenderer=this.getScene().enablePrePassRenderer();prePassRenderer&&prePassRenderer.markAsDirty()}}_markAllSubMeshesAsAllDirty(){this._markAllSubMeshesAsDirty(Material._AllDirtyCallBack)}_markAllSubMeshesAsImageProcessingDirty(){this._markAllSubMeshesAsDirty(Material._ImageProcessingDirtyCallBack)}_markAllSubMeshesAsTexturesDirty(){this._markAllSubMeshesAsDirty(Material._TextureDirtyCallBack)}_markAllSubMeshesAsFresnelDirty(){this._markAllSubMeshesAsDirty(Material._FresnelDirtyCallBack)}_markAllSubMeshesAsFresnelAndMiscDirty(){this._markAllSubMeshesAsDirty(Material._FresnelAndMiscDirtyCallBack)}_markAllSubMeshesAsLightsDirty(){this._markAllSubMeshesAsDirty(Material._LightsDirtyCallBack)}_markAllSubMeshesAsAttributesDirty(){this._markAllSubMeshesAsDirty(Material._AttributeDirtyCallBack)}_markAllSubMeshesAsMiscDirty(){this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack)}_markAllSubMeshesAsPrePassDirty(){this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack)}_markAllSubMeshesAsTexturesAndMiscDirty(){this._markAllSubMeshesAsDirty(Material._TextureAndMiscDirtyCallBack)}_checkScenePerformancePriority(){if(this._scene.performancePriority!==
_scene.ScenePerformancePriority.BackwardCompatible){this.checkReadyOnlyOnce=!0;const observer=this._scene.onScenePerformancePriorityChangedObservable.addOnce(()=>{this.checkReadyOnlyOnce=!1});this.onDisposeObservable.add(()=>{this._scene.onScenePerformancePriorityChangedObservable.remove(observer)})}}setPrePassRenderer(prePassRenderer){return!1}dispose(forceDisposeEffect,forceDisposeTextures,notBoundToMesh){const scene=this.getScene();scene.stopAnimation(this);scene.freeProcessedMaterials();scene.removeMaterial(this);
this._eventInfo.forceDisposeTextures=forceDisposeTextures;this._callbackPluginEventGeneric(_materialPluginEvent.MaterialPluginEvent.Disposed,this._eventInfo);this._parentContainer&&(forceDisposeTextures=this._parentContainer.materials.indexOf(this),-1<forceDisposeTextures&&this._parentContainer.materials.splice(forceDisposeTextures,1),this._parentContainer=null);if(!0!==notBoundToMesh)if(this.meshMap)for(var meshId in this.meshMap){var mesh=this.meshMap[meshId];mesh&&(mesh.material=null,this.releaseVertexArrayObject(mesh,
forceDisposeEffect))}else{meshId=scene.meshes;for(mesh of meshId)mesh.material!==this||mesh.sourceMesh||(mesh.material=null,this.releaseVertexArrayObject(mesh,forceDisposeEffect))}this._uniformBuffer.dispose();forceDisposeEffect&&this._drawWrapper.effect&&(this._storeEffectOnSubMeshes||this._drawWrapper.effect.dispose(),this._drawWrapper.effect=null);this.metadata=null;this.onDisposeObservable.notifyObservers(this);this.onDisposeObservable.clear();this._onBindObservable&&this._onBindObservable.clear();
this._onUnBindObservable&&this._onUnBindObservable.clear();this._onEffectCreatedObservable&&this._onEffectCreatedObservable.clear();this._eventInfo&&(this._eventInfo={})}releaseVertexArrayObject(mesh,forceDisposeEffect){if(mesh.geometry){const geometry=mesh.geometry;if(this._storeEffectOnSubMeshes)for(const subMesh of mesh.subMeshes)geometry._releaseVertexArrayObject(subMesh.effect),forceDisposeEffect&&subMesh.effect&&subMesh.effect.dispose();else geometry._releaseVertexArrayObject(this._drawWrapper.effect)}}serialize(){const serializationObject=
_decorators.SerializationHelper.Serialize(this);serializationObject.stencil=this.stencil.serialize();serializationObject.uniqueId=this.uniqueId;this._serializePlugins(serializationObject);return serializationObject}_serializePlugins(serializationObject){serializationObject.plugins={};if(this.pluginManager)for(const plugin of this.pluginManager._plugins)serializationObject.plugins[plugin.getClassName()]=plugin.serialize()}static Parse(parsedMaterial,scene,rootUrl){if(!parsedMaterial.customType)parsedMaterial.customType=
"BABYLON.StandardMaterial";else if("BABYLON.PBRMaterial"===parsedMaterial.customType&&parsedMaterial.overloadedAlbedo&&(parsedMaterial.customType="BABYLON.LegacyPBRMaterial",!BABYLON.LegacyPBRMaterial))return _logger.Logger.Error("Your scene is trying to load a legacy version of the PBRMaterial, please, include it from the materials library."),null;scene=_tools.Tools.Instantiate(parsedMaterial.customType).Parse(parsedMaterial,scene,rootUrl);scene._loadedUniqueId=parsedMaterial.uniqueId;return scene}static _parsePlugins(serializationObject,
material,scene,rootUrl){var _a;if(serializationObject.plugins)for(const pluginClassName in serializationObject.plugins){const pluginData=serializationObject.plugins[pluginClassName];let plugin=null===(_a=material.pluginManager)||void 0===_a?void 0:_a.getPlugin(pluginData.name);if(!plugin){const pluginClassType=_tools.Tools.Instantiate("BABYLON."+pluginClassName);pluginClassType&&(plugin=new pluginClassType(material))}null===plugin||void 0===plugin?void 0:plugin.parse(pluginData,scene,rootUrl)}}}exports.Material=
Material;Material.TriangleFillMode=0;Material.WireFrameFillMode=1;Material.PointFillMode=2;Material.PointListDrawMode=3;Material.LineListDrawMode=4;Material.LineLoopDrawMode=5;Material.LineStripDrawMode=6;Material.TriangleStripDrawMode=7;Material.TriangleFanDrawMode=8;Material.ClockWiseSideOrientation=0;Material.CounterClockWiseSideOrientation=1;Material.TextureDirtyFlag=1;Material.LightDirtyFlag=2;Material.FresnelDirtyFlag=4;Material.AttributesDirtyFlag=8;Material.MiscDirtyFlag=16;Material.PrePassDirtyFlag=
32;Material.AllDirtyFlag=63;Material.MATERIAL_OPAQUE=0;Material.MATERIAL_ALPHATEST=1;Material.MATERIAL_ALPHABLEND=2;Material.MATERIAL_ALPHATESTANDBLEND=3;Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT=0;Material.MATERIAL_NORMALBLENDMETHOD_RNM=1;Material.OnEventObservable=new _observable.Observable;Material._AllDirtyCallBack=defines=>defines.markAllAsDirty();Material._ImageProcessingDirtyCallBack=defines=>defines.markAsImageProcessingDirty();Material._TextureDirtyCallBack=defines=>defines.markAsTexturesDirty();
Material._FresnelDirtyCallBack=defines=>defines.markAsFresnelDirty();Material._MiscDirtyCallBack=defines=>defines.markAsMiscDirty();Material._PrePassDirtyCallBack=defines=>defines.markAsPrePassDirty();Material._LightsDirtyCallBack=defines=>defines.markAsLightDirty();Material._AttributeDirtyCallBack=defines=>defines.markAsAttributesDirty();Material._FresnelAndMiscDirtyCallBack=defines=>{Material._FresnelDirtyCallBack(defines);Material._MiscDirtyCallBack(defines)};Material._TextureAndMiscDirtyCallBack=
defines=>{Material._TextureDirtyCallBack(defines);Material._MiscDirtyCallBack(defines)};Material._DirtyCallbackArray=[];Material._RunDirtyCallBacks=defines=>{for(const cb of Material._DirtyCallbackArray)cb(defines)};(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"id",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"uniqueId",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"name",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],
Material.prototype,"metadata",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"checkReadyOnEveryCall",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"checkReadyOnlyOnce",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"state",void 0);(0,global.__decorate)([(0,_decorators.serialize)("alpha")],Material.prototype,"_alpha",void 0);(0,global.__decorate)([(0,_decorators.serialize)("backFaceCulling")],Material.prototype,
"_backFaceCulling",void 0);(0,global.__decorate)([(0,_decorators.serialize)("cullBackFaces")],Material.prototype,"_cullBackFaces",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"sideOrientation",void 0);(0,global.__decorate)([(0,_decorators.serialize)("alphaMode")],Material.prototype,"_alphaMode",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"_needDepthPrePass",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,
"disableDepthWrite",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"disableColorWrite",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"forceDepthWrite",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"depthFunction",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"separateCullingPass",void 0);(0,global.__decorate)([(0,_decorators.serialize)("fogEnabled")],Material.prototype,
"_fogEnabled",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"pointSize",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"zOffset",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"zOffsetUnits",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"pointsCloud",null);(0,global.__decorate)([(0,_decorators.serialize)()],Material.prototype,"fillMode",null);(0,global.__decorate)([(0,_decorators.serialize)()],
Material.prototype,"transparencyMode",null)}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Materials$material.js.map
