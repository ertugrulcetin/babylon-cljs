{
"version":3,
"file":"module$node_modules$$babylonjs$core$Culling$boundingBox.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Culling/boundingBox.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Culling$boundingBox\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BoundingBox = void 0;\n\nvar _arrayTools = require(\"../Misc/arrayTools.js\");\n\nvar _mathVector = require(\"../Maths/math.vector.js\");\n\nvar _mathConstants = require(\"../Maths/math.constants.js\");\n\n/**\n * Class used to store bounding box information\n */\nclass BoundingBox {\n  /**\n   * Creates a new bounding box\n   * @param min defines the minimum vector (in local space)\n   * @param max defines the maximum vector (in local space)\n   * @param worldMatrix defines the new world matrix\n   */\n  constructor(min, max, worldMatrix) {\n    /**\n     * Gets the 8 vectors representing the bounding box in local space\n     */\n    this.vectors = _arrayTools.ArrayTools.BuildArray(8, _mathVector.Vector3.Zero);\n    /**\n     * Gets the center of the bounding box in local space\n     */\n\n    this.center = _mathVector.Vector3.Zero();\n    /**\n     * Gets the center of the bounding box in world space\n     */\n\n    this.centerWorld = _mathVector.Vector3.Zero();\n    /**\n     * Gets the extend size in local space\n     */\n\n    this.extendSize = _mathVector.Vector3.Zero();\n    /**\n     * Gets the extend size in world space\n     */\n\n    this.extendSizeWorld = _mathVector.Vector3.Zero();\n    /**\n     * Gets the OBB (object bounding box) directions\n     */\n\n    this.directions = _arrayTools.ArrayTools.BuildArray(3, _mathVector.Vector3.Zero);\n    /**\n     * Gets the 8 vectors representing the bounding box in world space\n     */\n\n    this.vectorsWorld = _arrayTools.ArrayTools.BuildArray(8, _mathVector.Vector3.Zero);\n    /**\n     * Gets the minimum vector in world space\n     */\n\n    this.minimumWorld = _mathVector.Vector3.Zero();\n    /**\n     * Gets the maximum vector in world space\n     */\n\n    this.maximumWorld = _mathVector.Vector3.Zero();\n    /**\n     * Gets the minimum vector in local space\n     */\n\n    this.minimum = _mathVector.Vector3.Zero();\n    /**\n     * Gets the maximum vector in local space\n     */\n\n    this.maximum = _mathVector.Vector3.Zero();\n    /** @internal */\n\n    this._drawWrapperFront = null;\n    /** @internal */\n\n    this._drawWrapperBack = null;\n    this.reConstruct(min, max, worldMatrix);\n  } // Methods\n\n  /**\n   * Recreates the entire bounding box from scratch as if we call the constructor in place\n   * @param min defines the new minimum vector (in local space)\n   * @param max defines the new maximum vector (in local space)\n   * @param worldMatrix defines the new world matrix\n   */\n\n\n  reConstruct(min, max, worldMatrix) {\n    const minX = min.x,\n          minY = min.y,\n          minZ = min.z,\n          maxX = max.x,\n          maxY = max.y,\n          maxZ = max.z;\n    const vectors = this.vectors;\n    this.minimum.copyFromFloats(minX, minY, minZ);\n    this.maximum.copyFromFloats(maxX, maxY, maxZ);\n    vectors[0].copyFromFloats(minX, minY, minZ);\n    vectors[1].copyFromFloats(maxX, maxY, maxZ);\n    vectors[2].copyFromFloats(maxX, minY, minZ);\n    vectors[3].copyFromFloats(minX, maxY, minZ);\n    vectors[4].copyFromFloats(minX, minY, maxZ);\n    vectors[5].copyFromFloats(maxX, maxY, minZ);\n    vectors[6].copyFromFloats(minX, maxY, maxZ);\n    vectors[7].copyFromFloats(maxX, minY, maxZ); // OBB\n\n    max.addToRef(min, this.center).scaleInPlace(0.5);\n    max.subtractToRef(min, this.extendSize).scaleInPlace(0.5);\n    this._worldMatrix = worldMatrix || _mathVector.Matrix.IdentityReadOnly;\n\n    this._update(this._worldMatrix);\n  }\n  /**\n   * Scale the current bounding box by applying a scale factor\n   * @param factor defines the scale factor to apply\n   * @returns the current bounding box\n   */\n\n\n  scale(factor) {\n    const tmpVectors = BoundingBox._TmpVector3;\n    const diff = this.maximum.subtractToRef(this.minimum, tmpVectors[0]);\n    const len = diff.length();\n    diff.normalizeFromLength(len);\n    const distance = len * factor;\n    const newRadius = diff.scaleInPlace(distance * 0.5);\n    const min = this.center.subtractToRef(newRadius, tmpVectors[1]);\n    const max = this.center.addToRef(newRadius, tmpVectors[2]);\n    this.reConstruct(min, max, this._worldMatrix);\n    return this;\n  }\n  /**\n   * Gets the world matrix of the bounding box\n   * @returns a matrix\n   */\n\n\n  getWorldMatrix() {\n    return this._worldMatrix;\n  }\n  /**\n   * @internal\n   */\n\n\n  _update(world) {\n    const minWorld = this.minimumWorld;\n    const maxWorld = this.maximumWorld;\n    const directions = this.directions;\n    const vectorsWorld = this.vectorsWorld;\n    const vectors = this.vectors;\n\n    if (!world.isIdentity()) {\n      minWorld.setAll(Number.MAX_VALUE);\n      maxWorld.setAll(-Number.MAX_VALUE);\n\n      for (let index = 0; index < 8; ++index) {\n        const v = vectorsWorld[index];\n\n        _mathVector.Vector3.TransformCoordinatesToRef(vectors[index], world, v);\n\n        minWorld.minimizeInPlace(v);\n        maxWorld.maximizeInPlace(v);\n      } // Extend\n\n\n      maxWorld.subtractToRef(minWorld, this.extendSizeWorld).scaleInPlace(0.5);\n      maxWorld.addToRef(minWorld, this.centerWorld).scaleInPlace(0.5);\n    } else {\n      minWorld.copyFrom(this.minimum);\n      maxWorld.copyFrom(this.maximum);\n\n      for (let index = 0; index < 8; ++index) {\n        vectorsWorld[index].copyFrom(vectors[index]);\n      } // Extend\n\n\n      this.extendSizeWorld.copyFrom(this.extendSize);\n      this.centerWorld.copyFrom(this.center);\n    }\n\n    _mathVector.Vector3.FromArrayToRef(world.m, 0, directions[0]);\n\n    _mathVector.Vector3.FromArrayToRef(world.m, 4, directions[1]);\n\n    _mathVector.Vector3.FromArrayToRef(world.m, 8, directions[2]);\n\n    this._worldMatrix = world;\n  }\n  /**\n   * Tests if the bounding box is intersecting the frustum planes\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if there is an intersection\n   */\n\n\n  isInFrustum(frustumPlanes) {\n    return BoundingBox.IsInFrustum(this.vectorsWorld, frustumPlanes);\n  }\n  /**\n   * Tests if the bounding box is entirely inside the frustum planes\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if there is an inclusion\n   */\n\n\n  isCompletelyInFrustum(frustumPlanes) {\n    return BoundingBox.IsCompletelyInFrustum(this.vectorsWorld, frustumPlanes);\n  }\n  /**\n   * Tests if a point is inside the bounding box\n   * @param point defines the point to test\n   * @returns true if the point is inside the bounding box\n   */\n\n\n  intersectsPoint(point) {\n    const min = this.minimumWorld;\n    const max = this.maximumWorld;\n    const minX = min.x,\n          minY = min.y,\n          minZ = min.z,\n          maxX = max.x,\n          maxY = max.y,\n          maxZ = max.z;\n    const pointX = point.x,\n          pointY = point.y,\n          pointZ = point.z;\n    const delta = -_mathConstants.Epsilon;\n\n    if (maxX - pointX < delta || delta > pointX - minX) {\n      return false;\n    }\n\n    if (maxY - pointY < delta || delta > pointY - minY) {\n      return false;\n    }\n\n    if (maxZ - pointZ < delta || delta > pointZ - minZ) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Tests if the bounding box intersects with a bounding sphere\n   * @param sphere defines the sphere to test\n   * @returns true if there is an intersection\n   */\n\n\n  intersectsSphere(sphere) {\n    return BoundingBox.IntersectsSphere(this.minimumWorld, this.maximumWorld, sphere.centerWorld, sphere.radiusWorld);\n  }\n  /**\n   * Tests if the bounding box intersects with a box defined by a min and max vectors\n   * @param min defines the min vector to use\n   * @param max defines the max vector to use\n   * @returns true if there is an intersection\n   */\n\n\n  intersectsMinMax(min, max) {\n    const myMin = this.minimumWorld;\n    const myMax = this.maximumWorld;\n    const myMinX = myMin.x,\n          myMinY = myMin.y,\n          myMinZ = myMin.z,\n          myMaxX = myMax.x,\n          myMaxY = myMax.y,\n          myMaxZ = myMax.z;\n    const minX = min.x,\n          minY = min.y,\n          minZ = min.z,\n          maxX = max.x,\n          maxY = max.y,\n          maxZ = max.z;\n\n    if (myMaxX < minX || myMinX > maxX) {\n      return false;\n    }\n\n    if (myMaxY < minY || myMinY > maxY) {\n      return false;\n    }\n\n    if (myMaxZ < minZ || myMinZ > maxZ) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Disposes the resources of the class\n   */\n\n\n  dispose() {\n    var _a, _b;\n\n    (_a = this._drawWrapperFront) === null || _a === void 0 ? void 0 : _a.dispose();\n    (_b = this._drawWrapperBack) === null || _b === void 0 ? void 0 : _b.dispose();\n  } // Statics\n\n  /**\n   * Tests if two bounding boxes are intersections\n   * @param box0 defines the first box to test\n   * @param box1 defines the second box to test\n   * @returns true if there is an intersection\n   */\n\n\n  static Intersects(box0, box1) {\n    return box0.intersectsMinMax(box1.minimumWorld, box1.maximumWorld);\n  }\n  /**\n   * Tests if a bounding box defines by a min/max vectors intersects a sphere\n   * @param minPoint defines the minimum vector of the bounding box\n   * @param maxPoint defines the maximum vector of the bounding box\n   * @param sphereCenter defines the sphere center\n   * @param sphereRadius defines the sphere radius\n   * @returns true if there is an intersection\n   */\n\n\n  static IntersectsSphere(minPoint, maxPoint, sphereCenter, sphereRadius) {\n    const vector = BoundingBox._TmpVector3[0];\n\n    _mathVector.Vector3.ClampToRef(sphereCenter, minPoint, maxPoint, vector);\n\n    const num = _mathVector.Vector3.DistanceSquared(sphereCenter, vector);\n\n    return num <= sphereRadius * sphereRadius;\n  }\n  /**\n   * Tests if a bounding box defined with 8 vectors is entirely inside frustum planes\n   * @param boundingVectors defines an array of 8 vectors representing a bounding box\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if there is an inclusion\n   */\n\n\n  static IsCompletelyInFrustum(boundingVectors, frustumPlanes) {\n    for (let p = 0; p < 6; ++p) {\n      const frustumPlane = frustumPlanes[p];\n\n      for (let i = 0; i < 8; ++i) {\n        if (frustumPlane.dotCoordinate(boundingVectors[i]) < 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Tests if a bounding box defined with 8 vectors intersects frustum planes\n   * @param boundingVectors defines an array of 8 vectors representing a bounding box\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if there is an intersection\n   */\n\n\n  static IsInFrustum(boundingVectors, frustumPlanes) {\n    for (let p = 0; p < 6; ++p) {\n      let canReturnFalse = true;\n      const frustumPlane = frustumPlanes[p];\n\n      for (let i = 0; i < 8; ++i) {\n        if (frustumPlane.dotCoordinate(boundingVectors[i]) >= 0) {\n          canReturnFalse = false;\n          break;\n        }\n      }\n\n      if (canReturnFalse) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.BoundingBox = BoundingBox;\nBoundingBox._TmpVector3 = _arrayTools.ArrayTools.BuildArray(3, _mathVector.Vector3.Zero);\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","BoundingBox","_arrayTools","_mathVector","_mathConstants","constructor","min","max","worldMatrix","vectors","ArrayTools","BuildArray","Vector3","Zero","center","centerWorld","extendSize","extendSizeWorld","directions","vectorsWorld","minimumWorld","maximumWorld","minimum","maximum","_drawWrapperBack","_drawWrapperFront","reConstruct","minX","x","minY","y","minZ","z","maxX","maxY","maxZ","copyFromFloats","addToRef","scaleInPlace","subtractToRef","_worldMatrix","Matrix","IdentityReadOnly","_update","scale","factor","tmpVectors","_TmpVector3","diff","len","length","normalizeFromLength","newRadius","getWorldMatrix","world","minWorld","maxWorld","isIdentity","copyFrom","index","setAll","Number","MAX_VALUE","v","TransformCoordinatesToRef","minimizeInPlace","maximizeInPlace","FromArrayToRef","m","isInFrustum","frustumPlanes","IsInFrustum","isCompletelyInFrustum","IsCompletelyInFrustum","intersectsPoint","point","pointX","pointY","pointZ","delta","Epsilon","intersectsSphere","sphere","IntersectsSphere","radiusWorld","intersectsMinMax","myMin","myMax","myMinX","myMinY","myMinZ","dispose","_a","_b","Intersects","box0","box1","minPoint","maxPoint","sphereCenter","sphereRadius","vector","ClampToRef","DistanceSquared","num","boundingVectors","p","frustumPlane","i","dotCoordinate","canReturnFalse"]
}
