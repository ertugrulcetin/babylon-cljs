{
"version":3,
"file":"module$node_modules$$babylonjs$core$Culling$boundingSphere.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Culling/boundingSphere.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Culling$boundingSphere\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BoundingSphere = void 0;\n\nvar _arrayTools = require(\"../Misc/arrayTools.js\");\n\nvar _mathVector = require(\"../Maths/math.vector.js\");\n\n/**\n * Class used to store bounding sphere information\n */\nclass BoundingSphere {\n  /**\n   * Creates a new bounding sphere\n   * @param min defines the minimum vector (in local space)\n   * @param max defines the maximum vector (in local space)\n   * @param worldMatrix defines the new world matrix\n   */\n  constructor(min, max, worldMatrix) {\n    /**\n     * Gets the center of the bounding sphere in local space\n     */\n    this.center = _mathVector.Vector3.Zero();\n    /**\n     * Gets the center of the bounding sphere in world space\n     */\n\n    this.centerWorld = _mathVector.Vector3.Zero();\n    /**\n     * Gets the minimum vector in local space\n     */\n\n    this.minimum = _mathVector.Vector3.Zero();\n    /**\n     * Gets the maximum vector in local space\n     */\n\n    this.maximum = _mathVector.Vector3.Zero();\n    this.reConstruct(min, max, worldMatrix);\n  }\n  /**\n   * Recreates the entire bounding sphere from scratch as if we call the constructor in place\n   * @param min defines the new minimum vector (in local space)\n   * @param max defines the new maximum vector (in local space)\n   * @param worldMatrix defines the new world matrix\n   */\n\n\n  reConstruct(min, max, worldMatrix) {\n    this.minimum.copyFrom(min);\n    this.maximum.copyFrom(max);\n\n    const distance = _mathVector.Vector3.Distance(min, max);\n\n    max.addToRef(min, this.center).scaleInPlace(0.5);\n    this.radius = distance * 0.5;\n\n    this._update(worldMatrix || _mathVector.Matrix.IdentityReadOnly);\n  }\n  /**\n   * Scale the current bounding sphere by applying a scale factor\n   * @param factor defines the scale factor to apply\n   * @returns the current bounding box\n   */\n\n\n  scale(factor) {\n    const newRadius = this.radius * factor;\n    const tmpVectors = BoundingSphere._TmpVector3;\n    const tempRadiusVector = tmpVectors[0].setAll(newRadius);\n    const min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\n    const max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\n    this.reConstruct(min, max, this._worldMatrix);\n    return this;\n  }\n  /**\n   * Gets the world matrix of the bounding box\n   * @returns a matrix\n   */\n\n\n  getWorldMatrix() {\n    return this._worldMatrix;\n  } // Methods\n\n  /**\n   * @internal\n   */\n\n\n  _update(worldMatrix) {\n    if (!worldMatrix.isIdentity()) {\n      _mathVector.Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\n\n      const tempVector = BoundingSphere._TmpVector3[0];\n\n      _mathVector.Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\n\n      this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\n    } else {\n      this.centerWorld.copyFrom(this.center);\n      this.radiusWorld = this.radius;\n    }\n  }\n  /**\n   * Tests if the bounding sphere is intersecting the frustum planes\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if there is an intersection\n   */\n\n\n  isInFrustum(frustumPlanes) {\n    const center = this.centerWorld;\n    const radius = this.radiusWorld;\n\n    for (let i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Tests if the bounding sphere center is in between the frustum planes.\n   * Used for optimistic fast inclusion.\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if the sphere center is in between the frustum planes\n   */\n\n\n  isCenterInFrustum(frustumPlanes) {\n    const center = this.centerWorld;\n\n    for (let i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(center) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Tests if a point is inside the bounding sphere\n   * @param point defines the point to test\n   * @returns true if the point is inside the bounding sphere\n   */\n\n\n  intersectsPoint(point) {\n    const squareDistance = _mathVector.Vector3.DistanceSquared(this.centerWorld, point);\n\n    if (this.radiusWorld * this.radiusWorld < squareDistance) {\n      return false;\n    }\n\n    return true;\n  } // Statics\n\n  /**\n   * Checks if two sphere intersect\n   * @param sphere0 sphere 0\n   * @param sphere1 sphere 1\n   * @returns true if the spheres intersect\n   */\n\n\n  static Intersects(sphere0, sphere1) {\n    const squareDistance = _mathVector.Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\n\n    const radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\n\n    if (radiusSum * radiusSum < squareDistance) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Creates a sphere from a center and a radius\n   * @param center The center\n   * @param radius radius\n   * @param matrix Optional worldMatrix\n   * @returns The sphere\n   */\n\n\n  static CreateFromCenterAndRadius(center, radius, matrix) {\n    this._TmpVector3[0].copyFrom(center);\n\n    this._TmpVector3[1].copyFromFloats(0, 0, radius);\n\n    this._TmpVector3[2].copyFrom(center);\n\n    this._TmpVector3[0].addInPlace(this._TmpVector3[1]);\n\n    this._TmpVector3[2].subtractInPlace(this._TmpVector3[1]);\n\n    const sphere = new BoundingSphere(this._TmpVector3[0], this._TmpVector3[2]);\n\n    if (matrix) {\n      sphere._worldMatrix = matrix;\n    } else {\n      sphere._worldMatrix = _mathVector.Matrix.Identity();\n    }\n\n    return sphere;\n  }\n\n}\n\nexports.BoundingSphere = BoundingSphere;\nBoundingSphere._TmpVector3 = _arrayTools.ArrayTools.BuildArray(3, _mathVector.Vector3.Zero);\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","BoundingSphere","_arrayTools","_mathVector","constructor","min","max","worldMatrix","center","Vector3","Zero","centerWorld","minimum","maximum","reConstruct","copyFrom","distance","Distance","addToRef","scaleInPlace","radius","_update","Matrix","IdentityReadOnly","scale","factor","tmpVectors","_TmpVector3","tempRadiusVector","setAll","subtractToRef","_worldMatrix","getWorldMatrix","isIdentity","radiusWorld","TransformCoordinatesToRef","tempVector","TransformNormalFromFloatsToRef","Math","abs","x","y","z","isInFrustum","frustumPlanes","i","dotCoordinate","isCenterInFrustum","intersectsPoint","point","squareDistance","DistanceSquared","Intersects","sphere0","sphere1","radiusSum","CreateFromCenterAndRadius","matrix","copyFromFloats","addInPlace","subtractInPlace","sphere","Identity","ArrayTools","BuildArray"]
}
