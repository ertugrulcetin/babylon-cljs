{
"version":3,
"file":"module$node_modules$$babylonjs$core$Maths$math_color.js",
"lineCount":28,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Maths/math.color.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Maths$math_color\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TmpColors = exports.Color4 = exports.Color3 = void 0;\n\nvar _mathScalar = require(\"./math.scalar.js\");\n\nvar _mathConstants = require(\"./math.constants.js\");\n\nvar _arrayTools = require(\"../Misc/arrayTools.js\");\n\nvar _typeStore = require(\"../Misc/typeStore.js\");\n\nfunction colorChannelToLinearSpace(color) {\n  return Math.pow(color, _mathConstants.ToLinearSpace);\n}\n\nfunction colorChannelToLinearSpaceExact(color) {\n  if (color <= 0.04045) {\n    return 0.0773993808 * color;\n  }\n\n  return Math.pow(0.947867299 * (color + 0.055), 2.4);\n}\n\nfunction colorChannelToGammaSpace(color) {\n  return Math.pow(color, _mathConstants.ToGammaSpace);\n}\n\nfunction colorChannelToGammaSpaceExact(color) {\n  if (color <= 0.0031308) {\n    return 12.92 * color;\n  }\n\n  return 1.055 * Math.pow(color, 0.41666) - 0.055;\n}\n/**\n * Class used to hold a RGB color\n */\n\n\nclass Color3 {\n  /**\n   * Creates a new Color3 object from red, green, blue values, all between 0 and 1\n   * @param r defines the red component (between 0 and 1, default is 0)\n   * @param g defines the green component (between 0 and 1, default is 0)\n   * @param b defines the blue component (between 0 and 1, default is 0)\n   */\n  constructor(\n  /**\n   * Defines the red component (between 0 and 1, default is 0)\n   */\n  r = 0,\n  /**\n   * Defines the green component (between 0 and 1, default is 0)\n   */\n  g = 0,\n  /**\n   * Defines the blue component (between 0 and 1, default is 0)\n   */\n  b = 0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n  /**\n   * Creates a string with the Color3 current values\n   * @returns the string representation of the Color3 object\n   */\n\n\n  toString() {\n    return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \"}\";\n  }\n  /**\n   * Returns the string \"Color3\"\n   * @returns \"Color3\"\n   */\n\n\n  getClassName() {\n    return \"Color3\";\n  }\n  /**\n   * Compute the Color3 hash code\n   * @returns an unique number that can be used to hash Color3 objects\n   */\n\n\n  getHashCode() {\n    let hash = this.r * 255 | 0;\n    hash = hash * 397 ^ (this.g * 255 | 0);\n    hash = hash * 397 ^ (this.b * 255 | 0);\n    return hash;\n  } // Operators\n\n  /**\n   * Stores in the given array from the given starting index the red, green, blue values as successive elements\n   * @param array defines the array where to store the r,g,b components\n   * @param index defines an optional index in the target array to define where to start storing values\n   * @returns the current Color3 object\n   */\n\n\n  toArray(array, index = 0) {\n    array[index] = this.r;\n    array[index + 1] = this.g;\n    array[index + 2] = this.b;\n    return this;\n  }\n  /**\n   * Update the current color with values stored in an array from the starting index of the given array\n   * @param array defines the source array\n   * @param offset defines an offset in the source array\n   * @returns the current Color3 object\n   */\n\n\n  fromArray(array, offset = 0) {\n    Color3.FromArrayToRef(array, offset, this);\n    return this;\n  }\n  /**\n   * Returns a new Color4 object from the current Color3 and the given alpha\n   * @param alpha defines the alpha component on the new Color4 object (default is 1)\n   * @returns a new Color4 object\n   */\n\n\n  toColor4(alpha = 1) {\n    return new Color4(this.r, this.g, this.b, alpha);\n  }\n  /**\n   * Returns a new array populated with 3 numeric elements : red, green and blue values\n   * @returns the new array\n   */\n\n\n  asArray() {\n    return [this.r, this.g, this.b];\n  }\n  /**\n   * Returns the luminance value\n   * @returns a float value\n   */\n\n\n  toLuminance() {\n    return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\n  }\n  /**\n   * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\n   * @param otherColor defines the second operand\n   * @returns the new Color3 object\n   */\n\n\n  multiply(otherColor) {\n    return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\n  }\n  /**\n   * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\n   * @param otherColor defines the second operand\n   * @param result defines the Color3 object where to store the result\n   * @returns the current Color3\n   */\n\n\n  multiplyToRef(otherColor, result) {\n    result.r = this.r * otherColor.r;\n    result.g = this.g * otherColor.g;\n    result.b = this.b * otherColor.b;\n    return this;\n  }\n  /**\n   * Determines equality between Color3 objects\n   * @param otherColor defines the second operand\n   * @returns true if the rgb values are equal to the given ones\n   */\n\n\n  equals(otherColor) {\n    return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;\n  }\n  /**\n   * Determines equality between the current Color3 object and a set of r,b,g values\n   * @param r defines the red component to check\n   * @param g defines the green component to check\n   * @param b defines the blue component to check\n   * @returns true if the rgb values are equal to the given ones\n   */\n\n\n  equalsFloats(r, g, b) {\n    return this.r === r && this.g === g && this.b === b;\n  }\n  /**\n   * Creates a new Color3 with the current Color3 values multiplied by scale\n   * @param scale defines the scaling factor to apply\n   * @returns a new Color3 object\n   */\n\n\n  scale(scale) {\n    return new Color3(this.r * scale, this.g * scale, this.b * scale);\n  }\n  /**\n   * Multiplies the Color3 values by the float \"scale\"\n   * @param scale defines the scaling factor to apply\n   * @returns the current updated Color3\n   */\n\n\n  scaleInPlace(scale) {\n    this.r *= scale;\n    this.g *= scale;\n    this.b *= scale;\n    return this;\n  }\n  /**\n   * Multiplies the rgb values by scale and stores the result into \"result\"\n   * @param scale defines the scaling factor\n   * @param result defines the Color3 object where to store the result\n   * @returns the unmodified current Color3\n   */\n\n\n  scaleToRef(scale, result) {\n    result.r = this.r * scale;\n    result.g = this.g * scale;\n    result.b = this.b * scale;\n    return this;\n  }\n  /**\n   * Scale the current Color3 values by a factor and add the result to a given Color3\n   * @param scale defines the scale factor\n   * @param result defines color to store the result into\n   * @returns the unmodified current Color3\n   */\n\n\n  scaleAndAddToRef(scale, result) {\n    result.r += this.r * scale;\n    result.g += this.g * scale;\n    result.b += this.b * scale;\n    return this;\n  }\n  /**\n   * Clamps the rgb values by the min and max values and stores the result into \"result\"\n   * @param min defines minimum clamping value (default is 0)\n   * @param max defines maximum clamping value (default is 1)\n   * @param result defines color to store the result into\n   * @returns the original Color3\n   */\n\n\n  clampToRef(min = 0, max = 1, result) {\n    result.r = _mathScalar.Scalar.Clamp(this.r, min, max);\n    result.g = _mathScalar.Scalar.Clamp(this.g, min, max);\n    result.b = _mathScalar.Scalar.Clamp(this.b, min, max);\n    return this;\n  }\n  /**\n   * Creates a new Color3 set with the added values of the current Color3 and of the given one\n   * @param otherColor defines the second operand\n   * @returns the new Color3\n   */\n\n\n  add(otherColor) {\n    return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\n  }\n  /**\n   * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\n   * @param otherColor defines the second operand\n   * @param result defines Color3 object to store the result into\n   * @returns the unmodified current Color3\n   */\n\n\n  addToRef(otherColor, result) {\n    result.r = this.r + otherColor.r;\n    result.g = this.g + otherColor.g;\n    result.b = this.b + otherColor.b;\n    return this;\n  }\n  /**\n   * Returns a new Color3 set with the subtracted values of the given one from the current Color3\n   * @param otherColor defines the second operand\n   * @returns the new Color3\n   */\n\n\n  subtract(otherColor) {\n    return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\n  }\n  /**\n   * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\n   * @param otherColor defines the second operand\n   * @param result defines Color3 object to store the result into\n   * @returns the unmodified current Color3\n   */\n\n\n  subtractToRef(otherColor, result) {\n    result.r = this.r - otherColor.r;\n    result.g = this.g - otherColor.g;\n    result.b = this.b - otherColor.b;\n    return this;\n  }\n  /**\n   * Copy the current object\n   * @returns a new Color3 copied the current one\n   */\n\n\n  clone() {\n    return new Color3(this.r, this.g, this.b);\n  }\n  /**\n   * Copies the rgb values from the source in the current Color3\n   * @param source defines the source Color3 object\n   * @returns the updated Color3 object\n   */\n\n\n  copyFrom(source) {\n    this.r = source.r;\n    this.g = source.g;\n    this.b = source.b;\n    return this;\n  }\n  /**\n   * Updates the Color3 rgb values from the given floats\n   * @param r defines the red component to read from\n   * @param g defines the green component to read from\n   * @param b defines the blue component to read from\n   * @returns the current Color3 object\n   */\n\n\n  copyFromFloats(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    return this;\n  }\n  /**\n   * Updates the Color3 rgb values from the given floats\n   * @param r defines the red component to read from\n   * @param g defines the green component to read from\n   * @param b defines the blue component to read from\n   * @returns the current Color3 object\n   */\n\n\n  set(r, g, b) {\n    return this.copyFromFloats(r, g, b);\n  }\n  /**\n   * Compute the Color3 hexadecimal code as a string\n   * @returns a string containing the hexadecimal representation of the Color3 object\n   */\n\n\n  toHexString() {\n    const intR = Math.round(this.r * 255);\n    const intG = Math.round(this.g * 255);\n    const intB = Math.round(this.b * 255);\n    return \"#\" + _mathScalar.Scalar.ToHex(intR) + _mathScalar.Scalar.ToHex(intG) + _mathScalar.Scalar.ToHex(intB);\n  }\n  /**\n   * Converts current color in rgb space to HSV values\n   * @returns a new color3 representing the HSV values\n   */\n\n\n  toHSV() {\n    const result = new Color3();\n    this.toHSVToRef(result);\n    return result;\n  }\n  /**\n   * Converts current color in rgb space to HSV values\n   * @param result defines the Color3 where to store the HSV values\n   */\n\n\n  toHSVToRef(result) {\n    const r = this.r;\n    const g = this.g;\n    const b = this.b;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    let s = 0;\n    const v = max;\n    const dm = max - min;\n\n    if (max !== 0) {\n      s = dm / max;\n    }\n\n    if (max != min) {\n      if (max == r) {\n        h = (g - b) / dm;\n\n        if (g < b) {\n          h += 6;\n        }\n      } else if (max == g) {\n        h = (b - r) / dm + 2;\n      } else if (max == b) {\n        h = (r - g) / dm + 4;\n      }\n\n      h *= 60;\n    }\n\n    result.r = h;\n    result.g = s;\n    result.b = v;\n  }\n  /**\n   * Computes a new Color3 converted from the current one to linear space\n   * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\n   * @returns a new Color3 object\n   */\n\n\n  toLinearSpace(exact = false) {\n    const convertedColor = new Color3();\n    this.toLinearSpaceToRef(convertedColor, exact);\n    return convertedColor;\n  }\n  /**\n   * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\n   * @param convertedColor defines the Color3 object where to store the linear space version\n   * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\n   * @returns the unmodified Color3\n   */\n\n\n  toLinearSpaceToRef(convertedColor, exact = false) {\n    if (exact) {\n      convertedColor.r = colorChannelToLinearSpaceExact(this.r);\n      convertedColor.g = colorChannelToLinearSpaceExact(this.g);\n      convertedColor.b = colorChannelToLinearSpaceExact(this.b);\n    } else {\n      convertedColor.r = colorChannelToLinearSpace(this.r);\n      convertedColor.g = colorChannelToLinearSpace(this.g);\n      convertedColor.b = colorChannelToLinearSpace(this.b);\n    }\n\n    return this;\n  }\n  /**\n   * Computes a new Color3 converted from the current one to gamma space\n   * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\n   * @returns a new Color3 object\n   */\n\n\n  toGammaSpace(exact = false) {\n    const convertedColor = new Color3();\n    this.toGammaSpaceToRef(convertedColor, exact);\n    return convertedColor;\n  }\n  /**\n   * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\n   * @param convertedColor defines the Color3 object where to store the gamma space version\n   * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\n   * @returns the unmodified Color3\n   */\n\n\n  toGammaSpaceToRef(convertedColor, exact = false) {\n    if (exact) {\n      convertedColor.r = colorChannelToGammaSpaceExact(this.r);\n      convertedColor.g = colorChannelToGammaSpaceExact(this.g);\n      convertedColor.b = colorChannelToGammaSpaceExact(this.b);\n    } else {\n      convertedColor.r = colorChannelToGammaSpace(this.r);\n      convertedColor.g = colorChannelToGammaSpace(this.g);\n      convertedColor.b = colorChannelToGammaSpace(this.b);\n    }\n\n    return this;\n  }\n  /**\n   * Converts Hue, saturation and value to a Color3 (RGB)\n   * @param hue defines the hue\n   * @param saturation defines the saturation\n   * @param value defines the value\n   * @param result defines the Color3 where to store the RGB values\n   */\n\n\n  static HSVtoRGBToRef(hue, saturation, value, result) {\n    const chroma = value * saturation;\n    const h = hue / 60;\n    const x = chroma * (1 - Math.abs(h % 2 - 1));\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n    if (h >= 0 && h <= 1) {\n      r = chroma;\n      g = x;\n    } else if (h >= 1 && h <= 2) {\n      r = x;\n      g = chroma;\n    } else if (h >= 2 && h <= 3) {\n      g = chroma;\n      b = x;\n    } else if (h >= 3 && h <= 4) {\n      g = x;\n      b = chroma;\n    } else if (h >= 4 && h <= 5) {\n      r = x;\n      b = chroma;\n    } else if (h >= 5 && h <= 6) {\n      r = chroma;\n      b = x;\n    }\n\n    const m = value - chroma;\n    result.set(r + m, g + m, b + m);\n  }\n  /**\n   * Converts Hue, saturation and value to a new Color3 (RGB)\n   * @param hue defines the hue (value between 0 and 360)\n   * @param saturation defines the saturation (value between 0 and 1)\n   * @param value defines the value (value between 0 and 1)\n   * @returns a new Color3 object\n   */\n\n\n  static FromHSV(hue, saturation, value) {\n    const result = new Color3(0, 0, 0);\n    Color3.HSVtoRGBToRef(hue, saturation, value, result);\n    return result;\n  }\n  /**\n   * Creates a new Color3 from the string containing valid hexadecimal values\n   * @param hex defines a string containing valid hexadecimal values\n   * @returns a new Color3 object\n   */\n\n\n  static FromHexString(hex) {\n    if (hex.substring(0, 1) !== \"#\" || hex.length !== 7) {\n      return new Color3(0, 0, 0);\n    }\n\n    const r = parseInt(hex.substring(1, 3), 16);\n    const g = parseInt(hex.substring(3, 5), 16);\n    const b = parseInt(hex.substring(5, 7), 16);\n    return Color3.FromInts(r, g, b);\n  }\n  /**\n   * Creates a new Color3 from the starting index of the given array\n   * @param array defines the source array\n   * @param offset defines an offset in the source array\n   * @returns a new Color3 object\n   */\n\n\n  static FromArray(array, offset = 0) {\n    return new Color3(array[offset], array[offset + 1], array[offset + 2]);\n  }\n  /**\n   * Creates a new Color3 from the starting index element of the given array\n   * @param array defines the source array to read from\n   * @param offset defines the offset in the source array\n   * @param result defines the target Color3 object\n   */\n\n\n  static FromArrayToRef(array, offset = 0, result) {\n    result.r = array[offset];\n    result.g = array[offset + 1];\n    result.b = array[offset + 2];\n  }\n  /**\n   * Creates a new Color3 from integer values (< 256)\n   * @param r defines the red component to read from (value between 0 and 255)\n   * @param g defines the green component to read from (value between 0 and 255)\n   * @param b defines the blue component to read from (value between 0 and 255)\n   * @returns a new Color3 object\n   */\n\n\n  static FromInts(r, g, b) {\n    return new Color3(r / 255.0, g / 255.0, b / 255.0);\n  }\n  /**\n   * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n   * @param start defines the start Color3 value\n   * @param end defines the end Color3 value\n   * @param amount defines the gradient value between start and end\n   * @returns a new Color3 object\n   */\n\n\n  static Lerp(start, end, amount) {\n    const result = new Color3(0.0, 0.0, 0.0);\n    Color3.LerpToRef(start, end, amount, result);\n    return result;\n  }\n  /**\n   * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n   * @param left defines the start value\n   * @param right defines the end value\n   * @param amount defines the gradient factor\n   * @param result defines the Color3 object where to store the result\n   */\n\n\n  static LerpToRef(left, right, amount, result) {\n    result.r = left.r + (right.r - left.r) * amount;\n    result.g = left.g + (right.g - left.g) * amount;\n    result.b = left.b + (right.b - left.b) * amount;\n  }\n  /**\n   * Returns a new Color3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n   * @param value1 defines the first control point\n   * @param tangent1 defines the first tangent Color3\n   * @param value2 defines the second control point\n   * @param tangent2 defines the second tangent Color3\n   * @param amount defines the amount on the interpolation spline (between 0 and 1)\n   * @returns the new Color3\n   */\n\n\n  static Hermite(value1, tangent1, value2, tangent2, amount) {\n    const squared = amount * amount;\n    const cubed = amount * squared;\n    const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    const part2 = -2.0 * cubed + 3.0 * squared;\n    const part3 = cubed - 2.0 * squared + amount;\n    const part4 = cubed - squared;\n    const r = value1.r * part1 + value2.r * part2 + tangent1.r * part3 + tangent2.r * part4;\n    const g = value1.g * part1 + value2.g * part2 + tangent1.g * part3 + tangent2.g * part4;\n    const b = value1.b * part1 + value2.b * part2 + tangent1.b * part3 + tangent2.b * part4;\n    return new Color3(r, g, b);\n  }\n  /**\n   * Returns a new Color3 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n   * @param value1 defines the first control point\n   * @param tangent1 defines the first tangent\n   * @param value2 defines the second control point\n   * @param tangent2 defines the second tangent\n   * @param time define where the derivative must be done\n   * @returns 1st derivative\n   */\n\n\n  static Hermite1stDerivative(value1, tangent1, value2, tangent2, time) {\n    const result = Color3.Black();\n    this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\n    return result;\n  }\n  /**\n   * Returns a new Color3 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n   * @param value1 defines the first control point\n   * @param tangent1 defines the first tangent\n   * @param value2 defines the second control point\n   * @param tangent2 defines the second tangent\n   * @param time define where the derivative must be done\n   * @param result define where to store the derivative\n   */\n\n\n  static Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result) {\n    const t2 = time * time;\n    result.r = (t2 - time) * 6 * value1.r + (3 * t2 - 4 * time + 1) * tangent1.r + (-t2 + time) * 6 * value2.r + (3 * t2 - 2 * time) * tangent2.r;\n    result.g = (t2 - time) * 6 * value1.g + (3 * t2 - 4 * time + 1) * tangent1.g + (-t2 + time) * 6 * value2.g + (3 * t2 - 2 * time) * tangent2.g;\n    result.b = (t2 - time) * 6 * value1.b + (3 * t2 - 4 * time + 1) * tangent1.b + (-t2 + time) * 6 * value2.b + (3 * t2 - 2 * time) * tangent2.b;\n  }\n  /**\n   * Returns a Color3 value containing a red color\n   * @returns a new Color3 object\n   */\n\n\n  static Red() {\n    return new Color3(1, 0, 0);\n  }\n  /**\n   * Returns a Color3 value containing a green color\n   * @returns a new Color3 object\n   */\n\n\n  static Green() {\n    return new Color3(0, 1, 0);\n  }\n  /**\n   * Returns a Color3 value containing a blue color\n   * @returns a new Color3 object\n   */\n\n\n  static Blue() {\n    return new Color3(0, 0, 1);\n  }\n  /**\n   * Returns a Color3 value containing a black color\n   * @returns a new Color3 object\n   */\n\n\n  static Black() {\n    return new Color3(0, 0, 0);\n  }\n  /**\n   * Gets a Color3 value containing a black color that must not be updated\n   */\n\n\n  static get BlackReadOnly() {\n    return Color3._BlackReadOnly;\n  }\n  /**\n   * Returns a Color3 value containing a white color\n   * @returns a new Color3 object\n   */\n\n\n  static White() {\n    return new Color3(1, 1, 1);\n  }\n  /**\n   * Returns a Color3 value containing a purple color\n   * @returns a new Color3 object\n   */\n\n\n  static Purple() {\n    return new Color3(0.5, 0, 0.5);\n  }\n  /**\n   * Returns a Color3 value containing a magenta color\n   * @returns a new Color3 object\n   */\n\n\n  static Magenta() {\n    return new Color3(1, 0, 1);\n  }\n  /**\n   * Returns a Color3 value containing a yellow color\n   * @returns a new Color3 object\n   */\n\n\n  static Yellow() {\n    return new Color3(1, 1, 0);\n  }\n  /**\n   * Returns a Color3 value containing a gray color\n   * @returns a new Color3 object\n   */\n\n\n  static Gray() {\n    return new Color3(0.5, 0.5, 0.5);\n  }\n  /**\n   * Returns a Color3 value containing a teal color\n   * @returns a new Color3 object\n   */\n\n\n  static Teal() {\n    return new Color3(0, 1.0, 1.0);\n  }\n  /**\n   * Returns a Color3 value containing a random color\n   * @returns a new Color3 object\n   */\n\n\n  static Random() {\n    return new Color3(Math.random(), Math.random(), Math.random());\n  }\n\n} // Statics\n\n\nexports.Color3 = Color3;\nColor3._BlackReadOnly = Color3.Black();\n/**\n * Class used to hold a RBGA color\n */\n\nclass Color4 {\n  /**\n   * Creates a new Color4 object from red, green, blue values, all between 0 and 1\n   * @param r defines the red component (between 0 and 1, default is 0)\n   * @param g defines the green component (between 0 and 1, default is 0)\n   * @param b defines the blue component (between 0 and 1, default is 0)\n   * @param a defines the alpha component (between 0 and 1, default is 1)\n   */\n  constructor(\n  /**\n   * Defines the red component (between 0 and 1, default is 0)\n   */\n  r = 0,\n  /**\n   * Defines the green component (between 0 and 1, default is 0)\n   */\n  g = 0,\n  /**\n   * Defines the blue component (between 0 and 1, default is 0)\n   */\n  b = 0,\n  /**\n   * Defines the alpha component (between 0 and 1, default is 1)\n   */\n  a = 1) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  } // Operators\n\n  /**\n   * Adds in place the given Color4 values to the current Color4 object\n   * @param right defines the second operand\n   * @returns the current updated Color4 object\n   */\n\n\n  addInPlace(right) {\n    this.r += right.r;\n    this.g += right.g;\n    this.b += right.b;\n    this.a += right.a;\n    return this;\n  }\n  /**\n   * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\n   * @returns the new array\n   */\n\n\n  asArray() {\n    return [this.r, this.g, this.b, this.a];\n  }\n  /**\n   * Stores from the starting index in the given array the Color4 successive values\n   * @param array defines the array where to store the r,g,b components\n   * @param index defines an optional index in the target array to define where to start storing values\n   * @returns the current Color4 object\n   */\n\n\n  toArray(array, index = 0) {\n    array[index] = this.r;\n    array[index + 1] = this.g;\n    array[index + 2] = this.b;\n    array[index + 3] = this.a;\n    return this;\n  }\n  /**\n   * Update the current color with values stored in an array from the starting index of the given array\n   * @param array defines the source array\n   * @param offset defines an offset in the source array\n   * @returns the current Color4 object\n   */\n\n\n  fromArray(array, offset = 0) {\n    Color4.FromArrayToRef(array, offset, this);\n    return this;\n  }\n  /**\n   * Determines equality between Color4 objects\n   * @param otherColor defines the second operand\n   * @returns true if the rgba values are equal to the given ones\n   */\n\n\n  equals(otherColor) {\n    return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b && this.a === otherColor.a;\n  }\n  /**\n   * Creates a new Color4 set with the added values of the current Color4 and of the given one\n   * @param right defines the second operand\n   * @returns a new Color4 object\n   */\n\n\n  add(right) {\n    return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\n  }\n  /**\n   * Creates a new Color4 set with the subtracted values of the given one from the current Color4\n   * @param right defines the second operand\n   * @returns a new Color4 object\n   */\n\n\n  subtract(right) {\n    return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\n  }\n  /**\n   * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\n   * @param right defines the second operand\n   * @param result defines the Color4 object where to store the result\n   * @returns the current Color4 object\n   */\n\n\n  subtractToRef(right, result) {\n    result.r = this.r - right.r;\n    result.g = this.g - right.g;\n    result.b = this.b - right.b;\n    result.a = this.a - right.a;\n    return this;\n  }\n  /**\n   * Creates a new Color4 with the current Color4 values multiplied by scale\n   * @param scale defines the scaling factor to apply\n   * @returns a new Color4 object\n   */\n\n\n  scale(scale) {\n    return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\n  }\n  /**\n   * Multiplies the Color4 values by the float \"scale\"\n   * @param scale defines the scaling factor to apply\n   * @returns the current updated Color4\n   */\n\n\n  scaleInPlace(scale) {\n    this.r *= scale;\n    this.g *= scale;\n    this.b *= scale;\n    this.a *= scale;\n    return this;\n  }\n  /**\n   * Multiplies the current Color4 values by scale and stores the result in \"result\"\n   * @param scale defines the scaling factor to apply\n   * @param result defines the Color4 object where to store the result\n   * @returns the current unmodified Color4\n   */\n\n\n  scaleToRef(scale, result) {\n    result.r = this.r * scale;\n    result.g = this.g * scale;\n    result.b = this.b * scale;\n    result.a = this.a * scale;\n    return this;\n  }\n  /**\n   * Scale the current Color4 values by a factor and add the result to a given Color4\n   * @param scale defines the scale factor\n   * @param result defines the Color4 object where to store the result\n   * @returns the unmodified current Color4\n   */\n\n\n  scaleAndAddToRef(scale, result) {\n    result.r += this.r * scale;\n    result.g += this.g * scale;\n    result.b += this.b * scale;\n    result.a += this.a * scale;\n    return this;\n  }\n  /**\n   * Clamps the rgb values by the min and max values and stores the result into \"result\"\n   * @param min defines minimum clamping value (default is 0)\n   * @param max defines maximum clamping value (default is 1)\n   * @param result defines color to store the result into.\n   * @returns the current Color4\n   */\n\n\n  clampToRef(min = 0, max = 1, result) {\n    result.r = _mathScalar.Scalar.Clamp(this.r, min, max);\n    result.g = _mathScalar.Scalar.Clamp(this.g, min, max);\n    result.b = _mathScalar.Scalar.Clamp(this.b, min, max);\n    result.a = _mathScalar.Scalar.Clamp(this.a, min, max);\n    return this;\n  }\n  /**\n   * Multiply an Color4 value by another and return a new Color4 object\n   * @param color defines the Color4 value to multiply by\n   * @returns a new Color4 object\n   */\n\n\n  multiply(color) {\n    return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\n  }\n  /**\n   * Multiply a Color4 value by another and push the result in a reference value\n   * @param color defines the Color4 value to multiply by\n   * @param result defines the Color4 to fill the result in\n   * @returns the result Color4\n   */\n\n\n  multiplyToRef(color, result) {\n    result.r = this.r * color.r;\n    result.g = this.g * color.g;\n    result.b = this.b * color.b;\n    result.a = this.a * color.a;\n    return result;\n  }\n  /**\n   * Creates a string with the Color4 current values\n   * @returns the string representation of the Color4 object\n   */\n\n\n  toString() {\n    return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \" A:\" + this.a + \"}\";\n  }\n  /**\n   * Returns the string \"Color4\"\n   * @returns \"Color4\"\n   */\n\n\n  getClassName() {\n    return \"Color4\";\n  }\n  /**\n   * Compute the Color4 hash code\n   * @returns an unique number that can be used to hash Color4 objects\n   */\n\n\n  getHashCode() {\n    let hash = this.r * 255 | 0;\n    hash = hash * 397 ^ (this.g * 255 | 0);\n    hash = hash * 397 ^ (this.b * 255 | 0);\n    hash = hash * 397 ^ (this.a * 255 | 0);\n    return hash;\n  }\n  /**\n   * Creates a new Color4 copied from the current one\n   * @returns a new Color4 object\n   */\n\n\n  clone() {\n    return new Color4(this.r, this.g, this.b, this.a);\n  }\n  /**\n   * Copies the given Color4 values into the current one\n   * @param source defines the source Color4 object\n   * @returns the current updated Color4 object\n   */\n\n\n  copyFrom(source) {\n    this.r = source.r;\n    this.g = source.g;\n    this.b = source.b;\n    this.a = source.a;\n    return this;\n  }\n  /**\n   * Copies the given float values into the current one\n   * @param r defines the red component to read from\n   * @param g defines the green component to read from\n   * @param b defines the blue component to read from\n   * @param a defines the alpha component to read from\n   * @returns the current updated Color4 object\n   */\n\n\n  copyFromFloats(r, g, b, a) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n    return this;\n  }\n  /**\n   * Copies the given float values into the current one\n   * @param r defines the red component to read from\n   * @param g defines the green component to read from\n   * @param b defines the blue component to read from\n   * @param a defines the alpha component to read from\n   * @returns the current updated Color4 object\n   */\n\n\n  set(r, g, b, a) {\n    return this.copyFromFloats(r, g, b, a);\n  }\n  /**\n   * Compute the Color4 hexadecimal code as a string\n   * @param returnAsColor3 defines if the string should only contains RGB values (off by default)\n   * @returns a string containing the hexadecimal representation of the Color4 object\n   */\n\n\n  toHexString(returnAsColor3 = false) {\n    const intR = Math.round(this.r * 255);\n    const intG = Math.round(this.g * 255);\n    const intB = Math.round(this.b * 255);\n\n    if (returnAsColor3) {\n      return \"#\" + _mathScalar.Scalar.ToHex(intR) + _mathScalar.Scalar.ToHex(intG) + _mathScalar.Scalar.ToHex(intB);\n    }\n\n    const intA = Math.round(this.a * 255);\n    return \"#\" + _mathScalar.Scalar.ToHex(intR) + _mathScalar.Scalar.ToHex(intG) + _mathScalar.Scalar.ToHex(intB) + _mathScalar.Scalar.ToHex(intA);\n  }\n  /**\n   * Computes a new Color4 converted from the current one to linear space\n   * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\n   * @returns a new Color4 object\n   */\n\n\n  toLinearSpace(exact = false) {\n    const convertedColor = new Color4();\n    this.toLinearSpaceToRef(convertedColor, exact);\n    return convertedColor;\n  }\n  /**\n   * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\n   * @param convertedColor defines the Color4 object where to store the linear space version\n   * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\n   * @returns the unmodified Color4\n   */\n\n\n  toLinearSpaceToRef(convertedColor, exact = false) {\n    if (exact) {\n      convertedColor.r = colorChannelToLinearSpaceExact(this.r);\n      convertedColor.g = colorChannelToLinearSpaceExact(this.g);\n      convertedColor.b = colorChannelToLinearSpaceExact(this.b);\n    } else {\n      convertedColor.r = colorChannelToLinearSpace(this.r);\n      convertedColor.g = colorChannelToLinearSpace(this.g);\n      convertedColor.b = colorChannelToLinearSpace(this.b);\n    }\n\n    convertedColor.a = this.a;\n    return this;\n  }\n  /**\n   * Computes a new Color4 converted from the current one to gamma space\n   * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\n   * @returns a new Color4 object\n   */\n\n\n  toGammaSpace(exact = false) {\n    const convertedColor = new Color4();\n    this.toGammaSpaceToRef(convertedColor, exact);\n    return convertedColor;\n  }\n  /**\n   * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\n   * @param convertedColor defines the Color4 object where to store the gamma space version\n   * @param exact defines if the conversion will be done in an exact way which is slower but more accurate (default is false)\n   * @returns the unmodified Color4\n   */\n\n\n  toGammaSpaceToRef(convertedColor, exact = false) {\n    if (exact) {\n      convertedColor.r = colorChannelToGammaSpaceExact(this.r);\n      convertedColor.g = colorChannelToGammaSpaceExact(this.g);\n      convertedColor.b = colorChannelToGammaSpaceExact(this.b);\n    } else {\n      convertedColor.r = colorChannelToGammaSpace(this.r);\n      convertedColor.g = colorChannelToGammaSpace(this.g);\n      convertedColor.b = colorChannelToGammaSpace(this.b);\n    }\n\n    convertedColor.a = this.a;\n    return this;\n  } // Statics\n\n  /**\n   * Creates a new Color4 from the string containing valid hexadecimal values.\n   *\n   * A valid hex string is either in the format #RRGGBB or #RRGGBBAA.\n   *\n   * When a hex string without alpha is passed, the resulting Color4 has\n   * its alpha value set to 1.0.\n   *\n   * An invalid string results in a Color with all its channels set to 0.0,\n   * i.e. \"transparent black\".\n   *\n   * @param hex defines a string containing valid hexadecimal values\n   * @returns a new Color4 object\n   */\n\n\n  static FromHexString(hex) {\n    if (hex.substring(0, 1) !== \"#\" || hex.length !== 9 && hex.length !== 7) {\n      return new Color4(0.0, 0.0, 0.0, 0.0);\n    }\n\n    const r = parseInt(hex.substring(1, 3), 16);\n    const g = parseInt(hex.substring(3, 5), 16);\n    const b = parseInt(hex.substring(5, 7), 16);\n    const a = hex.length === 9 ? parseInt(hex.substring(7, 9), 16) : 255;\n    return Color4.FromInts(r, g, b, a);\n  }\n  /**\n   * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n   * @param left defines the start value\n   * @param right defines the end value\n   * @param amount defines the gradient factor\n   * @returns a new Color4 object\n   */\n\n\n  static Lerp(left, right, amount) {\n    const result = new Color4(0.0, 0.0, 0.0, 0.0);\n    Color4.LerpToRef(left, right, amount, result);\n    return result;\n  }\n  /**\n   * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n   * @param left defines the start value\n   * @param right defines the end value\n   * @param amount defines the gradient factor\n   * @param result defines the Color4 object where to store data\n   */\n\n\n  static LerpToRef(left, right, amount, result) {\n    result.r = left.r + (right.r - left.r) * amount;\n    result.g = left.g + (right.g - left.g) * amount;\n    result.b = left.b + (right.b - left.b) * amount;\n    result.a = left.a + (right.a - left.a) * amount;\n  }\n  /**\n   * Interpolate between two Color4 using Hermite interpolation\n   * @param value1 defines first Color4\n   * @param tangent1 defines the incoming tangent\n   * @param value2 defines second Color4\n   * @param tangent2 defines the outgoing tangent\n   * @param amount defines the target Color4\n   * @returns the new interpolated Color4\n   */\n\n\n  static Hermite(value1, tangent1, value2, tangent2, amount) {\n    const squared = amount * amount;\n    const cubed = amount * squared;\n    const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    const part2 = -2.0 * cubed + 3.0 * squared;\n    const part3 = cubed - 2.0 * squared + amount;\n    const part4 = cubed - squared;\n    const r = value1.r * part1 + value2.r * part2 + tangent1.r * part3 + tangent2.r * part4;\n    const g = value1.g * part1 + value2.g * part2 + tangent1.g * part3 + tangent2.g * part4;\n    const b = value1.b * part1 + value2.b * part2 + tangent1.b * part3 + tangent2.b * part4;\n    const a = value1.a * part1 + value2.a * part2 + tangent1.a * part3 + tangent2.a * part4;\n    return new Color4(r, g, b, a);\n  }\n  /**\n   * Returns a new Color4 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n   * @param value1 defines the first control point\n   * @param tangent1 defines the first tangent\n   * @param value2 defines the second control point\n   * @param tangent2 defines the second tangent\n   * @param time define where the derivative must be done\n   * @returns 1st derivative\n   */\n\n\n  static Hermite1stDerivative(value1, tangent1, value2, tangent2, time) {\n    const result = new Color4();\n    this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\n    return result;\n  }\n  /**\n   * Update a Color4 with the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n   * @param value1 defines the first control point\n   * @param tangent1 defines the first tangent\n   * @param value2 defines the second control point\n   * @param tangent2 defines the second tangent\n   * @param time define where the derivative must be done\n   * @param result define where to store the derivative\n   */\n\n\n  static Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result) {\n    const t2 = time * time;\n    result.r = (t2 - time) * 6 * value1.r + (3 * t2 - 4 * time + 1) * tangent1.r + (-t2 + time) * 6 * value2.r + (3 * t2 - 2 * time) * tangent2.r;\n    result.g = (t2 - time) * 6 * value1.g + (3 * t2 - 4 * time + 1) * tangent1.g + (-t2 + time) * 6 * value2.g + (3 * t2 - 2 * time) * tangent2.g;\n    result.b = (t2 - time) * 6 * value1.b + (3 * t2 - 4 * time + 1) * tangent1.b + (-t2 + time) * 6 * value2.b + (3 * t2 - 2 * time) * tangent2.b;\n    result.a = (t2 - time) * 6 * value1.a + (3 * t2 - 4 * time + 1) * tangent1.a + (-t2 + time) * 6 * value2.a + (3 * t2 - 2 * time) * tangent2.a;\n  }\n  /**\n   * Creates a new Color4 from a Color3 and an alpha value\n   * @param color3 defines the source Color3 to read from\n   * @param alpha defines the alpha component (1.0 by default)\n   * @returns a new Color4 object\n   */\n\n\n  static FromColor3(color3, alpha = 1.0) {\n    return new Color4(color3.r, color3.g, color3.b, alpha);\n  }\n  /**\n   * Creates a new Color4 from the starting index element of the given array\n   * @param array defines the source array to read from\n   * @param offset defines the offset in the source array\n   * @returns a new Color4 object\n   */\n\n\n  static FromArray(array, offset = 0) {\n    return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n  }\n  /**\n   * Creates a new Color4 from the starting index element of the given array\n   * @param array defines the source array to read from\n   * @param offset defines the offset in the source array\n   * @param result defines the target Color4 object\n   */\n\n\n  static FromArrayToRef(array, offset = 0, result) {\n    result.r = array[offset];\n    result.g = array[offset + 1];\n    result.b = array[offset + 2];\n    result.a = array[offset + 3];\n  }\n  /**\n   * Creates a new Color3 from integer values (< 256)\n   * @param r defines the red component to read from (value between 0 and 255)\n   * @param g defines the green component to read from (value between 0 and 255)\n   * @param b defines the blue component to read from (value between 0 and 255)\n   * @param a defines the alpha component to read from (value between 0 and 255)\n   * @returns a new Color3 object\n   */\n\n\n  static FromInts(r, g, b, a) {\n    return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\n  }\n  /**\n   * Check the content of a given array and convert it to an array containing RGBA data\n   * If the original array was already containing count * 4 values then it is returned directly\n   * @param colors defines the array to check\n   * @param count defines the number of RGBA data to expect\n   * @returns an array containing count * 4 values (RGBA)\n   */\n\n\n  static CheckColors4(colors, count) {\n    // Check if color3 was used\n    if (colors.length === count * 3) {\n      const colors4 = [];\n\n      for (let index = 0; index < colors.length; index += 3) {\n        const newIndex = index / 3 * 4;\n        colors4[newIndex] = colors[index];\n        colors4[newIndex + 1] = colors[index + 1];\n        colors4[newIndex + 2] = colors[index + 2];\n        colors4[newIndex + 3] = 1.0;\n      }\n\n      return colors4;\n    }\n\n    return colors;\n  }\n\n}\n/**\n * @internal\n */\n\n\nexports.Color4 = Color4;\n\nclass TmpColors {}\n\nexports.TmpColors = TmpColors;\nTmpColors.Color3 = _arrayTools.ArrayTools.BuildArray(3, Color3.Black);\nTmpColors.Color4 = _arrayTools.ArrayTools.BuildArray(3, () => new Color4(0, 0, 0, 0));\n(0, _typeStore.RegisterClass)(\"BABYLON.Color3\", Color3);\n(0, _typeStore.RegisterClass)(\"BABYLON.Color4\", Color4);\n};"],
"names":["shadow$provide","global","require","module","exports","colorChannelToLinearSpace","color","Math","pow","_mathConstants","ToLinearSpace","colorChannelToLinearSpaceExact","colorChannelToGammaSpace","ToGammaSpace","colorChannelToGammaSpaceExact","Object","defineProperty","value","TmpColors","Color4","Color3","_mathScalar","_arrayTools","_typeStore","constructor","r","g","b","toString","getClassName","getHashCode","hash","toArray","array","index","fromArray","offset","FromArrayToRef","toColor4","alpha","asArray","toLuminance","multiply","otherColor","multiplyToRef","result","equals","equalsFloats","scale","scaleInPlace","scaleToRef","scaleAndAddToRef","clampToRef","min","max","Scalar","Clamp","add","addToRef","subtract","subtractToRef","clone","copyFrom","source","copyFromFloats","set","toHexString","intG","round","intB","ToHex","intR","toHSV","toHSVToRef","h","s","dm","toLinearSpace","exact","convertedColor","toLinearSpaceToRef","toGammaSpace","toGammaSpaceToRef","HSVtoRGBToRef","hue","saturation","chroma","x","abs","m","FromHSV","FromHexString","hex","substring","length","parseInt","FromInts","FromArray","Lerp","start","end","amount","LerpToRef","left","right","Hermite","value1","tangent1","value2","tangent2","squared","cubed","part1","part2","part3","part4","Hermite1stDerivative","time","Black","Hermite1stDerivativeToRef","t2","Red","Green","Blue","_BlackReadOnly","White","Purple","Magenta","Yellow","Gray","Teal","Random","random","a","addInPlace","returnAsColor3","intA","FromColor3","color3","CheckColors4","colors","count","colors4","newIndex","ArrayTools","BuildArray","RegisterClass"]
}
