{
"version":3,
"file":"module$node_modules$$babylonjs$core$Engines$WebGL$webGLShaderProcessors.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,oBAAR,CAA+B,IAAK,EAEpC,KAAIC,gBAAkBP,OAAA,CAAQ,8DAAR,CAGtB,MAAMM,qBAAN,CACEE,WAAW,EAAG,CACZ,IAAKC,CAAAA,cAAL,CAAsBF,eAAgBG,CAAAA,cAAeC,CAAAA,IADzC,CAIdC,aAAa,CAACC,IAAD,CAAOC,OAAP,CAAgBC,UAAhB,CAA4BC,iBAA5B,CAA+CC,MAA/C,CAAuD,CAE7DA,MAAOC,CAAAA,OAAP,EAAiBC,CAAAA,oBAAtB;CAGEN,IAHF,CAGSA,IAAKO,CAAAA,OAAL,CADOC,oDACP,CAAoB,EAApB,CAHT,CAMA,OAAOR,KAR2D,CALtE,CAkBAX,OAAQI,CAAAA,oBAAR,CAA+BA,oBA7BqG;",
"sources":["node_modules/@babylonjs/core/Engines/WebGL/webGLShaderProcessors.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Engines$WebGL$webGLShaderProcessors\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLShaderProcessor = void 0;\n\nvar _shaderLanguage = require(\"../../Materials/shaderLanguage.js\");\n\n/** @internal */\nclass WebGLShaderProcessor {\n  constructor() {\n    this.shaderLanguage = _shaderLanguage.ShaderLanguage.GLSL;\n  }\n\n  postProcessor(code, defines, isFragment, processingContext, engine) {\n    // Remove extensions\n    if (!engine.getCaps().drawBuffersExtension) {\n      // even if enclosed in #if/#endif, IE11 does parse the #extension declaration, so we need to remove it altogether\n      const regex = /#extension.+GL_EXT_draw_buffers.+(enable|require)/g;\n      code = code.replace(regex, \"\");\n    }\n\n    return code;\n  }\n\n}\n\nexports.WebGLShaderProcessor = WebGLShaderProcessor;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebGLShaderProcessor","_shaderLanguage","constructor","shaderLanguage","ShaderLanguage","GLSL","postProcessor","code","defines","isFragment","processingContext","engine","getCaps","drawBuffersExtension","replace","regex"]
}
