{
"version":3,
"file":"module$node_modules$$babylonjs$core$Engines$Processors$shaderProcessor.js",
"lineCount":24,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Engines/Processors/shaderProcessor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Engines$Processors$shaderProcessor\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShaderProcessor = void 0;\n\nvar _shaderCodeNode = require(\"./shaderCodeNode.js\");\n\nvar _shaderCodeCursor = require(\"./shaderCodeCursor.js\");\n\nvar _shaderCodeConditionNode = require(\"./shaderCodeConditionNode.js\");\n\nvar _shaderCodeTestNode = require(\"./shaderCodeTestNode.js\");\n\nvar _shaderDefineIsDefinedOperator = require(\"./Expressions/Operators/shaderDefineIsDefinedOperator.js\");\n\nvar _shaderDefineOrOperator = require(\"./Expressions/Operators/shaderDefineOrOperator.js\");\n\nvar _shaderDefineAndOperator = require(\"./Expressions/Operators/shaderDefineAndOperator.js\");\n\nvar _shaderDefineExpression = require(\"./Expressions/shaderDefineExpression.js\");\n\nvar _shaderDefineArithmeticOperator = require(\"./Expressions/Operators/shaderDefineArithmeticOperator.js\");\n\nvar _devTools = require(\"../../Misc/devTools.js\");\n\nvar _shaderLanguage = require(\"../../Materials/shaderLanguage.js\");\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nconst regexSE = /defined\\s*?\\((.+?)\\)/g;\nconst regexSERevert = /defined\\s*?\\[(.+?)\\]/g;\nconst regexShaderInclude = /#include\\s?<(.+)>(\\((.*)\\))*(\\[(.*)\\])*/g;\nconst regexShaderDecl = /__decl__/;\nconst regexLightX = /light\\{X\\}.(\\w*)/g;\nconst regexX = /\\{X\\}/g;\nconst reusableMatches = [];\n/** @internal */\n\nclass ShaderProcessor {\n  static Initialize(options) {\n    if (options.processor && options.processor.initializeShaders) {\n      options.processor.initializeShaders(options.processingContext);\n    }\n  }\n\n  static Process(sourceCode, options, callback, engine) {\n    var _a;\n\n    if ((_a = options.processor) === null || _a === void 0 ? void 0 : _a.preProcessShaderCode) {\n      sourceCode = options.processor.preProcessShaderCode(sourceCode, options.isFragment);\n    }\n\n    this._ProcessIncludes(sourceCode, options, codeWithIncludes => {\n      if (options.processCodeAfterIncludes) {\n        codeWithIncludes = options.processCodeAfterIncludes(options.isFragment ? \"fragment\" : \"vertex\", codeWithIncludes);\n      }\n\n      const migratedCode = this._ProcessShaderConversion(codeWithIncludes, options, engine);\n\n      callback(migratedCode, codeWithIncludes);\n    });\n  }\n\n  static PreProcess(sourceCode, options, callback, engine) {\n    var _a;\n\n    if ((_a = options.processor) === null || _a === void 0 ? void 0 : _a.preProcessShaderCode) {\n      sourceCode = options.processor.preProcessShaderCode(sourceCode, options.isFragment);\n    }\n\n    this._ProcessIncludes(sourceCode, options, codeWithIncludes => {\n      if (options.processCodeAfterIncludes) {\n        codeWithIncludes = options.processCodeAfterIncludes(options.isFragment ? \"fragment\" : \"vertex\", codeWithIncludes);\n      }\n\n      const migratedCode = this._ApplyPreProcessing(codeWithIncludes, options, engine);\n\n      callback(migratedCode, codeWithIncludes);\n    });\n  }\n\n  static Finalize(vertexCode, fragmentCode, options) {\n    if (!options.processor || !options.processor.finalizeShaders) {\n      return {\n        vertexCode,\n        fragmentCode\n      };\n    }\n\n    return options.processor.finalizeShaders(vertexCode, fragmentCode, options.processingContext);\n  }\n\n  static _ProcessPrecision(source, options) {\n    var _a;\n\n    if ((_a = options.processor) === null || _a === void 0 ? void 0 : _a.noPrecision) {\n      return source;\n    }\n\n    const shouldUseHighPrecisionShader = options.shouldUseHighPrecisionShader;\n\n    if (source.indexOf(\"precision highp float\") === -1) {\n      if (!shouldUseHighPrecisionShader) {\n        source = \"precision mediump float;\\n\" + source;\n      } else {\n        source = \"precision highp float;\\n\" + source;\n      }\n    } else {\n      if (!shouldUseHighPrecisionShader) {\n        // Moving highp to mediump\n        source = source.replace(\"precision highp float\", \"precision mediump float\");\n      }\n    }\n\n    return source;\n  }\n\n  static _ExtractOperation(expression) {\n    const regex = /defined\\((.+)\\)/;\n    const match = regex.exec(expression);\n\n    if (match && match.length) {\n      return new _shaderDefineIsDefinedOperator.ShaderDefineIsDefinedOperator(match[1].trim(), expression[0] === \"!\");\n    }\n\n    const operators = [\"==\", \"!=\", \">=\", \"<=\", \"<\", \">\"];\n    let operator = \"\";\n    let indexOperator = 0;\n\n    for (operator of operators) {\n      indexOperator = expression.indexOf(operator);\n\n      if (indexOperator > -1) {\n        break;\n      }\n    }\n\n    if (indexOperator === -1) {\n      return new _shaderDefineIsDefinedOperator.ShaderDefineIsDefinedOperator(expression);\n    }\n\n    const define = expression.substring(0, indexOperator).trim();\n    const value = expression.substring(indexOperator + operator.length).trim();\n    return new _shaderDefineArithmeticOperator.ShaderDefineArithmeticOperator(define, operator, value);\n  }\n\n  static _BuildSubExpression(expression) {\n    expression = expression.replace(regexSE, \"defined[$1]\");\n\n    const postfix = _shaderDefineExpression.ShaderDefineExpression.infixToPostfix(expression);\n\n    const stack = [];\n\n    for (const c of postfix) {\n      if (c !== \"||\" && c !== \"&&\") {\n        stack.push(c);\n      } else if (stack.length >= 2) {\n        let v1 = stack[stack.length - 1],\n            v2 = stack[stack.length - 2];\n        stack.length -= 2;\n        const operator = c == \"&&\" ? new _shaderDefineAndOperator.ShaderDefineAndOperator() : new _shaderDefineOrOperator.ShaderDefineOrOperator();\n\n        if (typeof v1 === \"string\") {\n          v1 = v1.replace(regexSERevert, \"defined($1)\");\n        }\n\n        if (typeof v2 === \"string\") {\n          v2 = v2.replace(regexSERevert, \"defined($1)\");\n        }\n\n        operator.leftOperand = typeof v2 === \"string\" ? this._ExtractOperation(v2) : v2;\n        operator.rightOperand = typeof v1 === \"string\" ? this._ExtractOperation(v1) : v1;\n        stack.push(operator);\n      }\n    }\n\n    let result = stack[stack.length - 1];\n\n    if (typeof result === \"string\") {\n      result = result.replace(regexSERevert, \"defined($1)\");\n    } // note: stack.length !== 1 if there was an error in the parsing\n\n\n    return typeof result === \"string\" ? this._ExtractOperation(result) : result;\n  }\n\n  static _BuildExpression(line, start) {\n    const node = new _shaderCodeTestNode.ShaderCodeTestNode();\n    const command = line.substring(0, start);\n    let expression = line.substring(start);\n    expression = expression.substring(0, (expression.indexOf(\"//\") + 1 || expression.length + 1) - 1).trim();\n\n    if (command === \"#ifdef\") {\n      node.testExpression = new _shaderDefineIsDefinedOperator.ShaderDefineIsDefinedOperator(expression);\n    } else if (command === \"#ifndef\") {\n      node.testExpression = new _shaderDefineIsDefinedOperator.ShaderDefineIsDefinedOperator(expression, true);\n    } else {\n      node.testExpression = this._BuildSubExpression(expression);\n    }\n\n    return node;\n  }\n\n  static _MoveCursorWithinIf(cursor, rootNode, ifNode) {\n    let line = cursor.currentLine;\n\n    while (this._MoveCursor(cursor, ifNode)) {\n      line = cursor.currentLine;\n      const first5 = line.substring(0, 5).toLowerCase();\n\n      if (first5 === \"#else\") {\n        const elseNode = new _shaderCodeNode.ShaderCodeNode();\n        rootNode.children.push(elseNode);\n\n        this._MoveCursor(cursor, elseNode);\n\n        return;\n      } else if (first5 === \"#elif\") {\n        const elifNode = this._BuildExpression(line, 5);\n\n        rootNode.children.push(elifNode);\n        ifNode = elifNode;\n      }\n    }\n  }\n\n  static _MoveCursor(cursor, rootNode) {\n    while (cursor.canRead) {\n      cursor.lineIndex++;\n      const line = cursor.currentLine;\n\n      if (line.indexOf(\"#\") >= 0) {\n        const matches = ShaderProcessor._MoveCursorRegex.exec(line);\n\n        if (matches && matches.length) {\n          const keyword = matches[0];\n\n          switch (keyword) {\n            case \"#ifdef\":\n              {\n                const newRootNode = new _shaderCodeConditionNode.ShaderCodeConditionNode();\n                rootNode.children.push(newRootNode);\n\n                const ifNode = this._BuildExpression(line, 6);\n\n                newRootNode.children.push(ifNode);\n\n                this._MoveCursorWithinIf(cursor, newRootNode, ifNode);\n\n                break;\n              }\n\n            case \"#else\":\n            case \"#elif\":\n              return true;\n\n            case \"#endif\":\n              return false;\n\n            case \"#ifndef\":\n              {\n                const newRootNode = new _shaderCodeConditionNode.ShaderCodeConditionNode();\n                rootNode.children.push(newRootNode);\n\n                const ifNode = this._BuildExpression(line, 7);\n\n                newRootNode.children.push(ifNode);\n\n                this._MoveCursorWithinIf(cursor, newRootNode, ifNode);\n\n                break;\n              }\n\n            case \"#if\":\n              {\n                const newRootNode = new _shaderCodeConditionNode.ShaderCodeConditionNode();\n\n                const ifNode = this._BuildExpression(line, 3);\n\n                rootNode.children.push(newRootNode);\n                newRootNode.children.push(ifNode);\n\n                this._MoveCursorWithinIf(cursor, newRootNode, ifNode);\n\n                break;\n              }\n          }\n\n          continue;\n        }\n      }\n\n      const newNode = new _shaderCodeNode.ShaderCodeNode();\n      newNode.line = line;\n      rootNode.children.push(newNode); // Detect additional defines\n\n      if (line[0] === \"#\" && line[1] === \"d\") {\n        const split = line.replace(\";\", \"\").split(\" \");\n        newNode.additionalDefineKey = split[1];\n\n        if (split.length === 3) {\n          newNode.additionalDefineValue = split[2];\n        }\n      }\n    }\n\n    return false;\n  }\n\n  static _EvaluatePreProcessors(sourceCode, preprocessors, options) {\n    const rootNode = new _shaderCodeNode.ShaderCodeNode();\n    const cursor = new _shaderCodeCursor.ShaderCodeCursor();\n    cursor.lineIndex = -1;\n    cursor.lines = sourceCode.split(\"\\n\"); // Decompose (We keep it in 2 steps so it is easier to maintain and perf hit is insignificant)\n\n    this._MoveCursor(cursor, rootNode); // Recompose\n\n\n    return rootNode.process(preprocessors, options);\n  }\n\n  static _PreparePreProcessors(options, engine) {\n    var _a;\n\n    const defines = options.defines;\n    const preprocessors = {};\n\n    for (const define of defines) {\n      const keyValue = define.replace(\"#define\", \"\").replace(\";\", \"\").trim();\n      const split = keyValue.split(\" \");\n      preprocessors[split[0]] = split.length > 1 ? split[1] : \"\";\n    }\n\n    if (((_a = options.processor) === null || _a === void 0 ? void 0 : _a.shaderLanguage) === _shaderLanguage.ShaderLanguage.GLSL) {\n      preprocessors[\"GL_ES\"] = \"true\";\n    }\n\n    preprocessors[\"__VERSION__\"] = options.version;\n    preprocessors[options.platformName] = \"true\";\n\n    engine._getGlobalDefines(preprocessors);\n\n    return preprocessors;\n  }\n\n  static _ProcessShaderConversion(sourceCode, options, engine) {\n    let preparedSourceCode = this._ProcessPrecision(sourceCode, options);\n\n    if (!options.processor) {\n      return preparedSourceCode;\n    } // Already converted\n\n\n    if (options.processor.shaderLanguage === _shaderLanguage.ShaderLanguage.GLSL && preparedSourceCode.indexOf(\"#version 3\") !== -1) {\n      preparedSourceCode = preparedSourceCode.replace(\"#version 300 es\", \"\");\n\n      if (!options.processor.parseGLES3) {\n        return preparedSourceCode;\n      }\n    }\n\n    const defines = options.defines;\n\n    const preprocessors = this._PreparePreProcessors(options, engine); // General pre processing\n\n\n    if (options.processor.preProcessor) {\n      preparedSourceCode = options.processor.preProcessor(preparedSourceCode, defines, options.isFragment, options.processingContext);\n    }\n\n    preparedSourceCode = this._EvaluatePreProcessors(preparedSourceCode, preprocessors, options); // Post processing\n\n    if (options.processor.postProcessor) {\n      preparedSourceCode = options.processor.postProcessor(preparedSourceCode, defines, options.isFragment, options.processingContext, engine);\n    } // Inline functions tagged with #define inline\n\n\n    if (engine._features.needShaderCodeInlining) {\n      preparedSourceCode = engine.inlineShaderCode(preparedSourceCode);\n    }\n\n    return preparedSourceCode;\n  }\n\n  static _ApplyPreProcessing(sourceCode, options, engine) {\n    var _a, _b;\n\n    let preparedSourceCode = sourceCode;\n    const defines = options.defines;\n\n    const preprocessors = this._PreparePreProcessors(options, engine); // General pre processing\n\n\n    if ((_a = options.processor) === null || _a === void 0 ? void 0 : _a.preProcessor) {\n      preparedSourceCode = options.processor.preProcessor(preparedSourceCode, defines, options.isFragment, options.processingContext);\n    }\n\n    preparedSourceCode = this._EvaluatePreProcessors(preparedSourceCode, preprocessors, options); // Post processing\n\n    if ((_b = options.processor) === null || _b === void 0 ? void 0 : _b.postProcessor) {\n      preparedSourceCode = options.processor.postProcessor(preparedSourceCode, defines, options.isFragment, options.processingContext, engine);\n    } // Inline functions tagged with #define inline\n\n\n    if (engine._features.needShaderCodeInlining) {\n      preparedSourceCode = engine.inlineShaderCode(preparedSourceCode);\n    }\n\n    return preparedSourceCode;\n  }\n\n  static _ProcessIncludes(sourceCode, options, callback) {\n    reusableMatches.length = 0;\n    let match; // stay back-compat to the old matchAll syntax\n\n    while ((match = regexShaderInclude.exec(sourceCode)) !== null) {\n      reusableMatches.push(match);\n    }\n\n    let returnValue = String(sourceCode);\n    let parts = [sourceCode];\n    let keepProcessing = false;\n\n    for (const match of reusableMatches) {\n      let includeFile = match[1]; // Uniform declaration\n\n      if (includeFile.indexOf(\"__decl__\") !== -1) {\n        includeFile = includeFile.replace(regexShaderDecl, \"\");\n\n        if (options.supportsUniformBuffers) {\n          includeFile = includeFile.replace(\"Vertex\", \"Ubo\").replace(\"Fragment\", \"Ubo\");\n        }\n\n        includeFile = includeFile + \"Declaration\";\n      }\n\n      if (options.includesShadersStore[includeFile]) {\n        // Substitution\n        let includeContent = options.includesShadersStore[includeFile];\n\n        if (match[2]) {\n          const splits = match[3].split(\",\");\n\n          for (let index = 0; index < splits.length; index += 2) {\n            const source = new RegExp(splits[index], \"g\");\n            const dest = splits[index + 1];\n            includeContent = includeContent.replace(source, dest);\n          }\n        }\n\n        if (match[4]) {\n          const indexString = match[5];\n\n          if (indexString.indexOf(\"..\") !== -1) {\n            const indexSplits = indexString.split(\"..\");\n            const minIndex = parseInt(indexSplits[0]);\n            let maxIndex = parseInt(indexSplits[1]);\n            let sourceIncludeContent = includeContent.slice(0);\n            includeContent = \"\";\n\n            if (isNaN(maxIndex)) {\n              maxIndex = options.indexParameters[indexSplits[1]];\n            }\n\n            for (let i = minIndex; i < maxIndex; i++) {\n              if (!options.supportsUniformBuffers) {\n                // Ubo replacement\n                sourceIncludeContent = sourceIncludeContent.replace(regexLightX, (str, p1) => {\n                  return p1 + \"{X}\";\n                });\n              }\n\n              includeContent += sourceIncludeContent.replace(regexX, i.toString()) + \"\\n\";\n            }\n          } else {\n            if (!options.supportsUniformBuffers) {\n              // Ubo replacement\n              includeContent = includeContent.replace(regexLightX, (str, p1) => {\n                return p1 + \"{X}\";\n              });\n            }\n\n            includeContent = includeContent.replace(regexX, indexString);\n          }\n        } // Replace\n        // Split all parts on match[0] and intersperse the parts with the include content\n\n\n        const newParts = [];\n\n        for (const part of parts) {\n          const splitPart = part.split(match[0]);\n\n          for (let i = 0; i < splitPart.length - 1; i++) {\n            newParts.push(splitPart[i]);\n            newParts.push(includeContent);\n          }\n\n          newParts.push(splitPart[splitPart.length - 1]);\n        }\n\n        parts = newParts;\n        keepProcessing = keepProcessing || includeContent.indexOf(\"#include<\") >= 0 || includeContent.indexOf(\"#include <\") >= 0;\n      } else {\n        const includeShaderUrl = options.shadersRepository + \"ShadersInclude/\" + includeFile + \".fx\";\n\n        ShaderProcessor._FileToolsLoadFile(includeShaderUrl, fileContent => {\n          options.includesShadersStore[includeFile] = fileContent;\n\n          this._ProcessIncludes(parts.join(\"\"), options, callback);\n        });\n\n        return;\n      }\n    }\n\n    reusableMatches.length = 0;\n    returnValue = parts.join(\"\");\n\n    if (keepProcessing) {\n      this._ProcessIncludes(returnValue.toString(), options, callback);\n    } else {\n      callback(returnValue);\n    }\n  }\n  /**\n   * Loads a file from a url\n   * @param url url to load\n   * @param onSuccess callback called when the file successfully loads\n   * @param onProgress callback called while file is loading (if the server supports this mode)\n   * @param offlineProvider defines the offline provider for caching\n   * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\n   * @param onError callback called when the file fails to load\n   * @returns a file request object\n   * @internal\n   */\n\n\n  static _FileToolsLoadFile(url, onSuccess, onProgress, offlineProvider, useArrayBuffer, onError) {\n    throw (0, _devTools._WarnImport)(\"FileTools\");\n  }\n\n}\n\nexports.ShaderProcessor = ShaderProcessor;\nShaderProcessor._MoveCursorRegex = /(#ifdef)|(#else)|(#elif)|(#endif)|(#ifndef)|(#if)/;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ShaderProcessor","_shaderCodeNode","_shaderCodeCursor","_shaderCodeConditionNode","_shaderCodeTestNode","_shaderDefineIsDefinedOperator","_shaderDefineOrOperator","_shaderDefineAndOperator","_shaderDefineExpression","_shaderDefineArithmeticOperator","_devTools","_shaderLanguage","regexSE","regexSERevert","regexShaderInclude","regexShaderDecl","regexLightX","regexX","reusableMatches","Initialize","options","processor","initializeShaders","processingContext","Process","sourceCode","callback","engine","_a","preProcessShaderCode","isFragment","_ProcessIncludes","codeWithIncludes","processCodeAfterIncludes","migratedCode","_ProcessShaderConversion","PreProcess","_ApplyPreProcessing","Finalize","vertexCode","fragmentCode","finalizeShaders","_ProcessPrecision","source","noPrecision","shouldUseHighPrecisionShader","indexOf","replace","_ExtractOperation","expression","match","regex","exec","length","ShaderDefineIsDefinedOperator","trim","operators","operator","indexOperator","define","substring","ShaderDefineArithmeticOperator","_BuildSubExpression","postfix","ShaderDefineExpression","infixToPostfix","stack","c","push","v1","v2","ShaderDefineAndOperator","ShaderDefineOrOperator","leftOperand","rightOperand","result","_BuildExpression","line","start","node","ShaderCodeTestNode","command","testExpression","_MoveCursorWithinIf","cursor","rootNode","ifNode","_MoveCursor","currentLine","first5","toLowerCase","elseNode","ShaderCodeNode","children","elifNode","canRead","lineIndex","matches","_MoveCursorRegex","keyword","newRootNode","ShaderCodeConditionNode","newNode","split","additionalDefineKey","additionalDefineValue","_EvaluatePreProcessors","preprocessors","ShaderCodeCursor","lines","process","_PreparePreProcessors","defines","keyValue","shaderLanguage","ShaderLanguage","GLSL","version","platformName","_getGlobalDefines","preparedSourceCode","parseGLES3","preProcessor","postProcessor","_features","needShaderCodeInlining","inlineShaderCode","_b","returnValue","String","parts","keepProcessing","includeFile","supportsUniformBuffers","includesShadersStore","includeContent","splits","index","RegExp","dest","indexString","indexSplits","minIndex","parseInt","maxIndex","sourceIncludeContent","slice","isNaN","indexParameters","i","str","p1","toString","newParts","part","splitPart","_FileToolsLoadFile","shadersRepository","fileContent","join","url","onSuccess","onProgress","offlineProvider","useArrayBuffer","onError","_WarnImport"]
}
