{
"version":3,
"file":"module$node_modules$$babylonjs$core$PostProcesses$postProcessManager.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/PostProcesses/postProcessManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$PostProcesses$postProcessManager\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PostProcessManager = void 0;\n\nvar _buffer = require(\"../Buffers/buffer.js\");\n\n/**\n * PostProcessManager is used to manage one or more post processes or post process pipelines\n * See https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\n */\nclass PostProcessManager {\n  /**\n   * Creates a new instance PostProcess\n   * @param scene The scene that the post process is associated with.\n   */\n  constructor(scene) {\n    this._vertexBuffers = {};\n    this._scene = scene;\n  }\n\n  _prepareBuffers() {\n    if (this._vertexBuffers[_buffer.VertexBuffer.PositionKind]) {\n      return;\n    } // VBO\n\n\n    const vertices = [];\n    vertices.push(1, 1);\n    vertices.push(-1, 1);\n    vertices.push(-1, -1);\n    vertices.push(1, -1);\n    this._vertexBuffers[_buffer.VertexBuffer.PositionKind] = new _buffer.VertexBuffer(this._scene.getEngine(), vertices, _buffer.VertexBuffer.PositionKind, false, false, 2);\n\n    this._buildIndexBuffer();\n  }\n\n  _buildIndexBuffer() {\n    // Indices\n    const indices = [];\n    indices.push(0);\n    indices.push(1);\n    indices.push(2);\n    indices.push(0);\n    indices.push(2);\n    indices.push(3);\n    this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\n  }\n  /**\n   * Rebuilds the vertex buffers of the manager.\n   * @internal\n   */\n\n\n  _rebuild() {\n    const vb = this._vertexBuffers[_buffer.VertexBuffer.PositionKind];\n\n    if (!vb) {\n      return;\n    }\n\n    vb._rebuild();\n\n    this._buildIndexBuffer();\n  } // Methods\n\n  /**\n   * Prepares a frame to be run through a post process.\n   * @param sourceTexture The input texture to the post processes. (default: null)\n   * @param postProcesses An array of post processes to be run. (default: null)\n   * @returns True if the post processes were able to be run.\n   * @internal\n   */\n\n\n  _prepareFrame(sourceTexture = null, postProcesses = null) {\n    const camera = this._scene.activeCamera;\n\n    if (!camera) {\n      return false;\n    }\n\n    postProcesses = postProcesses || camera._postProcesses.filter(pp => {\n      return pp != null;\n    });\n\n    if (!postProcesses || postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n      return false;\n    }\n\n    postProcesses[0].activate(camera, sourceTexture, postProcesses !== null && postProcesses !== undefined);\n    return true;\n  }\n  /**\n   * Manually render a set of post processes to a texture.\n   * Please note, the frame buffer won't be unbound after the call in case you have more render to do.\n   * @param postProcesses An array of post processes to be run.\n   * @param targetTexture The render target wrapper to render to.\n   * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight\n   * @param faceIndex defines the face to render to if a cubemap is defined as the target\n   * @param lodLevel defines which lod of the texture to render to\n   * @param doNotBindFrambuffer If set to true, assumes that the framebuffer has been bound previously\n   */\n\n\n  directRender(postProcesses, targetTexture = null, forceFullscreenViewport = false, faceIndex = 0, lodLevel = 0, doNotBindFrambuffer = false) {\n    var _a;\n\n    const engine = this._scene.getEngine();\n\n    for (let index = 0; index < postProcesses.length; index++) {\n      if (index < postProcesses.length - 1) {\n        postProcesses[index + 1].activate(this._scene.activeCamera, targetTexture === null || targetTexture === void 0 ? void 0 : targetTexture.texture);\n      } else {\n        if (targetTexture) {\n          engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport, lodLevel);\n        } else if (!doNotBindFrambuffer) {\n          engine.restoreDefaultFramebuffer();\n        }\n\n        (_a = engine._debugInsertMarker) === null || _a === void 0 ? void 0 : _a.call(engine, `post process ${postProcesses[index].name} output`);\n      }\n\n      const pp = postProcesses[index];\n      const effect = pp.apply();\n\n      if (effect) {\n        pp.onBeforeRenderObservable.notifyObservers(effect); // VBOs\n\n        this._prepareBuffers();\n\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect); // Draw order\n\n        engine.drawElementsType(0, 0, 6);\n        pp.onAfterRenderObservable.notifyObservers(effect);\n      }\n    } // Restore depth buffer\n\n\n    engine.setDepthBuffer(true);\n    engine.setDepthWrite(true);\n  }\n  /**\n   * Finalize the result of the output of the postprocesses.\n   * @param doNotPresent If true the result will not be displayed to the screen.\n   * @param targetTexture The render target wrapper to render to.\n   * @param faceIndex The index of the face to bind the target texture to.\n   * @param postProcesses The array of post processes to render.\n   * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight (default: false)\n   * @internal\n   */\n\n\n  _finalizeFrame(doNotPresent, targetTexture, faceIndex, postProcesses, forceFullscreenViewport = false) {\n    var _a;\n\n    const camera = this._scene.activeCamera;\n\n    if (!camera) {\n      return;\n    }\n\n    postProcesses = postProcesses || camera._postProcesses.filter(pp => {\n      return pp != null;\n    });\n\n    if (postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n      return;\n    }\n\n    const engine = this._scene.getEngine();\n\n    for (let index = 0, len = postProcesses.length; index < len; index++) {\n      const pp = postProcesses[index];\n\n      if (index < len - 1) {\n        pp._outputTexture = postProcesses[index + 1].activate(camera, targetTexture === null || targetTexture === void 0 ? void 0 : targetTexture.texture);\n      } else {\n        if (targetTexture) {\n          engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport);\n          pp._outputTexture = targetTexture;\n        } else {\n          engine.restoreDefaultFramebuffer();\n          pp._outputTexture = null;\n        }\n\n        (_a = engine._debugInsertMarker) === null || _a === void 0 ? void 0 : _a.call(engine, `post process ${postProcesses[index].name} output`);\n      }\n\n      if (doNotPresent) {\n        break;\n      }\n\n      const effect = pp.apply();\n\n      if (effect) {\n        pp.onBeforeRenderObservable.notifyObservers(effect); // VBOs\n\n        this._prepareBuffers();\n\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect); // Draw order\n\n        engine.drawElementsType(0, 0, 6);\n        pp.onAfterRenderObservable.notifyObservers(effect);\n      }\n    } // Restore states\n\n\n    engine.setDepthBuffer(true);\n    engine.setDepthWrite(true);\n    engine.setAlphaMode(0);\n  }\n  /**\n   * Disposes of the post process manager.\n   */\n\n\n  dispose() {\n    const buffer = this._vertexBuffers[_buffer.VertexBuffer.PositionKind];\n\n    if (buffer) {\n      buffer.dispose();\n      this._vertexBuffers[_buffer.VertexBuffer.PositionKind] = null;\n    }\n\n    if (this._indexBuffer) {\n      this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n\n      this._indexBuffer = null;\n    }\n  }\n\n}\n\nexports.PostProcessManager = PostProcessManager;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","PostProcessManager","_buffer","constructor","scene","_vertexBuffers","_scene","_prepareBuffers","VertexBuffer","PositionKind","vertices","push","getEngine","_buildIndexBuffer","indices","_indexBuffer","createIndexBuffer","_rebuild","vb","_prepareFrame","sourceTexture","postProcesses","camera","activeCamera","_postProcesses","filter","pp","length","postProcessesEnabled","activate","undefined","directRender","targetTexture","forceFullscreenViewport","faceIndex","lodLevel","doNotBindFrambuffer","_a","engine","index","texture","bindFramebuffer","restoreDefaultFramebuffer","_debugInsertMarker","call","name","effect","apply","onBeforeRenderObservable","notifyObservers","bindBuffers","drawElementsType","onAfterRenderObservable","setDepthBuffer","setDepthWrite","_finalizeFrame","doNotPresent","len","_outputTexture","setAlphaMode","dispose","buffer","_releaseBuffer"]
}
