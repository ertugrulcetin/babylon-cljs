{
"version":3,
"file":"module$node_modules$$babylonjs$core$Materials$Textures$textureSampler.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,cAAR,CAAyB,IAAK,EAK9B,MAAMA,eAAN,CAQM,SAAQ,EAAA,CACV,MAAO,KAAKC,CAAAA,YADF,CAIR,SAAK,CAACF,KAAD,CAAQ,CACf,IAAKE,CAAAA,YAAL,CAAoBF,KADL,CAYb,SAAQ,EAAA,CACV,MAAO,KAAKG,CAAAA,YADF,CAIR,SAAK,CAACH,KAAD,CAAQ,CACf,IAAKG,CAAAA,YAAL,CAAoBH,KADL,CAYb,SAAQ,EAAA,CACV,MAAO,KAAKI,CAAAA,YADF,CAIR,SAAK,CAACJ,KAAD,CAAQ,CACf,IAAKI,CAAAA,YAAL,CAAoBJ,KADL,CAUb,6BAA4B,EAAA,CAC9B,MAAO,KAAKK,CAAAA,gCADkB,CAI5B,6BAAyB,CAACL,KAAD,CAAQ,CACnC,IAAKK,CAAAA,gCAAL;AAAwCL,KADL,CAQjC,sBAAqB,EAAA,CACvB,MAAO,KAAKM,CAAAA,mBADW,CAIrB,sBAAkB,CAACN,KAAD,CAAQ,CAC5B,IAAKM,CAAAA,mBAAL,CAA2BN,KADC,CAS1B,cAAa,EAAA,CACf,MAAO,KAAKO,CAAAA,WADG,CAIb,cAAU,CAACP,KAAD,CAAQ,CACpB,IAAKO,CAAAA,WAAL,CAAmBP,KADC,CAQtBQ,WAAW,EAAG,CAIZ,IAAKC,CAAAA,YAAL,CAAoB,CAAC,CACrB,KAAKF,CAAAA,WAAL,CAAmB,CAAA,CAYnB,KAAKF,CAAAA,gCAAL,CAHA,IAAKD,CAAAA,YAGL,CANA,IAAKD,CAAAA,YAML,CATA,IAAKD,CAAAA,YASL,CAToB,IAYpB,KAAKI,CAAAA,mBAAL,CAA2B,CApBf,CAkCdI,aAAa,CAACC,KAAA,CAAQ,CAAT,CAAYC,KAAA,CAAQ,CAApB,CAAuBC,KAAA,CAAQ,CAA/B,CAAkCC,yBAAA,CAA4B,CAA9D,CAAiEL,YAAA,CAAe,CAAhF,CAAmFM,kBAAA,CAAqB,CAAxG,CAA2G,CACtH,IAAKb,CAAAA,YAAL;AAAoBS,KACpB,KAAKR,CAAAA,YAAL,CAAoBS,KACpB,KAAKR,CAAAA,YAAL,CAAoBS,KACpB,KAAKR,CAAAA,gCAAL,CAAwCS,yBACxC,KAAKL,CAAAA,YAAL,CAAoBA,YACpB,KAAKH,CAAAA,mBAAL,CAA2BS,kBAC3B,OAAO,KAP+G,CAgBxHC,cAAc,CAACC,KAAD,CAAQ,CACpB,MAAO,KAAKf,CAAAA,YAAZ,GAA6Be,KAAMf,CAAAA,YAAnC,EAAmD,IAAKC,CAAAA,YAAxD,GAAyEc,KAAMd,CAAAA,YAA/E,EAA+F,IAAKC,CAAAA,YAApG,GAAqHa,KAAMb,CAAAA,YAA3H,EAA2I,IAAKC,CAAAA,gCAAhJ,GAAqLY,KAAMZ,CAAAA,gCAA3L,EAA+N,IAAKI,CAAAA,YAApO,GAAqPQ,KAAMR,CAAAA,YAA3P,EAA2Q,IAAKH,CAAAA,mBAAhR;AAAwSW,KAAMX,CAAAA,mBAA9S,EAAqU,IAAKC,CAAAA,WAA1U,GAA0VU,KAAMV,CAAAA,WAD5U,CA7IxB,CAmJAV,OAAQI,CAAAA,cAAR,CAAyBA,cA9JyG;",
"sources":["node_modules/@babylonjs/core/Materials/Textures/textureSampler.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Materials$Textures$textureSampler\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextureSampler = void 0;\n\n/**\n * Class used to store a texture sampler data\n */\nclass TextureSampler {\n  /**\n   * | Value | Type               | Description |\n   * | ----- | ------------------ | ----------- |\n   * | 0     | CLAMP_ADDRESSMODE  |             |\n   * | 1     | WRAP_ADDRESSMODE   |             |\n   * | 2     | MIRROR_ADDRESSMODE |             |\n   */\n  get wrapU() {\n    return this._cachedWrapU;\n  }\n\n  set wrapU(value) {\n    this._cachedWrapU = value;\n  }\n  /**\n   * | Value | Type               | Description |\n   * | ----- | ------------------ | ----------- |\n   * | 0     | CLAMP_ADDRESSMODE  |             |\n   * | 1     | WRAP_ADDRESSMODE   |             |\n   * | 2     | MIRROR_ADDRESSMODE |             |\n   */\n\n\n  get wrapV() {\n    return this._cachedWrapV;\n  }\n\n  set wrapV(value) {\n    this._cachedWrapV = value;\n  }\n  /**\n   * | Value | Type               | Description |\n   * | ----- | ------------------ | ----------- |\n   * | 0     | CLAMP_ADDRESSMODE  |             |\n   * | 1     | WRAP_ADDRESSMODE   |             |\n   * | 2     | MIRROR_ADDRESSMODE |             |\n   */\n\n\n  get wrapR() {\n    return this._cachedWrapR;\n  }\n\n  set wrapR(value) {\n    this._cachedWrapR = value;\n  }\n  /**\n   * With compliant hardware and browser (supporting anisotropic filtering)\n   * this defines the level of anisotropic filtering in the texture.\n   * The higher the better but the slower.\n   */\n\n\n  get anisotropicFilteringLevel() {\n    return this._cachedAnisotropicFilteringLevel;\n  }\n\n  set anisotropicFilteringLevel(value) {\n    this._cachedAnisotropicFilteringLevel = value;\n  }\n  /**\n   * Gets or sets the comparison function (513, 514, etc). Set 0 to not use a comparison function\n   */\n\n\n  get comparisonFunction() {\n    return this._comparisonFunction;\n  }\n\n  set comparisonFunction(value) {\n    this._comparisonFunction = value;\n  }\n  /**\n   * Indicates to use the mip maps (if available on the texture).\n   * Thanks to this flag, you can instruct the sampler to not sample the mipmaps even if they exist (and if the sampling mode is set to a value that normally samples the mipmaps!)\n   */\n\n\n  get useMipMaps() {\n    return this._useMipMaps;\n  }\n\n  set useMipMaps(value) {\n    this._useMipMaps = value;\n  }\n  /**\n   * Creates a Sampler instance\n   */\n\n\n  constructor() {\n    /**\n     * Gets the sampling mode of the texture\n     */\n    this.samplingMode = -1;\n    this._useMipMaps = true;\n    /** @internal */\n\n    this._cachedWrapU = null;\n    /** @internal */\n\n    this._cachedWrapV = null;\n    /** @internal */\n\n    this._cachedWrapR = null;\n    /** @internal */\n\n    this._cachedAnisotropicFilteringLevel = null;\n    /** @internal */\n\n    this._comparisonFunction = 0;\n  }\n  /**\n   * Sets all the parameters of the sampler\n   * @param wrapU u address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n   * @param wrapV v address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n   * @param wrapR r address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n   * @param anisotropicFilteringLevel anisotropic level (default: 1)\n   * @param samplingMode sampling mode (default: 2)\n   * @param comparisonFunction comparison function (default: 0 - no comparison function)\n   * @returns the current sampler instance\n   */\n\n\n  setParameters(wrapU = 1, wrapV = 1, wrapR = 1, anisotropicFilteringLevel = 1, samplingMode = 2, comparisonFunction = 0) {\n    this._cachedWrapU = wrapU;\n    this._cachedWrapV = wrapV;\n    this._cachedWrapR = wrapR;\n    this._cachedAnisotropicFilteringLevel = anisotropicFilteringLevel;\n    this.samplingMode = samplingMode;\n    this._comparisonFunction = comparisonFunction;\n    return this;\n  }\n  /**\n   * Compares this sampler with another one\n   * @param other sampler to compare with\n   * @returns true if the samplers have the same parametres, else false\n   */\n\n\n  compareSampler(other) {\n    return this._cachedWrapU === other._cachedWrapU && this._cachedWrapV === other._cachedWrapV && this._cachedWrapR === other._cachedWrapR && this._cachedAnisotropicFilteringLevel === other._cachedAnisotropicFilteringLevel && this.samplingMode === other.samplingMode && this._comparisonFunction === other._comparisonFunction && this._useMipMaps === other._useMipMaps;\n  }\n\n}\n\nexports.TextureSampler = TextureSampler;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","TextureSampler","_cachedWrapU","_cachedWrapV","_cachedWrapR","_cachedAnisotropicFilteringLevel","_comparisonFunction","_useMipMaps","constructor","samplingMode","setParameters","wrapU","wrapV","wrapR","anisotropicFilteringLevel","comparisonFunction","compareSampler","other"]
}
