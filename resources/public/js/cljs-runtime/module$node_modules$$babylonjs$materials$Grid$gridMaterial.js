shadow$provide.module$node_modules$$babylonjs$materials$Grid$gridMaterial=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.GridMaterial=void 0;global=require("module$node_modules$$babylonjs$core$tslib_es6");var _decorators=require("module$node_modules$$babylonjs$core$Misc$decorators"),_mathVector=require("module$node_modules$$babylonjs$core$Maths$math_vector"),_mathColor=require("module$node_modules$$babylonjs$core$Maths$math_color");module=require("module$node_modules$$babylonjs$core$Materials$materialDefines");
var _materialHelper=require("module$node_modules$$babylonjs$core$Materials$materialHelper"),_pushMaterial=require("module$node_modules$$babylonjs$core$Materials$pushMaterial"),_materialFlags=require("module$node_modules$$babylonjs$core$Materials$materialFlags"),_buffer=require("module$node_modules$$babylonjs$core$Buffers$buffer"),_typeStore=require("module$node_modules$$babylonjs$core$Misc$typeStore");require("module$node_modules$$babylonjs$materials$Grid$grid_fragment");require("module$node_modules$$babylonjs$materials$Grid$grid_vertex");
class GridMaterialDefines extends module.MaterialDefines{constructor(){super();this.SKIPFINALCOLORCLAMP=this.IMAGEPROCESSINGPOSTPROCESS=this.THIN_INSTANCES=this.INSTANCES=this.UV2=this.UV1=this.MAX_LINE=this.PREMULTIPLYALPHA=this.FOG=this.TRANSPARENT=this.OPACITY=!1;this.rebuild()}}class GridMaterial extends _pushMaterial.PushMaterial{constructor(name,scene){super(name,scene);this.mainColor=_mathColor.Color3.Black();this.lineColor=_mathColor.Color3.Teal();this.gridRatio=1;this.gridOffset=_mathVector.Vector3.Zero();
this.majorUnitFrequency=10;this.minorUnitVisibility=.33;this.opacity=1;this.useMaxLine=this.preMultiplyAlpha=!1;this._gridControl=new _mathVector.Vector4(this.gridRatio,this.majorUnitFrequency,this.minorUnitVisibility,this.opacity)}needAlphaBlending(){return 1>this.opacity||this._opacityTexture&&this._opacityTexture.isReady()}needAlphaBlendingForMesh(mesh){return 1>mesh.visibility||this.needAlphaBlending()}isReadyForSubMesh(mesh,subMesh,useInstances){if(this.isFrozen&&subMesh.effect&&subMesh.effect._wasPreviouslyReady&&
subMesh.effect._wasPreviouslyUsingInstances===useInstances)return!0;subMesh.materialDefines||(subMesh.materialDefines=new GridMaterialDefines);const defines=subMesh.materialDefines,scene=this.getScene();if(this._isReadyForSubMesh(subMesh))return!0;defines.TRANSPARENT!==1>this.opacity&&(defines.TRANSPARENT=!defines.TRANSPARENT,defines.markAsUnprocessed());defines.PREMULTIPLYALPHA!=this.preMultiplyAlpha&&(defines.PREMULTIPLYALPHA=!defines.PREMULTIPLYALPHA,defines.markAsUnprocessed());defines.MAX_LINE!==
this.useMaxLine&&(defines.MAX_LINE=!defines.MAX_LINE,defines.markAsUnprocessed());if(defines._areTexturesDirty&&(defines._needUVs=!1,scene.texturesEnabled&&this._opacityTexture&&_materialFlags.MaterialFlags.OpacityTextureEnabled))if(this._opacityTexture.isReady())defines._needUVs=!0,defines.OPACITY=!0;else return!1;_materialHelper.MaterialHelper.PrepareDefinesForMisc(mesh,scene,!1,!1,this.fogEnabled,!1,defines);_materialHelper.MaterialHelper.PrepareDefinesForFrameBoundValues(scene,scene.getEngine(),
this,defines,!!useInstances);if(defines.isDirty){defines.markAsProcessed();scene.resetCachedMaterial();_materialHelper.MaterialHelper.PrepareDefinesForAttributes(mesh,defines,!1,!1);mesh=[_buffer.VertexBuffer.PositionKind,_buffer.VertexBuffer.NormalKind];defines.UV1&&mesh.push(_buffer.VertexBuffer.UVKind);defines.UV2&&mesh.push(_buffer.VertexBuffer.UV2Kind);defines.IMAGEPROCESSINGPOSTPROCESS=scene.imageProcessingConfiguration.applyByPostProcess;_materialHelper.MaterialHelper.PrepareAttributesForInstances(mesh,
defines);const join=defines.toString();subMesh.setEffect(scene.getEngine().createEffect("grid",mesh,"projection mainColor lineColor gridControl gridOffset vFogInfos vFogColor world view opacityMatrix vOpacityInfos visibility".split(" "),["opacitySampler"],join,void 0,this.onCompiled,this.onError),defines,this._materialContext)}if(!subMesh.effect||!subMesh.effect.isReady())return!1;defines._renderId=scene.getRenderId();subMesh.effect._wasPreviouslyReady=!0;subMesh.effect._wasPreviouslyUsingInstances=
!!useInstances;return!0}bindForSubMesh(world,mesh,subMesh){const scene=this.getScene(),defines=subMesh.materialDefines;defines&&(subMesh=subMesh.effect)&&(this._activeEffect=subMesh,this._activeEffect.setFloat("visibility",mesh.visibility),defines.INSTANCES&&!defines.THIN_INSTANCE||this.bindOnlyWorldMatrix(world),this._activeEffect.setMatrix("view",scene.getViewMatrix()),this._activeEffect.setMatrix("projection",scene.getProjectionMatrix()),this._mustRebind(scene,subMesh)&&(this._activeEffect.setColor3("mainColor",
this.mainColor),this._activeEffect.setColor3("lineColor",this.lineColor),this._activeEffect.setVector3("gridOffset",this.gridOffset),this._gridControl.x=this.gridRatio,this._gridControl.y=Math.round(this.majorUnitFrequency),this._gridControl.z=this.minorUnitVisibility,this._gridControl.w=this.opacity,this._activeEffect.setVector4("gridControl",this._gridControl),this._opacityTexture&&_materialFlags.MaterialFlags.OpacityTextureEnabled&&(this._activeEffect.setTexture("opacitySampler",this._opacityTexture),
this._activeEffect.setFloat2("vOpacityInfos",this._opacityTexture.coordinatesIndex,this._opacityTexture.level),this._activeEffect.setMatrix("opacityMatrix",this._opacityTexture.getTextureMatrix()))),_materialHelper.MaterialHelper.BindFogParameters(scene,mesh,this._activeEffect),this._afterBind(mesh,this._activeEffect))}dispose(forceDisposeEffect){super.dispose(forceDisposeEffect)}clone(name){return _decorators.SerializationHelper.Clone(()=>new GridMaterial(name,this.getScene()),this)}serialize(){const serializationObject=
super.serialize();serializationObject.customType="BABYLON.GridMaterial";return serializationObject}getClassName(){return"GridMaterial"}static Parse(source,scene,rootUrl){return _decorators.SerializationHelper.Parse(()=>new GridMaterial(source.name,scene),source,scene,rootUrl)}}exports.GridMaterial=GridMaterial;(0,global.__decorate)([(0,_decorators.serializeAsColor3)()],GridMaterial.prototype,"mainColor",void 0);(0,global.__decorate)([(0,_decorators.serializeAsColor3)()],GridMaterial.prototype,"lineColor",
void 0);(0,global.__decorate)([(0,_decorators.serialize)()],GridMaterial.prototype,"gridRatio",void 0);(0,global.__decorate)([(0,_decorators.serializeAsVector3)()],GridMaterial.prototype,"gridOffset",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],GridMaterial.prototype,"majorUnitFrequency",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],GridMaterial.prototype,"minorUnitVisibility",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],GridMaterial.prototype,"opacity",
void 0);(0,global.__decorate)([(0,_decorators.serialize)()],GridMaterial.prototype,"preMultiplyAlpha",void 0);(0,global.__decorate)([(0,_decorators.serialize)()],GridMaterial.prototype,"useMaxLine",void 0);(0,global.__decorate)([(0,_decorators.serializeAsTexture)("opacityTexture")],GridMaterial.prototype,"_opacityTexture",void 0);(0,global.__decorate)([(0,_decorators.expandToProperty)("_markAllSubMeshesAsTexturesDirty")],GridMaterial.prototype,"opacityTexture",void 0);(0,_typeStore.RegisterClass)("BABYLON.GridMaterial",
GridMaterial)}
//# sourceMappingURL=module$node_modules$$babylonjs$materials$Grid$gridMaterial.js.map
