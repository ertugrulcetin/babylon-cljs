{
"version":3,
"file":"module$node_modules$$babylonjs$core$DeviceInput$InputDevices$deviceSourceManager.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/DeviceInput/InputDevices/deviceSourceManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$DeviceInput$InputDevices$deviceSourceManager\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DeviceSourceManager = void 0;\n\nvar _deviceEnums = require(\"./deviceEnums.js\");\n\nvar _observable = require(\"../../Misc/observable.js\");\n\nvar _internalDeviceSourceManager = require(\"../internalDeviceSourceManager.js\");\n\n/**\n * Class to keep track of devices\n */\nclass DeviceSourceManager {\n  // Public Functions\n\n  /**\n   * Gets a DeviceSource, given a type and slot\n   * @param deviceType - Type of Device\n   * @param deviceSlot - Slot or ID of device\n   * @returns DeviceSource\n   */\n  getDeviceSource(deviceType, deviceSlot) {\n    if (deviceSlot === undefined) {\n      if (this._firstDevice[deviceType] === undefined) {\n        return null;\n      }\n\n      deviceSlot = this._firstDevice[deviceType];\n    }\n\n    if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\n      return null;\n    }\n\n    return this._devices[deviceType][deviceSlot];\n  }\n  /**\n   * Gets an array of DeviceSource objects for a given device type\n   * @param deviceType - Type of Device\n   * @returns All available DeviceSources of a given type\n   */\n\n\n  getDeviceSources(deviceType) {\n    // If device type hasn't had any devices connected yet, return empty array.\n    if (!this._devices[deviceType]) {\n      return [];\n    }\n\n    return this._devices[deviceType].filter(source => {\n      return !!source;\n    });\n  }\n  /**\n   * Default constructor\n   * @param engine - Used to get canvas (if applicable)\n   */\n\n\n  constructor(engine) {\n    const numberOfDeviceTypes = Object.keys(_deviceEnums.DeviceType).length / 2;\n    this._devices = new Array(numberOfDeviceTypes);\n    this._firstDevice = new Array(numberOfDeviceTypes);\n    this._engine = engine;\n\n    if (!this._engine._deviceSourceManager) {\n      this._engine._deviceSourceManager = new _internalDeviceSourceManager.InternalDeviceSourceManager(engine);\n    }\n\n    this._engine._deviceSourceManager._refCount++; // Observables\n\n    this.onDeviceConnectedObservable = new _observable.Observable(observer => {\n      for (const devices of this._devices) {\n        if (devices) {\n          for (const device of devices) {\n            if (device) {\n              this.onDeviceConnectedObservable.notifyObserver(observer, device);\n            }\n          }\n        }\n      }\n    });\n    this.onDeviceDisconnectedObservable = new _observable.Observable();\n\n    this._engine._deviceSourceManager.registerManager(this);\n\n    this._onDisposeObserver = engine.onDisposeObservable.add(() => {\n      this.dispose();\n    });\n  }\n  /**\n   * Dispose of DeviceSourceManager\n   */\n\n\n  dispose() {\n    // Null out observable refs\n    this.onDeviceConnectedObservable.clear();\n    this.onDeviceDisconnectedObservable.clear();\n\n    if (this._engine._deviceSourceManager) {\n      this._engine._deviceSourceManager.unregisterManager(this);\n\n      if (--this._engine._deviceSourceManager._refCount < 1) {\n        this._engine._deviceSourceManager.dispose();\n\n        delete this._engine._deviceSourceManager;\n      }\n    }\n\n    this._engine.onDisposeObservable.remove(this._onDisposeObserver);\n  } // Hidden Functions\n\n  /**\n   * @param deviceSource - Source to add\n   * @internal\n   */\n\n\n  _addDevice(deviceSource) {\n    if (!this._devices[deviceSource.deviceType]) {\n      this._devices[deviceSource.deviceType] = new Array();\n    }\n\n    if (!this._devices[deviceSource.deviceType][deviceSource.deviceSlot]) {\n      this._devices[deviceSource.deviceType][deviceSource.deviceSlot] = deviceSource;\n\n      this._updateFirstDevices(deviceSource.deviceType);\n    }\n\n    this.onDeviceConnectedObservable.notifyObservers(deviceSource);\n  }\n  /**\n   * @param deviceType - DeviceType\n   * @param deviceSlot - DeviceSlot\n   * @internal\n   */\n\n\n  _removeDevice(deviceType, deviceSlot) {\n    var _a, _b;\n\n    const deviceSource = (_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]; // Grab local reference to use before removing from devices\n\n    this.onDeviceDisconnectedObservable.notifyObservers(deviceSource);\n\n    if ((_b = this._devices[deviceType]) === null || _b === void 0 ? void 0 : _b[deviceSlot]) {\n      delete this._devices[deviceType][deviceSlot];\n    } // Even if we don't delete a device, we should still check for the first device as things may have gotten out of sync.\n\n\n    this._updateFirstDevices(deviceType);\n  }\n  /**\n   * @param deviceType - DeviceType\n   * @param deviceSlot - DeviceSlot\n   * @param eventData - Event\n   * @internal\n   */\n\n\n  _onInputChanged(deviceType, deviceSlot, eventData) {\n    var _a, _b;\n\n    (_b = (_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]) === null || _b === void 0 ? void 0 : _b.onInputChangedObservable.notifyObservers(eventData);\n  } // Private Functions\n\n\n  _updateFirstDevices(type) {\n    switch (type) {\n      case _deviceEnums.DeviceType.Keyboard:\n      case _deviceEnums.DeviceType.Mouse:\n        this._firstDevice[type] = 0;\n        break;\n\n      case _deviceEnums.DeviceType.Touch:\n      case _deviceEnums.DeviceType.DualSense:\n      case _deviceEnums.DeviceType.DualShock:\n      case _deviceEnums.DeviceType.Xbox:\n      case _deviceEnums.DeviceType.Switch:\n      case _deviceEnums.DeviceType.Generic:\n        {\n          delete this._firstDevice[type]; // eslint-disable-next-line no-case-declarations\n\n          const devices = this._devices[type];\n\n          if (devices) {\n            for (let i = 0; i < devices.length; i++) {\n              if (devices[i]) {\n                this._firstDevice[type] = i;\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n    }\n  }\n\n}\n\nexports.DeviceSourceManager = DeviceSourceManager;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","DeviceSourceManager","_deviceEnums","_observable","_internalDeviceSourceManager","getDeviceSource","deviceType","deviceSlot","undefined","_firstDevice","_devices","getDeviceSources","filter","source","constructor","engine","numberOfDeviceTypes","keys","DeviceType","length","Array","_engine","_deviceSourceManager","InternalDeviceSourceManager","_refCount","onDeviceConnectedObservable","Observable","observer","devices","device","notifyObserver","onDeviceDisconnectedObservable","registerManager","_onDisposeObserver","onDisposeObservable","add","dispose","clear","unregisterManager","remove","_addDevice","deviceSource","_updateFirstDevices","notifyObservers","_removeDevice","_a","_b","_onInputChanged","eventData","onInputChangedObservable","type","Keyboard","Mouse","Touch","DualSense","DualShock","Xbox","Switch","Generic","i"]
}
