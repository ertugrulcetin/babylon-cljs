{
"version":3,
"file":"module$node_modules$$babylonjs$core$Maths$math_frustum.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Maths/math.frustum.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Maths$math_frustum\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Frustum = void 0;\n\nvar _mathPlane = require(\"./math.plane.js\");\n\n/**\n * Represents a camera frustum\n */\nclass Frustum {\n  /**\n   * Gets the planes representing the frustum\n   * @param transform matrix to be applied to the returned planes\n   * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\n   */\n  static GetPlanes(transform) {\n    const frustumPlanes = [];\n\n    for (let index = 0; index < 6; index++) {\n      frustumPlanes.push(new _mathPlane.Plane(0.0, 0.0, 0.0, 0.0));\n    }\n\n    Frustum.GetPlanesToRef(transform, frustumPlanes);\n    return frustumPlanes;\n  }\n  /**\n   * Gets the near frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  static GetNearPlaneToRef(transform, frustumPlane) {\n    const m = transform.m;\n    frustumPlane.normal.x = m[3] + m[2];\n    frustumPlane.normal.y = m[7] + m[6];\n    frustumPlane.normal.z = m[11] + m[10];\n    frustumPlane.d = m[15] + m[14];\n    frustumPlane.normalize();\n  }\n  /**\n   * Gets the far frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  static GetFarPlaneToRef(transform, frustumPlane) {\n    const m = transform.m;\n    frustumPlane.normal.x = m[3] - m[2];\n    frustumPlane.normal.y = m[7] - m[6];\n    frustumPlane.normal.z = m[11] - m[10];\n    frustumPlane.d = m[15] - m[14];\n    frustumPlane.normalize();\n  }\n  /**\n   * Gets the left frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  static GetLeftPlaneToRef(transform, frustumPlane) {\n    const m = transform.m;\n    frustumPlane.normal.x = m[3] + m[0];\n    frustumPlane.normal.y = m[7] + m[4];\n    frustumPlane.normal.z = m[11] + m[8];\n    frustumPlane.d = m[15] + m[12];\n    frustumPlane.normalize();\n  }\n  /**\n   * Gets the right frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  static GetRightPlaneToRef(transform, frustumPlane) {\n    const m = transform.m;\n    frustumPlane.normal.x = m[3] - m[0];\n    frustumPlane.normal.y = m[7] - m[4];\n    frustumPlane.normal.z = m[11] - m[8];\n    frustumPlane.d = m[15] - m[12];\n    frustumPlane.normalize();\n  }\n  /**\n   * Gets the top frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  static GetTopPlaneToRef(transform, frustumPlane) {\n    const m = transform.m;\n    frustumPlane.normal.x = m[3] - m[1];\n    frustumPlane.normal.y = m[7] - m[5];\n    frustumPlane.normal.z = m[11] - m[9];\n    frustumPlane.d = m[15] - m[13];\n    frustumPlane.normalize();\n  }\n  /**\n   * Gets the bottom frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  static GetBottomPlaneToRef(transform, frustumPlane) {\n    const m = transform.m;\n    frustumPlane.normal.x = m[3] + m[1];\n    frustumPlane.normal.y = m[7] + m[5];\n    frustumPlane.normal.z = m[11] + m[9];\n    frustumPlane.d = m[15] + m[13];\n    frustumPlane.normalize();\n  }\n  /**\n   * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\n   * @param transform transformation matrix to be applied to the resulting frustum planes\n   * @param frustumPlanes the resulting frustum planes\n   */\n\n\n  static GetPlanesToRef(transform, frustumPlanes) {\n    // Near\n    Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]); // Far\n\n    Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]); // Left\n\n    Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]); // Right\n\n    Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]); // Top\n\n    Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]); // Bottom\n\n    Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n  }\n  /**\n   * Tests if a point is located between the frustum planes.\n   * @param point defines the point to test\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if the point is located between the frustum planes\n   */\n\n\n  static IsPointInFrustum(point, frustumPlanes) {\n    for (let i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(point) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.Frustum = Frustum;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Frustum","_mathPlane","GetPlanes","transform","frustumPlanes","index","push","Plane","GetPlanesToRef","GetNearPlaneToRef","frustumPlane","m","normal","x","y","z","d","normalize","GetFarPlaneToRef","GetLeftPlaneToRef","GetRightPlaneToRef","GetTopPlaneToRef","GetBottomPlaneToRef","IsPointInFrustum","point","i","dotCoordinate"]
}
