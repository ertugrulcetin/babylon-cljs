{
"version":3,
"file":"module$node_modules$$babylonjs$core$Misc$arrayTools.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAsDhHC,QAASA,sBAAqB,CAACC,MAAD,CAASC,YAAT,CAAuBC,QAAvB,CAAiC,CAE7D,MAAMC,YAAcH,MAAA,CAAOC,YAAP,CAEpB,IAA2B,UAA3B,GAAI,MAAOE,YAAX,CACE,MAAO,KAIT,OAAMC,YAAcA,QAAS,EAAG,CAC9B,MAAMC,eAAiBL,MAAOM,CAAAA,MAA9B,CACMC,YAAcH,WAAYI,CAAAA,QAASC,CAAAA,KAArB,CAA2BT,MAA3B,CAAmCU,SAAnC,CACpBR,SAAA,CAASD,YAAT,CAAuBI,cAAvB,CACA,OAAOE,YAJuB,CAQhCJ,YAAYQ,CAAAA,IAAZ,CAAmBP,WACnBA,YAAYI,CAAAA,QAAZ,CAAuBL,WAEvBH,OAAA,CAAOC,YAAP,CAAA;AAAuBG,WAEvB,OAAO,EAAA,EAAM,CAEX,MAAMI,SAAWJ,WAAYI,CAAAA,QAE7B,IAAKA,QAAL,CAAA,CAKA,IAAMG,KAAOP,WAAYO,CAAAA,IAErBA,KAAJ,EACEH,QAASG,CAAAA,IACT,CADgBA,IAChB,CAAAA,IAAKH,CAAAA,QAAL,CAAgBA,QAFlB,GAMEA,QAASG,CAAAA,IACT,CADgBC,IAAAA,EAChB,CAAAZ,MAAA,CAAOC,YAAP,CAAA,CAAuBO,QAPzB,CAWAJ,YAAYO,CAAAA,IAAZ,CAAmBC,IAAAA,EACnBR,YAAYI,CAAAA,QAAZ,CAAuBI,IAAAA,EAnBvB,CAJW,CAtBgD,CAnD/DC,MAAOC,CAAAA,cAAP,CAAsBhB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CiB,MAAO,CAAA,CADoC,CAA7C,CAGAjB,QAAQkB,CAAAA,aAAR,CA+GAA,QAAsB,CAACC,KAAD,CAAQf,QAAR,CAAkB,CAEtC,MAAMgB,mBAAqBC,sBAAuBC,CAAAA,GAAvB,CAA2BC,IAAA,EAC7CtB,qBAAA,CAAsBkB,KAAtB,CAA6BI,IAA7B,CAAmCnB,QAAnC,CADkB,CAI3B,OAAO,EAAA,EAAM,CACXgB,kBAAmBI,CAAAA,OAAnB,CAA2BC,iBAAA;AAAqB,CACxB,IAAtB,GAAAA,iBAAA,EAAoD,IAAK,EAAzD,GAA8BA,iBAA9B,CAA6D,IAAK,EAAlE,CAAsEA,iBAAA,EADxB,CAAhD,CADW,CANyB,CA9GxCzB,QAAQ0B,CAAAA,UAAR,CAAqB,IAAK,EAO1B,MAAMA,WAAN,CAOSC,iBAAU,CAACC,IAAD,CAAOC,WAAP,CAAoB,CACnC,MAAMC,EAAI,EAEV,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,IAApB,CAA0B,EAAEG,CAA5B,CACED,CAAEE,CAAAA,IAAF,CAAOH,WAAA,EAAP,CAGF,OAAOC,EAP4B,CAiB9BG,iBAAU,CAACL,IAAD,CAAOC,WAAP,CAAoB,CACnC,MAAOH,WAAWC,CAAAA,UAAX,CAAsBC,IAAtB,CAA4BC,WAA5B,CAD4B,CAxBvC,CAsCA7B,OAAQ0B,CAAAA,UAAR,CAAqBA,UAwDrB,OAAML,uBAAyB,CAAC,MAAD,CAAS,QAAT,CAAmB,KAAnB,CAA0B,OAA1B,CAAmC,SAAnC,CA5GiF;",
"sources":["node_modules/@babylonjs/core/Misc/arrayTools.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Misc$arrayTools\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._ObserveArray = _ObserveArray;\nexports.ArrayTools = void 0;\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Class containing a set of static utilities functions for arrays.\n */\nclass ArrayTools {\n  /**\n   * Returns an array of the given size filled with elements built from the given constructor and the parameters.\n   * @param size the number of element to construct and put in the array.\n   * @param itemBuilder a callback responsible for creating new instance of item. Called once per array entry.\n   * @returns a new array filled with new objects.\n   */\n  static BuildArray(size, itemBuilder) {\n    const a = [];\n\n    for (let i = 0; i < size; ++i) {\n      a.push(itemBuilder());\n    }\n\n    return a;\n  }\n  /**\n   * Returns a tuple of the given size filled with elements built from the given constructor and the parameters.\n   * @param size he number of element to construct and put in the tuple.\n   * @param itemBuilder a callback responsible for creating new instance of item. Called once per tuple entry.\n   * @returns a new tuple filled with new objects.\n   */\n\n\n  static BuildTuple(size, itemBuilder) {\n    return ArrayTools.BuildArray(size, itemBuilder);\n  }\n\n}\n/**\n * Observes a function and calls the given callback when it is called.\n * @param object Defines the object the function to observe belongs to.\n * @param functionName Defines the name of the function to observe.\n * @param callback Defines the callback to call when the function is called.\n * @returns A function to call to stop observing\n */\n\n\nexports.ArrayTools = ArrayTools;\n\nfunction _observeArrayfunction(object, functionName, callback) {\n  // Finds the function to observe\n  const oldFunction = object[functionName];\n\n  if (typeof oldFunction !== \"function\") {\n    return null;\n  } // Creates a new function that calls the callback and the old function\n\n\n  const newFunction = function () {\n    const previousLength = object.length;\n    const returnValue = newFunction.previous.apply(object, arguments);\n    callback(functionName, previousLength);\n    return returnValue;\n  }; // Doublishly links the new function and the old function\n\n\n  oldFunction.next = newFunction;\n  newFunction.previous = oldFunction; // Replaces the old function with the new function\n\n  object[functionName] = newFunction; // Returns a function to disable the hook\n\n  return () => {\n    // Only unhook if the function is still hooked\n    const previous = newFunction.previous;\n\n    if (!previous) {\n      return;\n    } // Finds the ref to the next function in the chain\n\n\n    const next = newFunction.next; // If in the middle of the chain, link the previous and next functions\n\n    if (next) {\n      previous.next = next;\n      next.previous = previous;\n    } // If at the end of the chain, remove the reference to the previous function\n    // and restore the previous function\n    else {\n      previous.next = undefined;\n      object[functionName] = previous;\n    } // Lose reference to the previous and next functions\n\n\n    newFunction.next = undefined;\n    newFunction.previous = undefined;\n  };\n}\n/**\n * Defines the list of functions to proxy when observing an array.\n * The scope is currently reduced to the common functions used in the render target render list and the scene cameras.\n */\n\n\nconst observedArrayFunctions = [\"push\", \"splice\", \"pop\", \"shift\", \"unshift\"];\n/**\n * Observes an array and notifies the given observer when the array is modified.\n * @param array Defines the array to observe\n * @param callback Defines the function to call when the array is modified (in the limit of the observed array functions)\n * @returns A function to call to stop observing the array\n * @internal\n */\n\nfunction _ObserveArray(array, callback) {\n  // Observes all the required array functions and stores the unhook functions\n  const unObserveFunctions = observedArrayFunctions.map(name => {\n    return _observeArrayfunction(array, name, callback);\n  }); // Returns a function that unhook all the observed functions\n\n  return () => {\n    unObserveFunctions.forEach(unObserveFunction => {\n      unObserveFunction === null || unObserveFunction === void 0 ? void 0 : unObserveFunction();\n    });\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_observeArrayfunction","object","functionName","callback","oldFunction","newFunction","previousLength","length","returnValue","previous","apply","arguments","next","undefined","Object","defineProperty","value","_ObserveArray","array","unObserveFunctions","observedArrayFunctions","map","name","forEach","unObserveFunction","ArrayTools","BuildArray","size","itemBuilder","a","i","push","BuildTuple"]
}
