{
"version":3,
"file":"module$node_modules$$babylonjs$havok$lib$umd$HavokPhysics_umd.js",
"lineCount":102,
"mappings":"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",
"sources":["node_modules/@babylonjs/havok/lib/umd/HavokPhysics_umd.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$havok$lib$umd$HavokPhysics_umd\"] = function(global,require,module,exports) {\n\r\nvar HavokPhysics = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  \r\n  return (\r\nfunction(HavokPhysics) {\r\n  HavokPhysics = HavokPhysics || {};\r\n\r\nvar Module=typeof HavokPhysics!=\"undefined\"?HavokPhysics:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram=\"./this.program\";var quit_=(status,toThrow)=>{throw toThrow};var ENVIRONMENT_IS_WEB=true;var ENVIRONMENT_IS_WORKER=false;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!=\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=()=>{if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=title=>document.title=title}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var POINTER_SIZE=4;var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if(typeof WebAssembly!=\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(text)}}var UTF8Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heapOrArray,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}var str=\"\";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var c=str.charCodeAt(i);if(c<=127){len++}else if(c<=2047){len+=2}else if(c>=55296&&c<=57343){len+=4;++i}else{len+=3}}return len}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAP64,HEAPU64,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf);Module[\"HEAP64\"]=HEAP64=new BigInt64Array(buf);Module[\"HEAPU64\"]=HEAPU64=new BigUint64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function keepRuntimeAlive(){return noExitRuntime}function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){{if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}}what=\"Aborted(\"+what+\")\";err(what);ABORT=true;EXITSTATUS=1;what+=\". Build with -sASSERTIONS for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}var wasmBinaryFile;wasmBinaryFile=\"HavokPhysics.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}throw\"both async and sync fetching of the wasm failed\"}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch==\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"env\":asmLibraryArg,\"wasi_snapshot_preview1\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"memory\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"__indirect_function_table\"];addOnInit(Module[\"asm\"][\"__wasm_call_ctors\"]);removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(function(instance){return instance}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch==\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);readyPromiseReject(e)}}instantiateAsync().catch(readyPromiseReject);return{}}var tempDouble;var tempI64;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){callbacks.shift()(Module)}}function demangle(func){return func}function demangleAll(text){var regex=/\\b_Z[\\w\\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+\" [\"+x+\"]\"})}function handleException(e){if(e instanceof ExitStatus||e==\"unwind\"){return EXITSTATUS}quit_(1,e)}function jsStackTrace(){var error=new Error;if(!error.stack){try{throw new Error}catch(e){error=e}if(!error.stack){return\"(no stack trace available)\"}}return error.stack.toString()}var tupleRegistrations={};function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function simpleReadValueFromPointer(pointer){return this[\"fromWireType\"](HEAP32[pointer>>2])}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return\"_unknown\"}name=name.replace(/[^a-zA-Z0-9_]/g,\"$\");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return\"_\"+name}return name}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function(\"body\",\"return function \"+name+\"() {\\n\"+'    \"use strict\";'+\"    return body.apply(this, arguments);\\n\"+\"};\\n\")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+\"\\n\"+stack.replace(/^Error(:[^\\n]*)?\\n/,\"\")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return this.name+\": \"+this.message}};return errorClass}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError(\"Mismatched type converter count\")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach((dt,i)=>{if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(()=>{typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}}function __embind_finalize_value_array(rawTupleType){var reg=tupleRegistrations[rawTupleType];delete tupleRegistrations[rawTupleType];var elements=reg.elements;var elementsLength=elements.length;var elementTypes=elements.map(function(elt){return elt.getterReturnType}).concat(elements.map(function(elt){return elt.setterArgumentType}));var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;whenDependentTypesAreResolved([rawTupleType],elementTypes,function(elementTypes){elements.forEach((elt,i)=>{var getterReturnType=elementTypes[i];var getter=elt.getter;var getterContext=elt.getterContext;var setterArgumentType=elementTypes[i+elementsLength];var setter=elt.setter;var setterContext=elt.setterContext;elt.read=ptr=>{return getterReturnType[\"fromWireType\"](getter(getterContext,ptr))};elt.write=(ptr,o)=>{var destructors=[];setter(setterContext,ptr,setterArgumentType[\"toWireType\"](destructors,o));runDestructors(destructors)}});return[{name:reg.name,\"fromWireType\":function(ptr){var rv=new Array(elementsLength);for(var i=0;i<elementsLength;++i){rv[i]=elements[i].read(ptr)}rawDestructor(ptr);return rv},\"toWireType\":function(destructors,o){if(elementsLength!==o.length){throw new TypeError(\"Incorrect number of tuple elements for \"+reg.name+\": expected=\"+elementsLength+\", actual=\"+o.length)}var ptr=rawConstructor();for(var i=0;i<elementsLength;++i){elements[i].write(ptr,o[i])}if(destructors!==null){destructors.push(rawDestructor,ptr)}return ptr},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:rawDestructor}]})}function embindRepr(v){if(v===null){return\"null\"}var t=typeof v;if(t===\"object\"||t===\"array\"||t===\"function\"){return v.toString()}else{return\"\"+v}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret=\"\";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}function registerType(rawType,registeredInstance,options={}){if(!(\"argPackAdvance\"in registeredInstance)){throw new TypeError(\"registerType registeredInstance requires argPackAdvance\")}var name=registeredInstance.name;if(!rawType){throwBindingError('type \"'+name+'\" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError(\"Cannot register type '\"+name+\"' twice\")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(cb=>cb())}}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};case 3:return signed?function readS64FromPointer(pointer){return HEAP64[pointer>>3]}:function readU64FromPointer(pointer){return HEAPU64[pointer>>3]};default:throw new TypeError(\"Unknown integer type: \"+name)}}function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);var shift=getShiftFromSize(size);var isUnsignedType=name.indexOf(\"u\")!=-1;if(isUnsignedType){maxRange=(1n<<64n)-1n}registerType(primitiveType,{name:name,\"fromWireType\":function(value){return value},\"toWireType\":function(destructors,value){if(typeof value!=\"bigint\"&&typeof value!=\"number\"){throw new TypeError('Cannot convert \"'+embindRepr(value)+'\" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number \"'+embindRepr(value)+'\" from JS side to C/C++ side to an argument of type \"'+name+'\", which is outside the valid range ['+minRange+\", \"+maxRange+\"]!\")}return value},\"argPackAdvance\":8,\"readValueFromPointer\":integerReadValueFromPointer(name,shift,!isUnsignedType),destructorFunction:null})}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+size)}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(wt){return!!wt},\"toWireType\":function(destructors,o){return o?trueValue:falseValue},\"argPackAdvance\":8,\"readValueFromPointer\":function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError(\"Unknown boolean type size: \"+name)}return this[\"fromWireType\"](heap[pointer>>shift])},destructorFunction:null})}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module[\"count_emval_handles\"]=count_emval_handles;Module[\"get_first_emval\"]=get_first_emval}var Emval={toValue:handle=>{if(!handle){throwBindingError(\"Cannot use deleted val. handle = \"+handle)}return emval_handle_array[handle].value},toHandle:value=>{switch(value){case undefined:return 1;case null:return 2;case true:return 3;case false:return 4;default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}};function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(handle){var rv=Emval.toValue(handle);__emval_decref(handle);return rv},\"toWireType\":function(destructors,value){return Emval.toHandle(value)},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:null})}function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError(\"Function '\"+humanName+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+proto[methodName].overloadTable+\")!\")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError(\"Cannot register public name '\"+name+\"' twice\")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\"+numArguments+\")!\")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function enumReadValueFromPointer(name,shift,signed){switch(shift){case 0:return function(pointer){var heap=signed?HEAP8:HEAPU8;return this[\"fromWireType\"](heap[pointer])};case 1:return function(pointer){var heap=signed?HEAP16:HEAPU16;return this[\"fromWireType\"](heap[pointer>>1])};case 2:return function(pointer){var heap=signed?HEAP32:HEAPU32;return this[\"fromWireType\"](heap[pointer>>2])};default:throw new TypeError(\"Unknown integer type: \"+name)}}function __embind_register_enum(rawType,name,size,isSigned){var shift=getShiftFromSize(size);name=readLatin1String(name);function ctor(){}ctor.values={};registerType(rawType,{name:name,constructor:ctor,\"fromWireType\":function(c){return this.constructor.values[c]},\"toWireType\":function(destructors,c){return c.value},\"argPackAdvance\":8,\"readValueFromPointer\":enumReadValueFromPointer(name,shift,isSigned),destructorFunction:null});exposePublicSymbol(name,ctor)}function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+\" has unknown type \"+getTypeName(rawType))}return impl}function __embind_register_enum_value(rawEnumType,name,enumValue){var enumType=requireRegisteredType(rawEnumType,\"enum\");name=readLatin1String(name);var Enum=enumType.constructor;var Value=Object.create(enumType.constructor.prototype,{value:{value:enumValue},constructor:{value:createNamedFunction(enumType.name+\"_\"+name,function(){})}});Enum.values[enumValue]=Value;Enum[name]=Value}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this[\"fromWireType\"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this[\"fromWireType\"](HEAPF64[pointer>>3])};default:throw new TypeError(\"Unknown float type: \"+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(value){return value},\"toWireType\":function(destructors,value){return value},\"argPackAdvance\":8,\"readValueFromPointer\":floatReadValueFromPointer(name,shift),destructorFunction:null})}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError(\"new_ called with constructor type \"+typeof constructor+\" which is not a function\")}var dummy=createNamedFunction(constructor.name||\"unknownFunctionName\",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!==\"void\";var argsList=\"\";var argsListWired=\"\";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?\", \":\"\")+\"arg\"+i;argsListWired+=(i!==0?\", \":\"\")+\"arg\"+i+\"Wired\"}var invokerFnBody=\"return function \"+makeLegalFunctionName(humanName)+\"(\"+argsList+\") {\\n\"+\"if (arguments.length !== \"+(argCount-2)+\") {\\n\"+\"throwBindingError('function \"+humanName+\" called with ' + arguments.length + ' arguments, expected \"+(argCount-2)+\" args!');\\n\"+\"}\\n\";if(needsDestructorStack){invokerFnBody+=\"var destructors = [];\\n\"}var dtorStack=needsDestructorStack?\"destructors\":\"null\";var args1=[\"throwBindingError\",\"invoker\",\"fn\",\"runDestructors\",\"retType\",\"classParam\"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+=\"var thisWired = classParam.toWireType(\"+dtorStack+\", this);\\n\"}for(var i=0;i<argCount-2;++i){invokerFnBody+=\"var arg\"+i+\"Wired = argType\"+i+\".toWireType(\"+dtorStack+\", arg\"+i+\"); // \"+argTypes[i+2].name+\"\\n\";args1.push(\"argType\"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired=\"thisWired\"+(argsListWired.length>0?\", \":\"\")+argsListWired}invokerFnBody+=(returns?\"var rv = \":\"\")+\"invoker(fn\"+(argsListWired.length>0?\", \":\"\")+argsListWired+\");\\n\";if(needsDestructorStack){invokerFnBody+=\"runDestructors(destructors);\\n\"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?\"thisWired\":\"arg\"+(i-2)+\"Wired\";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+\"_dtor(\"+paramName+\"); // \"+argTypes[i].name+\"\\n\";args1.push(paramName+\"_dtor\");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+=\"var ret = retType.fromWireType(rv);\\n\"+\"return ret;\\n\"}else{}invokerFnBody+=\"}\\n\";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAPU32[firstElement+i*4>>2])}return array}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError(\"Replacing nonexistant public symbol\")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}var wasmTableMirror=[];function getWasmTableEntry(funcPtr){var func=wasmTableMirror[funcPtr];if(!func){if(funcPtr>=wasmTableMirror.length)wasmTableMirror.length=funcPtr+1;wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)}return func}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){return getWasmTableEntry(rawFunction)}var fp=makeDynCaller();if(typeof fp!=\"function\"){throwBindingError(\"unknown function pointer with signature \"+signature+\": \"+rawFunction)}return fp}var UnboundTypeError=undefined;function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+\": \"+unboundTypes.map(getTypeName).join([\", \"]))}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError(\"Cannot call \"+name+\" due to unbound types\",argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[]})}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=value=>value;if(minRange===0){var bitshift=32-8*size;fromWireType=value=>value<<bitshift>>>bitshift}var isUnsignedType=name.includes(\"unsigned\");var checkAssertions=(value,toTypeName)=>{};var toWireType;if(isUnsignedType){toWireType=function(destructors,value){checkAssertions(value,this.name);return value>>>0}}else{toWireType=function(destructors,value){checkAssertions(value,this.name);return value}}registerType(primitiveType,{name:name,\"fromWireType\":fromWireType,\"toWireType\":toWireType,\"argPackAdvance\":8,\"readValueFromPointer\":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":decodeMemoryView,\"argPackAdvance\":8,\"readValueFromPointer\":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name===\"std::string\";registerType(rawType,{name:name,\"fromWireType\":function(value){var length=HEAPU32[value>>2];var payload=value+4;var str;if(stdStringIsUTF8){var decodeStartPtr=payload;for(var i=0;i<=length;++i){var currentBytePtr=payload+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[payload+i])}str=a.join(\"\")}_free(value);return str},\"toWireType\":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var length;var valueIsOfTypeString=typeof value==\"string\";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError(\"Cannot pass non-string to std::string\")}if(stdStringIsUTF8&&valueIsOfTypeString){length=lengthBytesUTF8(value)}else{length=value.length}var base=_malloc(4+length+1);var ptr=base+4;HEAPU32[base>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\")}HEAPU8[ptr+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+i]=value[i]}}}if(destructors!==null){destructors.push(_free,base)}return base},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}var UTF16Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr));var str=\"\";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}function lengthBytesUTF16(str){return str.length*2}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str=\"\";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=()=>HEAPU16;shift=1}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=()=>HEAPU32;shift=2}registerType(rawType,{name:name,\"fromWireType\":function(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},\"toWireType\":function(destructors,value){if(!(typeof value==\"string\")){throwBindingError(\"Cannot pass non-string to C++ string type \"+name)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_value_array(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor){tupleRegistrations[rawType]={name:readLatin1String(name),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),elements:[]}}function __embind_register_value_array_element(rawTupleType,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){tupleRegistrations[rawTupleType].elements.push({getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,\"argPackAdvance\":0,\"fromWireType\":function(){return undefined},\"toWireType\":function(destructors,o){return undefined}})}var nowIsMonotonic=true;function __emscripten_get_now_is_monotonic(){return nowIsMonotonic}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];if(symbol===undefined){return readLatin1String(address)}return symbol}var emval_methodCallers=[];function __emval_call_void_method(caller,handle,methodName,args){caller=emval_methodCallers[caller];handle=Emval.toValue(handle);methodName=getStringOrSymbol(methodName);caller(handle,methodName,null,args)}function emval_addMethodCaller(caller){var id=emval_methodCallers.length;emval_methodCallers.push(caller);return id}function emval_lookupTypes(argCount,argTypes){var a=new Array(argCount);for(var i=0;i<argCount;++i){a[i]=requireRegisteredType(HEAPU32[argTypes+i*POINTER_SIZE>>2],\"parameter \"+i)}return a}var emval_registeredMethods=[];function __emval_get_method_caller(argCount,argTypes){var types=emval_lookupTypes(argCount,argTypes);var retType=types[0];var signatureName=retType.name+\"_$\"+types.slice(1).map(function(t){return t.name}).join(\"_\")+\"$\";var returnId=emval_registeredMethods[signatureName];if(returnId!==undefined){return returnId}var params=[\"retType\"];var args=[retType];var argsList=\"\";for(var i=0;i<argCount-1;++i){argsList+=(i!==0?\", \":\"\")+\"arg\"+i;params.push(\"argType\"+i);args.push(types[1+i])}var functionName=makeLegalFunctionName(\"methodCaller_\"+signatureName);var functionBody=\"return function \"+functionName+\"(handle, name, destructors, args) {\\n\";var offset=0;for(var i=0;i<argCount-1;++i){functionBody+=\"    var arg\"+i+\" = argType\"+i+\".readValueFromPointer(args\"+(offset?\"+\"+offset:\"\")+\");\\n\";offset+=types[i+1][\"argPackAdvance\"]}functionBody+=\"    var rv = handle[name](\"+argsList+\");\\n\";for(var i=0;i<argCount-1;++i){if(types[i+1][\"deleteObject\"]){functionBody+=\"    argType\"+i+\".deleteObject(arg\"+i+\");\\n\"}}if(!retType.isVoid){functionBody+=\"    return retType.toWireType(destructors, rv);\\n\"}functionBody+=\"};\\n\";params.push(functionBody);var invokerFunction=new_(Function,params).apply(null,args);returnId=emval_addMethodCaller(invokerFunction);emval_registeredMethods[signatureName]=returnId;return returnId}function _abort(){abort(\"\")}function _emscripten_date_now(){return Date.now()}function getHeapMax(){return 2147483648}function _emscripten_get_heap_max(){return getHeapMax()}var _emscripten_get_now;_emscripten_get_now=()=>performance.now();function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=getHeapMax();if(requestedSize>maxHeapSize){return false}let alignUp=(x,multiple)=>x+(multiple-x%multiple)%multiple;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var printCharBuffers=[null,[],[]];function printChar(stream,curr){var buffer=printCharBuffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}}var SYSCALLS={varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret}};function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;for(var j=0;j<len;j++){printChar(fd,HEAPU8[ptr+j])}num+=len}HEAPU32[pnum>>2]=num;return 0}function _proc_exit(code){EXITSTATUS=code;if(!keepRuntimeAlive()){if(Module[\"onExit\"])Module[\"onExit\"](code);ABORT=true}quit_(code,new ExitStatus(code))}function exitJS(status,implicit){EXITSTATUS=status;_proc_exit(status)}InternalError=Module[\"InternalError\"]=extendError(Error,\"InternalError\");embind_init_charCodes();BindingError=Module[\"BindingError\"]=extendError(Error,\"BindingError\");init_emval();UnboundTypeError=Module[\"UnboundTypeError\"]=extendError(Error,\"UnboundTypeError\");var asmLibraryArg={\"_embind_finalize_value_array\":__embind_finalize_value_array,\"_embind_register_bigint\":__embind_register_bigint,\"_embind_register_bool\":__embind_register_bool,\"_embind_register_emval\":__embind_register_emval,\"_embind_register_enum\":__embind_register_enum,\"_embind_register_enum_value\":__embind_register_enum_value,\"_embind_register_float\":__embind_register_float,\"_embind_register_function\":__embind_register_function,\"_embind_register_integer\":__embind_register_integer,\"_embind_register_memory_view\":__embind_register_memory_view,\"_embind_register_std_string\":__embind_register_std_string,\"_embind_register_std_wstring\":__embind_register_std_wstring,\"_embind_register_value_array\":__embind_register_value_array,\"_embind_register_value_array_element\":__embind_register_value_array_element,\"_embind_register_void\":__embind_register_void,\"_emscripten_get_now_is_monotonic\":__emscripten_get_now_is_monotonic,\"_emval_call_void_method\":__emval_call_void_method,\"_emval_decref\":__emval_decref,\"_emval_get_method_caller\":__emval_get_method_caller,\"abort\":_abort,\"emscripten_date_now\":_emscripten_date_now,\"emscripten_get_heap_max\":_emscripten_get_heap_max,\"emscripten_get_now\":_emscripten_get_now,\"emscripten_memcpy_big\":_emscripten_memcpy_big,\"emscripten_resize_heap\":_emscripten_resize_heap,\"fd_write\":_fd_write};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"__wasm_call_ctors\"]).apply(null,arguments)};var _HP_GetStatistics=Module[\"_HP_GetStatistics\"]=function(){return(_HP_GetStatistics=Module[\"_HP_GetStatistics\"]=Module[\"asm\"][\"HP_GetStatistics\"]).apply(null,arguments)};var _HP_Shape_CreateSphere=Module[\"_HP_Shape_CreateSphere\"]=function(){return(_HP_Shape_CreateSphere=Module[\"_HP_Shape_CreateSphere\"]=Module[\"asm\"][\"HP_Shape_CreateSphere\"]).apply(null,arguments)};var _HP_Shape_CreateCapsule=Module[\"_HP_Shape_CreateCapsule\"]=function(){return(_HP_Shape_CreateCapsule=Module[\"_HP_Shape_CreateCapsule\"]=Module[\"asm\"][\"HP_Shape_CreateCapsule\"]).apply(null,arguments)};var _HP_Shape_CreateCylinder=Module[\"_HP_Shape_CreateCylinder\"]=function(){return(_HP_Shape_CreateCylinder=Module[\"_HP_Shape_CreateCylinder\"]=Module[\"asm\"][\"HP_Shape_CreateCylinder\"]).apply(null,arguments)};var _HP_Shape_CreateBox=Module[\"_HP_Shape_CreateBox\"]=function(){return(_HP_Shape_CreateBox=Module[\"_HP_Shape_CreateBox\"]=Module[\"asm\"][\"HP_Shape_CreateBox\"]).apply(null,arguments)};var _HP_Shape_CreateConvexHull=Module[\"_HP_Shape_CreateConvexHull\"]=function(){return(_HP_Shape_CreateConvexHull=Module[\"_HP_Shape_CreateConvexHull\"]=Module[\"asm\"][\"HP_Shape_CreateConvexHull\"]).apply(null,arguments)};var _HP_Shape_CreateMesh=Module[\"_HP_Shape_CreateMesh\"]=function(){return(_HP_Shape_CreateMesh=Module[\"_HP_Shape_CreateMesh\"]=Module[\"asm\"][\"HP_Shape_CreateMesh\"]).apply(null,arguments)};var _HP_Shape_CreateHeightField=Module[\"_HP_Shape_CreateHeightField\"]=function(){return(_HP_Shape_CreateHeightField=Module[\"_HP_Shape_CreateHeightField\"]=Module[\"asm\"][\"HP_Shape_CreateHeightField\"]).apply(null,arguments)};var _HP_Shape_CreateContainer=Module[\"_HP_Shape_CreateContainer\"]=function(){return(_HP_Shape_CreateContainer=Module[\"_HP_Shape_CreateContainer\"]=Module[\"asm\"][\"HP_Shape_CreateContainer\"]).apply(null,arguments)};var _HP_Shape_Release=Module[\"_HP_Shape_Release\"]=function(){return(_HP_Shape_Release=Module[\"_HP_Shape_Release\"]=Module[\"asm\"][\"HP_Shape_Release\"]).apply(null,arguments)};var _HP_Shape_GetType=Module[\"_HP_Shape_GetType\"]=function(){return(_HP_Shape_GetType=Module[\"_HP_Shape_GetType\"]=Module[\"asm\"][\"HP_Shape_GetType\"]).apply(null,arguments)};var _HP_Shape_AddChild=Module[\"_HP_Shape_AddChild\"]=function(){return(_HP_Shape_AddChild=Module[\"_HP_Shape_AddChild\"]=Module[\"asm\"][\"HP_Shape_AddChild\"]).apply(null,arguments)};var _HP_Shape_RemoveChild=Module[\"_HP_Shape_RemoveChild\"]=function(){return(_HP_Shape_RemoveChild=Module[\"_HP_Shape_RemoveChild\"]=Module[\"asm\"][\"HP_Shape_RemoveChild\"]).apply(null,arguments)};var _HP_Shape_GetNumChildren=Module[\"_HP_Shape_GetNumChildren\"]=function(){return(_HP_Shape_GetNumChildren=Module[\"_HP_Shape_GetNumChildren\"]=Module[\"asm\"][\"HP_Shape_GetNumChildren\"]).apply(null,arguments)};var _HP_Shape_SetChildQSTransform=Module[\"_HP_Shape_SetChildQSTransform\"]=function(){return(_HP_Shape_SetChildQSTransform=Module[\"_HP_Shape_SetChildQSTransform\"]=Module[\"asm\"][\"HP_Shape_SetChildQSTransform\"]).apply(null,arguments)};var _HP_Shape_GetChildQSTransform=Module[\"_HP_Shape_GetChildQSTransform\"]=function(){return(_HP_Shape_GetChildQSTransform=Module[\"_HP_Shape_GetChildQSTransform\"]=Module[\"asm\"][\"HP_Shape_GetChildQSTransform\"]).apply(null,arguments)};var _HP_Shape_SetFilterInfo=Module[\"_HP_Shape_SetFilterInfo\"]=function(){return(_HP_Shape_SetFilterInfo=Module[\"_HP_Shape_SetFilterInfo\"]=Module[\"asm\"][\"HP_Shape_SetFilterInfo\"]).apply(null,arguments)};var _HP_Shape_GetFilterInfo=Module[\"_HP_Shape_GetFilterInfo\"]=function(){return(_HP_Shape_GetFilterInfo=Module[\"_HP_Shape_GetFilterInfo\"]=Module[\"asm\"][\"HP_Shape_GetFilterInfo\"]).apply(null,arguments)};var _HP_Shape_SetMaterial=Module[\"_HP_Shape_SetMaterial\"]=function(){return(_HP_Shape_SetMaterial=Module[\"_HP_Shape_SetMaterial\"]=Module[\"asm\"][\"HP_Shape_SetMaterial\"]).apply(null,arguments)};var _HP_Shape_GetMaterial=Module[\"_HP_Shape_GetMaterial\"]=function(){return(_HP_Shape_GetMaterial=Module[\"_HP_Shape_GetMaterial\"]=Module[\"asm\"][\"HP_Shape_GetMaterial\"]).apply(null,arguments)};var _HP_Shape_SetDensity=Module[\"_HP_Shape_SetDensity\"]=function(){return(_HP_Shape_SetDensity=Module[\"_HP_Shape_SetDensity\"]=Module[\"asm\"][\"HP_Shape_SetDensity\"]).apply(null,arguments)};var _HP_Shape_GetDensity=Module[\"_HP_Shape_GetDensity\"]=function(){return(_HP_Shape_GetDensity=Module[\"_HP_Shape_GetDensity\"]=Module[\"asm\"][\"HP_Shape_GetDensity\"]).apply(null,arguments)};var _HP_Shape_CastRay=Module[\"_HP_Shape_CastRay\"]=function(){return(_HP_Shape_CastRay=Module[\"_HP_Shape_CastRay\"]=Module[\"asm\"][\"HP_Shape_CastRay\"]).apply(null,arguments)};var _HP_Shape_BuildMassProperties=Module[\"_HP_Shape_BuildMassProperties\"]=function(){return(_HP_Shape_BuildMassProperties=Module[\"_HP_Shape_BuildMassProperties\"]=Module[\"asm\"][\"HP_Shape_BuildMassProperties\"]).apply(null,arguments)};var _HP_ShapePathIterator_GetNext=Module[\"_HP_ShapePathIterator_GetNext\"]=function(){return(_HP_ShapePathIterator_GetNext=Module[\"_HP_ShapePathIterator_GetNext\"]=Module[\"asm\"][\"HP_ShapePathIterator_GetNext\"]).apply(null,arguments)};var _HP_Shape_SetTrigger=Module[\"_HP_Shape_SetTrigger\"]=function(){return(_HP_Shape_SetTrigger=Module[\"_HP_Shape_SetTrigger\"]=Module[\"asm\"][\"HP_Shape_SetTrigger\"]).apply(null,arguments)};var _HP_Shape_CreateDebugDisplayGeometry=Module[\"_HP_Shape_CreateDebugDisplayGeometry\"]=function(){return(_HP_Shape_CreateDebugDisplayGeometry=Module[\"_HP_Shape_CreateDebugDisplayGeometry\"]=Module[\"asm\"][\"HP_Shape_CreateDebugDisplayGeometry\"]).apply(null,arguments)};var _HP_DebugGeometry_GetInfo=Module[\"_HP_DebugGeometry_GetInfo\"]=function(){return(_HP_DebugGeometry_GetInfo=Module[\"_HP_DebugGeometry_GetInfo\"]=Module[\"asm\"][\"HP_DebugGeometry_GetInfo\"]).apply(null,arguments)};var _HP_DebugGeometry_Release=Module[\"_HP_DebugGeometry_Release\"]=function(){return(_HP_DebugGeometry_Release=Module[\"_HP_DebugGeometry_Release\"]=Module[\"asm\"][\"HP_DebugGeometry_Release\"]).apply(null,arguments)};var _HP_Body_Create=Module[\"_HP_Body_Create\"]=function(){return(_HP_Body_Create=Module[\"_HP_Body_Create\"]=Module[\"asm\"][\"HP_Body_Create\"]).apply(null,arguments)};var _HP_Body_Release=Module[\"_HP_Body_Release\"]=function(){return(_HP_Body_Release=Module[\"_HP_Body_Release\"]=Module[\"asm\"][\"HP_Body_Release\"]).apply(null,arguments)};var _HP_Body_SetShape=Module[\"_HP_Body_SetShape\"]=function(){return(_HP_Body_SetShape=Module[\"_HP_Body_SetShape\"]=Module[\"asm\"][\"HP_Body_SetShape\"]).apply(null,arguments)};var _HP_Body_GetShape=Module[\"_HP_Body_GetShape\"]=function(){return(_HP_Body_GetShape=Module[\"_HP_Body_GetShape\"]=Module[\"asm\"][\"HP_Body_GetShape\"]).apply(null,arguments)};var _HP_Body_SetMotionType=Module[\"_HP_Body_SetMotionType\"]=function(){return(_HP_Body_SetMotionType=Module[\"_HP_Body_SetMotionType\"]=Module[\"asm\"][\"HP_Body_SetMotionType\"]).apply(null,arguments)};var _HP_Body_GetMotionType=Module[\"_HP_Body_GetMotionType\"]=function(){return(_HP_Body_GetMotionType=Module[\"_HP_Body_GetMotionType\"]=Module[\"asm\"][\"HP_Body_GetMotionType\"]).apply(null,arguments)};var _HP_Body_SetEventMask=Module[\"_HP_Body_SetEventMask\"]=function(){return(_HP_Body_SetEventMask=Module[\"_HP_Body_SetEventMask\"]=Module[\"asm\"][\"HP_Body_SetEventMask\"]).apply(null,arguments)};var _HP_Body_GetEventMask=Module[\"_HP_Body_GetEventMask\"]=function(){return(_HP_Body_GetEventMask=Module[\"_HP_Body_GetEventMask\"]=Module[\"asm\"][\"HP_Body_GetEventMask\"]).apply(null,arguments)};var _HP_Body_SetMassProperties=Module[\"_HP_Body_SetMassProperties\"]=function(){return(_HP_Body_SetMassProperties=Module[\"_HP_Body_SetMassProperties\"]=Module[\"asm\"][\"HP_Body_SetMassProperties\"]).apply(null,arguments)};var _HP_Body_GetMassProperties=Module[\"_HP_Body_GetMassProperties\"]=function(){return(_HP_Body_GetMassProperties=Module[\"_HP_Body_GetMassProperties\"]=Module[\"asm\"][\"HP_Body_GetMassProperties\"]).apply(null,arguments)};var _HP_Body_SetLinearDamping=Module[\"_HP_Body_SetLinearDamping\"]=function(){return(_HP_Body_SetLinearDamping=Module[\"_HP_Body_SetLinearDamping\"]=Module[\"asm\"][\"HP_Body_SetLinearDamping\"]).apply(null,arguments)};var _HP_Body_GetLinearDamping=Module[\"_HP_Body_GetLinearDamping\"]=function(){return(_HP_Body_GetLinearDamping=Module[\"_HP_Body_GetLinearDamping\"]=Module[\"asm\"][\"HP_Body_GetLinearDamping\"]).apply(null,arguments)};var _HP_Body_SetAngularDamping=Module[\"_HP_Body_SetAngularDamping\"]=function(){return(_HP_Body_SetAngularDamping=Module[\"_HP_Body_SetAngularDamping\"]=Module[\"asm\"][\"HP_Body_SetAngularDamping\"]).apply(null,arguments)};var _HP_Body_GetAngularDamping=Module[\"_HP_Body_GetAngularDamping\"]=function(){return(_HP_Body_GetAngularDamping=Module[\"_HP_Body_GetAngularDamping\"]=Module[\"asm\"][\"HP_Body_GetAngularDamping\"]).apply(null,arguments)};var _HP_Body_SetGravityFactor=Module[\"_HP_Body_SetGravityFactor\"]=function(){return(_HP_Body_SetGravityFactor=Module[\"_HP_Body_SetGravityFactor\"]=Module[\"asm\"][\"HP_Body_SetGravityFactor\"]).apply(null,arguments)};var _HP_Body_GetGravityFactor=Module[\"_HP_Body_GetGravityFactor\"]=function(){return(_HP_Body_GetGravityFactor=Module[\"_HP_Body_GetGravityFactor\"]=Module[\"asm\"][\"HP_Body_GetGravityFactor\"]).apply(null,arguments)};var _HP_Body_GetWorld=Module[\"_HP_Body_GetWorld\"]=function(){return(_HP_Body_GetWorld=Module[\"_HP_Body_GetWorld\"]=Module[\"asm\"][\"HP_Body_GetWorld\"]).apply(null,arguments)};var _HP_Body_SetPosition=Module[\"_HP_Body_SetPosition\"]=function(){return(_HP_Body_SetPosition=Module[\"_HP_Body_SetPosition\"]=Module[\"asm\"][\"HP_Body_SetPosition\"]).apply(null,arguments)};var _HP_Body_GetPosition=Module[\"_HP_Body_GetPosition\"]=function(){return(_HP_Body_GetPosition=Module[\"_HP_Body_GetPosition\"]=Module[\"asm\"][\"HP_Body_GetPosition\"]).apply(null,arguments)};var _HP_Body_SetOrientation=Module[\"_HP_Body_SetOrientation\"]=function(){return(_HP_Body_SetOrientation=Module[\"_HP_Body_SetOrientation\"]=Module[\"asm\"][\"HP_Body_SetOrientation\"]).apply(null,arguments)};var _HP_Body_GetOrientation=Module[\"_HP_Body_GetOrientation\"]=function(){return(_HP_Body_GetOrientation=Module[\"_HP_Body_GetOrientation\"]=Module[\"asm\"][\"HP_Body_GetOrientation\"]).apply(null,arguments)};var _HP_Body_SetQTransform=Module[\"_HP_Body_SetQTransform\"]=function(){return(_HP_Body_SetQTransform=Module[\"_HP_Body_SetQTransform\"]=Module[\"asm\"][\"HP_Body_SetQTransform\"]).apply(null,arguments)};var _HP_Body_GetWorldTransformOffset=Module[\"_HP_Body_GetWorldTransformOffset\"]=function(){return(_HP_Body_GetWorldTransformOffset=Module[\"_HP_Body_GetWorldTransformOffset\"]=Module[\"asm\"][\"HP_Body_GetWorldTransformOffset\"]).apply(null,arguments)};var _HP_Body_GetQTransform=Module[\"_HP_Body_GetQTransform\"]=function(){return(_HP_Body_GetQTransform=Module[\"_HP_Body_GetQTransform\"]=Module[\"asm\"][\"HP_Body_GetQTransform\"]).apply(null,arguments)};var _HP_Body_SetLinearVelocity=Module[\"_HP_Body_SetLinearVelocity\"]=function(){return(_HP_Body_SetLinearVelocity=Module[\"_HP_Body_SetLinearVelocity\"]=Module[\"asm\"][\"HP_Body_SetLinearVelocity\"]).apply(null,arguments)};var _HP_Body_GetLinearVelocity=Module[\"_HP_Body_GetLinearVelocity\"]=function(){return(_HP_Body_GetLinearVelocity=Module[\"_HP_Body_GetLinearVelocity\"]=Module[\"asm\"][\"HP_Body_GetLinearVelocity\"]).apply(null,arguments)};var _HP_Body_SetAngularVelocity=Module[\"_HP_Body_SetAngularVelocity\"]=function(){return(_HP_Body_SetAngularVelocity=Module[\"_HP_Body_SetAngularVelocity\"]=Module[\"asm\"][\"HP_Body_SetAngularVelocity\"]).apply(null,arguments)};var _HP_Body_GetAngularVelocity=Module[\"_HP_Body_GetAngularVelocity\"]=function(){return(_HP_Body_GetAngularVelocity=Module[\"_HP_Body_GetAngularVelocity\"]=Module[\"asm\"][\"HP_Body_GetAngularVelocity\"]).apply(null,arguments)};var _HP_Body_ApplyImpulse=Module[\"_HP_Body_ApplyImpulse\"]=function(){return(_HP_Body_ApplyImpulse=Module[\"_HP_Body_ApplyImpulse\"]=Module[\"asm\"][\"HP_Body_ApplyImpulse\"]).apply(null,arguments)};var _HP_Body_SetTargetQTransform=Module[\"_HP_Body_SetTargetQTransform\"]=function(){return(_HP_Body_SetTargetQTransform=Module[\"_HP_Body_SetTargetQTransform\"]=Module[\"asm\"][\"HP_Body_SetTargetQTransform\"]).apply(null,arguments)};var _HP_Body_SetActivationState=Module[\"_HP_Body_SetActivationState\"]=function(){return(_HP_Body_SetActivationState=Module[\"_HP_Body_SetActivationState\"]=Module[\"asm\"][\"HP_Body_SetActivationState\"]).apply(null,arguments)};var _HP_Body_GetActivationState=Module[\"_HP_Body_GetActivationState\"]=function(){return(_HP_Body_GetActivationState=Module[\"_HP_Body_GetActivationState\"]=Module[\"asm\"][\"HP_Body_GetActivationState\"]).apply(null,arguments)};var _HP_Body_SetActivationControl=Module[\"_HP_Body_SetActivationControl\"]=function(){return(_HP_Body_SetActivationControl=Module[\"_HP_Body_SetActivationControl\"]=Module[\"asm\"][\"HP_Body_SetActivationControl\"]).apply(null,arguments)};var _HP_Body_SetActivationPriority=Module[\"_HP_Body_SetActivationPriority\"]=function(){return(_HP_Body_SetActivationPriority=Module[\"_HP_Body_SetActivationPriority\"]=Module[\"asm\"][\"HP_Body_SetActivationPriority\"]).apply(null,arguments)};var _HP_Constraint_Create=Module[\"_HP_Constraint_Create\"]=function(){return(_HP_Constraint_Create=Module[\"_HP_Constraint_Create\"]=Module[\"asm\"][\"HP_Constraint_Create\"]).apply(null,arguments)};var _HP_Constraint_Release=Module[\"_HP_Constraint_Release\"]=function(){return(_HP_Constraint_Release=Module[\"_HP_Constraint_Release\"]=Module[\"asm\"][\"HP_Constraint_Release\"]).apply(null,arguments)};var _HP_Constraint_SetParentBody=Module[\"_HP_Constraint_SetParentBody\"]=function(){return(_HP_Constraint_SetParentBody=Module[\"_HP_Constraint_SetParentBody\"]=Module[\"asm\"][\"HP_Constraint_SetParentBody\"]).apply(null,arguments)};var _HP_Constraint_GetParentBody=Module[\"_HP_Constraint_GetParentBody\"]=function(){return(_HP_Constraint_GetParentBody=Module[\"_HP_Constraint_GetParentBody\"]=Module[\"asm\"][\"HP_Constraint_GetParentBody\"]).apply(null,arguments)};var _HP_Constraint_SetChildBody=Module[\"_HP_Constraint_SetChildBody\"]=function(){return(_HP_Constraint_SetChildBody=Module[\"_HP_Constraint_SetChildBody\"]=Module[\"asm\"][\"HP_Constraint_SetChildBody\"]).apply(null,arguments)};var _HP_Constraint_GetChildBody=Module[\"_HP_Constraint_GetChildBody\"]=function(){return(_HP_Constraint_GetChildBody=Module[\"_HP_Constraint_GetChildBody\"]=Module[\"asm\"][\"HP_Constraint_GetChildBody\"]).apply(null,arguments)};var _HP_Constraint_SetAnchorInParent=Module[\"_HP_Constraint_SetAnchorInParent\"]=function(){return(_HP_Constraint_SetAnchorInParent=Module[\"_HP_Constraint_SetAnchorInParent\"]=Module[\"asm\"][\"HP_Constraint_SetAnchorInParent\"]).apply(null,arguments)};var _HP_Constraint_SetAnchorInChild=Module[\"_HP_Constraint_SetAnchorInChild\"]=function(){return(_HP_Constraint_SetAnchorInChild=Module[\"_HP_Constraint_SetAnchorInChild\"]=Module[\"asm\"][\"HP_Constraint_SetAnchorInChild\"]).apply(null,arguments)};var _HP_Constraint_SetCollisionsEnabled=Module[\"_HP_Constraint_SetCollisionsEnabled\"]=function(){return(_HP_Constraint_SetCollisionsEnabled=Module[\"_HP_Constraint_SetCollisionsEnabled\"]=Module[\"asm\"][\"HP_Constraint_SetCollisionsEnabled\"]).apply(null,arguments)};var _HP_Constraint_GetCollisionsEnabled=Module[\"_HP_Constraint_GetCollisionsEnabled\"]=function(){return(_HP_Constraint_GetCollisionsEnabled=Module[\"_HP_Constraint_GetCollisionsEnabled\"]=Module[\"asm\"][\"HP_Constraint_GetCollisionsEnabled\"]).apply(null,arguments)};var _HP_Constraint_SetEnabled=Module[\"_HP_Constraint_SetEnabled\"]=function(){return(_HP_Constraint_SetEnabled=Module[\"_HP_Constraint_SetEnabled\"]=Module[\"asm\"][\"HP_Constraint_SetEnabled\"]).apply(null,arguments)};var _HP_Constraint_GetEnabled=Module[\"_HP_Constraint_GetEnabled\"]=function(){return(_HP_Constraint_GetEnabled=Module[\"_HP_Constraint_GetEnabled\"]=Module[\"asm\"][\"HP_Constraint_GetEnabled\"]).apply(null,arguments)};var _HP_Constraint_SetAxisMinLimit=Module[\"_HP_Constraint_SetAxisMinLimit\"]=function(){return(_HP_Constraint_SetAxisMinLimit=Module[\"_HP_Constraint_SetAxisMinLimit\"]=Module[\"asm\"][\"HP_Constraint_SetAxisMinLimit\"]).apply(null,arguments)};var _HP_Constraint_GetAxisMinLimit=Module[\"_HP_Constraint_GetAxisMinLimit\"]=function(){return(_HP_Constraint_GetAxisMinLimit=Module[\"_HP_Constraint_GetAxisMinLimit\"]=Module[\"asm\"][\"HP_Constraint_GetAxisMinLimit\"]).apply(null,arguments)};var _HP_Constraint_SetAxisMaxLimit=Module[\"_HP_Constraint_SetAxisMaxLimit\"]=function(){return(_HP_Constraint_SetAxisMaxLimit=Module[\"_HP_Constraint_SetAxisMaxLimit\"]=Module[\"asm\"][\"HP_Constraint_SetAxisMaxLimit\"]).apply(null,arguments)};var _HP_Constraint_GetAxisMaxLimit=Module[\"_HP_Constraint_GetAxisMaxLimit\"]=function(){return(_HP_Constraint_GetAxisMaxLimit=Module[\"_HP_Constraint_GetAxisMaxLimit\"]=Module[\"asm\"][\"HP_Constraint_GetAxisMaxLimit\"]).apply(null,arguments)};var _HP_Constraint_GetAxisMode=Module[\"_HP_Constraint_GetAxisMode\"]=function(){return(_HP_Constraint_GetAxisMode=Module[\"_HP_Constraint_GetAxisMode\"]=Module[\"asm\"][\"HP_Constraint_GetAxisMode\"]).apply(null,arguments)};var _HP_Constraint_SetAxisMode=Module[\"_HP_Constraint_SetAxisMode\"]=function(){return(_HP_Constraint_SetAxisMode=Module[\"_HP_Constraint_SetAxisMode\"]=Module[\"asm\"][\"HP_Constraint_SetAxisMode\"]).apply(null,arguments)};var _HP_Constraint_SetAxisFriction=Module[\"_HP_Constraint_SetAxisFriction\"]=function(){return(_HP_Constraint_SetAxisFriction=Module[\"_HP_Constraint_SetAxisFriction\"]=Module[\"asm\"][\"HP_Constraint_SetAxisFriction\"]).apply(null,arguments)};var _HP_Constraint_GetAxisFriction=Module[\"_HP_Constraint_GetAxisFriction\"]=function(){return(_HP_Constraint_GetAxisFriction=Module[\"_HP_Constraint_GetAxisFriction\"]=Module[\"asm\"][\"HP_Constraint_GetAxisFriction\"]).apply(null,arguments)};var _HP_Constraint_SetAxisMotorType=Module[\"_HP_Constraint_SetAxisMotorType\"]=function(){return(_HP_Constraint_SetAxisMotorType=Module[\"_HP_Constraint_SetAxisMotorType\"]=Module[\"asm\"][\"HP_Constraint_SetAxisMotorType\"]).apply(null,arguments)};var _HP_Constraint_GetAxisMotorType=Module[\"_HP_Constraint_GetAxisMotorType\"]=function(){return(_HP_Constraint_GetAxisMotorType=Module[\"_HP_Constraint_GetAxisMotorType\"]=Module[\"asm\"][\"HP_Constraint_GetAxisMotorType\"]).apply(null,arguments)};var _HP_Constraint_SetAxisMotorTarget=Module[\"_HP_Constraint_SetAxisMotorTarget\"]=function(){return(_HP_Constraint_SetAxisMotorTarget=Module[\"_HP_Constraint_SetAxisMotorTarget\"]=Module[\"asm\"][\"HP_Constraint_SetAxisMotorTarget\"]).apply(null,arguments)};var _HP_Constraint_GetAxisMotorTarget=Module[\"_HP_Constraint_GetAxisMotorTarget\"]=function(){return(_HP_Constraint_GetAxisMotorTarget=Module[\"_HP_Constraint_GetAxisMotorTarget\"]=Module[\"asm\"][\"HP_Constraint_GetAxisMotorTarget\"]).apply(null,arguments)};var _HP_Constraint_SetAxisMotorMaxForce=Module[\"_HP_Constraint_SetAxisMotorMaxForce\"]=function(){return(_HP_Constraint_SetAxisMotorMaxForce=Module[\"_HP_Constraint_SetAxisMotorMaxForce\"]=Module[\"asm\"][\"HP_Constraint_SetAxisMotorMaxForce\"]).apply(null,arguments)};var _HP_Constraint_GetAxisMotorMaxForce=Module[\"_HP_Constraint_GetAxisMotorMaxForce\"]=function(){return(_HP_Constraint_GetAxisMotorMaxForce=Module[\"_HP_Constraint_GetAxisMotorMaxForce\"]=Module[\"asm\"][\"HP_Constraint_GetAxisMotorMaxForce\"]).apply(null,arguments)};var _HP_Constraint_SetAxisStiffness=Module[\"_HP_Constraint_SetAxisStiffness\"]=function(){return(_HP_Constraint_SetAxisStiffness=Module[\"_HP_Constraint_SetAxisStiffness\"]=Module[\"asm\"][\"HP_Constraint_SetAxisStiffness\"]).apply(null,arguments)};var _HP_Constraint_SetAxisDamping=Module[\"_HP_Constraint_SetAxisDamping\"]=function(){return(_HP_Constraint_SetAxisDamping=Module[\"_HP_Constraint_SetAxisDamping\"]=Module[\"asm\"][\"HP_Constraint_SetAxisDamping\"]).apply(null,arguments)};var _HP_World_Create=Module[\"_HP_World_Create\"]=function(){return(_HP_World_Create=Module[\"_HP_World_Create\"]=Module[\"asm\"][\"HP_World_Create\"]).apply(null,arguments)};var _HP_World_Release=Module[\"_HP_World_Release\"]=function(){return(_HP_World_Release=Module[\"_HP_World_Release\"]=Module[\"asm\"][\"HP_World_Release\"]).apply(null,arguments)};var _HP_World_GetBodyBuffer=Module[\"_HP_World_GetBodyBuffer\"]=function(){return(_HP_World_GetBodyBuffer=Module[\"_HP_World_GetBodyBuffer\"]=Module[\"asm\"][\"HP_World_GetBodyBuffer\"]).apply(null,arguments)};var _HP_World_SetGravity=Module[\"_HP_World_SetGravity\"]=function(){return(_HP_World_SetGravity=Module[\"_HP_World_SetGravity\"]=Module[\"asm\"][\"HP_World_SetGravity\"]).apply(null,arguments)};var _HP_World_GetGravity=Module[\"_HP_World_GetGravity\"]=function(){return(_HP_World_GetGravity=Module[\"_HP_World_GetGravity\"]=Module[\"asm\"][\"HP_World_GetGravity\"]).apply(null,arguments)};var _HP_World_AddBody=Module[\"_HP_World_AddBody\"]=function(){return(_HP_World_AddBody=Module[\"_HP_World_AddBody\"]=Module[\"asm\"][\"HP_World_AddBody\"]).apply(null,arguments)};var _HP_World_RemoveBody=Module[\"_HP_World_RemoveBody\"]=function(){return(_HP_World_RemoveBody=Module[\"_HP_World_RemoveBody\"]=Module[\"asm\"][\"HP_World_RemoveBody\"]).apply(null,arguments)};var _HP_World_GetNumBodies=Module[\"_HP_World_GetNumBodies\"]=function(){return(_HP_World_GetNumBodies=Module[\"_HP_World_GetNumBodies\"]=Module[\"asm\"][\"HP_World_GetNumBodies\"]).apply(null,arguments)};var _HP_World_CastRayWithCollector=Module[\"_HP_World_CastRayWithCollector\"]=function(){return(_HP_World_CastRayWithCollector=Module[\"_HP_World_CastRayWithCollector\"]=Module[\"asm\"][\"HP_World_CastRayWithCollector\"]).apply(null,arguments)};var _HP_World_Step=Module[\"_HP_World_Step\"]=function(){return(_HP_World_Step=Module[\"_HP_World_Step\"]=Module[\"asm\"][\"HP_World_Step\"]).apply(null,arguments)};var _HP_World_SetIdealStepTime=Module[\"_HP_World_SetIdealStepTime\"]=function(){return(_HP_World_SetIdealStepTime=Module[\"_HP_World_SetIdealStepTime\"]=Module[\"asm\"][\"HP_World_SetIdealStepTime\"]).apply(null,arguments)};var _HP_World_GetNextCollisionEvent=Module[\"_HP_World_GetNextCollisionEvent\"]=function(){return(_HP_World_GetNextCollisionEvent=Module[\"_HP_World_GetNextCollisionEvent\"]=Module[\"asm\"][\"HP_World_GetNextCollisionEvent\"]).apply(null,arguments)};var _HP_World_GetNextTriggerEvent=Module[\"_HP_World_GetNextTriggerEvent\"]=function(){return(_HP_World_GetNextTriggerEvent=Module[\"_HP_World_GetNextTriggerEvent\"]=Module[\"asm\"][\"HP_World_GetNextTriggerEvent\"]).apply(null,arguments)};var _HP_QueryCollector_Create=Module[\"_HP_QueryCollector_Create\"]=function(){return(_HP_QueryCollector_Create=Module[\"_HP_QueryCollector_Create\"]=Module[\"asm\"][\"HP_QueryCollector_Create\"]).apply(null,arguments)};var _HP_QueryCollector_Release=Module[\"_HP_QueryCollector_Release\"]=function(){return(_HP_QueryCollector_Release=Module[\"_HP_QueryCollector_Release\"]=Module[\"asm\"][\"HP_QueryCollector_Release\"]).apply(null,arguments)};var _HP_QueryCollector_GetNumHits=Module[\"_HP_QueryCollector_GetNumHits\"]=function(){return(_HP_QueryCollector_GetNumHits=Module[\"_HP_QueryCollector_GetNumHits\"]=Module[\"asm\"][\"HP_QueryCollector_GetNumHits\"]).apply(null,arguments)};var _HP_QueryCollector_GetCastRayResult=Module[\"_HP_QueryCollector_GetCastRayResult\"]=function(){return(_HP_QueryCollector_GetCastRayResult=Module[\"_HP_QueryCollector_GetCastRayResult\"]=Module[\"asm\"][\"HP_QueryCollector_GetCastRayResult\"]).apply(null,arguments)};var _main=Module[\"_main\"]=function(){return(_main=Module[\"_main\"]=Module[\"asm\"][\"main\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"malloc\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"free\"]).apply(null,arguments)};var _HP_Debug_StartRecordingStats=Module[\"_HP_Debug_StartRecordingStats\"]=function(){return(_HP_Debug_StartRecordingStats=Module[\"_HP_Debug_StartRecordingStats\"]=Module[\"asm\"][\"HP_Debug_StartRecordingStats\"]).apply(null,arguments)};var _HP_Debug_StopRecordingStats=Module[\"_HP_Debug_StopRecordingStats\"]=function(){return(_HP_Debug_StopRecordingStats=Module[\"_HP_Debug_StopRecordingStats\"]=Module[\"asm\"][\"HP_Debug_StopRecordingStats\"]).apply(null,arguments)};var ___errno_location=Module[\"___errno_location\"]=function(){return(___errno_location=Module[\"___errno_location\"]=Module[\"asm\"][\"__errno_location\"]).apply(null,arguments)};var _htons=Module[\"_htons\"]=function(){return(_htons=Module[\"_htons\"]=Module[\"asm\"][\"htons\"]).apply(null,arguments)};var _ntohs=Module[\"_ntohs\"]=function(){return(_ntohs=Module[\"_ntohs\"]=Module[\"asm\"][\"ntohs\"]).apply(null,arguments)};var ___getTypeName=Module[\"___getTypeName\"]=function(){return(___getTypeName=Module[\"___getTypeName\"]=Module[\"asm\"][\"__getTypeName\"]).apply(null,arguments)};var __embind_initialize_bindings=Module[\"__embind_initialize_bindings\"]=function(){return(__embind_initialize_bindings=Module[\"__embind_initialize_bindings\"]=Module[\"asm\"][\"_embind_initialize_bindings\"]).apply(null,arguments)};var _htonl=Module[\"_htonl\"]=function(){return(_htonl=Module[\"_htonl\"]=Module[\"asm\"][\"htonl\"]).apply(null,arguments)};var _setThrew=Module[\"_setThrew\"]=function(){return(_setThrew=Module[\"_setThrew\"]=Module[\"asm\"][\"setThrew\"]).apply(null,arguments)};var _saveSetjmp=Module[\"_saveSetjmp\"]=function(){return(_saveSetjmp=Module[\"_saveSetjmp\"]=Module[\"asm\"][\"saveSetjmp\"]).apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return(stackSave=Module[\"stackSave\"]=Module[\"asm\"][\"stackSave\"]).apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return(stackRestore=Module[\"stackRestore\"]=Module[\"asm\"][\"stackRestore\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"stackAlloc\"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function callMain(args){var entryFunction=Module[\"_main\"];var argc=0;var argv=0;try{var ret=entryFunction(argc,argv);exitJS(ret,true);return ret}catch(e){return handleException(e)}}function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();if(shouldRunNow)callMain(args);postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}var shouldRunNow=true;if(Module[\"noInitialRun\"])shouldRunNow=false;run();\r\n\r\n\r\n  return HavokPhysics.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = HavokPhysics;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return HavokPhysics; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"HavokPhysics\"] = HavokPhysics;\r\nelse\r\n    globalThis[\"HavokPhysics\"] = HavokPhysics;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","HavokPhysics","_scriptDir","document","currentScript","src","undefined","locateFile","path","Module","scriptDirectory","UTF8ArrayToString","heapOrArray","idx","maxBytesToRead","endIdx","endPtr","buffer","UTF8Decoder","decode","subarray","str","u0","u1","String","fromCharCode","u2","ch","updateGlobalBufferAndViews","buf","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","Uint8Array","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","HEAP64","BigInt64Array","HEAPU64","BigUint64Array","abort","what","err","ABORT","e","WebAssembly","RuntimeError","readyPromiseReject","getBinary","file","wasmBinaryFile","wasmBinary","readBinary","getBinaryPromise","fetch","Promise","resolve","then","credentials","response","catch","ExitStatus","status","name","message","callRuntimeCallbacks","callbacks","length","shift","runDestructors","destructors","ptr","pop","del","simpleReadValueFromPointer","pointer","makeLegalFunctionName","replace","f","charCodeAt","char_0","char_9","createNamedFunction","body","Function","extendError","baseErrorType","errorName","errorClass","stack","Error","toString","prototype","Object","create","constructor","errorClass.prototype.toString","whenDependentTypesAreResolved","myTypes","dependentTypes","getTypeConverters","onComplete","typeConverters","myTypeConverters","InternalError","i","registerType","forEach","type","typeDependencies","Array","unregisteredTypes","registered","dt","registeredTypes","hasOwnProperty","push","awaitingDependencies","embindRepr","v","t","readLatin1String","ret","c","embind_charCodes","throwBindingError","BindingError","rawType","registeredInstance","options","TypeError","ignoreDuplicateRegistrations","cb","integerReadValueFromPointer","signed","readS8FromPointer","readU8FromPointer","readS16FromPointer","readU16FromPointer","readS32FromPointer","readU32FromPointer","readS64FromPointer","readU64FromPointer","getShiftFromSize","size","__emval_decref","handle","emval_handle_array","refcount","emval_free_list","ensureOverloadTable","proto","methodName","humanName","overloadTable","prevFunc","arguments","apply","argCount","exposePublicSymbol","value","numArguments","enumReadValueFromPointer","heap","getTypeName","___getTypeName","rv","_free","requireRegisteredType","impl","floatReadValueFromPointer","new_","argumentList","dummy","obj","r","heap32VectorToArray","count","firstElement","array","embind__requireFunction","signature","rawFunction","func","wasmTableMirror","wasmTable","get","fp","throwUnboundTypeError","types","visit","seen","unboundTypes","UnboundTypeError","map","join","UTF16ToString","maxIdx","UTF16Decoder","codeUnit","stringToUTF16","outPtr","maxBytesToWrite","startPtr","numCharsToWrite","lengthBytesUTF16","UTF32ToString","utf32","stringToUTF32","trailSurrogate","lengthBytesUTF32","len","emval_addMethodCaller","caller","id","emval_methodCallers","emval_lookupTypes","argTypes","a","POINTER_SIZE","run","args","doRun","calledRun","__ATINIT__","__ATMAIN__","readyPromiseResolve","shouldRunNow","entryFunction","argc","argv","noExitRuntime","quit_","__ATPOSTRUN__","unshift","runDependencies","__ATPRERUN__","setTimeout","reject","moduleOverrides","assign","toThrow","indexOf","substr","lastIndexOf","out","console","log","bind","warn","wasmMemory","TextDecoder","runDependencyWatcher","dependenciesFulfilled","startsWith","dataURIPrefix","tupleRegistrations","Emval","toValue","toHandle","emval_symbols","emval_registeredMethods","printCharBuffers","embind_init_charCodes","codes","count_emval_handles","get_first_emval","asmLibraryArg","__embind_finalize_value_array","rawTupleType","reg","elements","elementsLength","elementTypes","elt","getterReturnType","concat","setterArgumentType","rawConstructor","rawDestructor","getter","getterContext","setter","setterContext","read","elt.read","write","o","elt.write","fromWireType","toWireType","destructorFunction","__embind_register_bigint","primitiveType","minRange","maxRange","isUnsignedType","__embind_register_bool","trueValue","falseValue","wt","readValueFromPointer","__embind_register_emval","__embind_register_enum","isSigned","ctor","values","__embind_register_enum_value","rawEnumType","enumValue","enumType","Enum","Value","__embind_register_float","__embind_register_function","rawArgTypesAddr","rawInvoker","fn","invokerArgsArray","slice","isClassMethodFunc","needsDestructorStack","returns","argsList","argsListWired","invokerFnBody","dtorStack","args1","args2","cppInvokerFunc","paramName","invokerFunction","__embind_register_integer","bitshift","includes","__embind_register_memory_view","dataTypeIndex","decodeMemoryView","TA","data","typeMapping","__embind_register_std_string","stdStringIsUTF8","payload","decodeStartPtr","currentBytePtr","maxRead","stringSegment","ArrayBuffer","valueIsOfTypeString","Uint8ClampedArray","base","_malloc","outIdx","u","charCode","__embind_register_std_wstring","charSize","decodeString","encodeString","lengthBytesUTF","getHeap","HEAP","__embind_register_value_array","constructorSignature","destructorSignature","__embind_register_value_array_element","getterSignature","setterSignature","__embind_register_void","isVoid","__emscripten_get_now_is_monotonic","nowIsMonotonic","__emval_call_void_method","symbol","__emval_get_method_caller","retType","signatureName","returnId","params","functionBody","functionName","offset","_abort","_emscripten_date_now","Date","now","_emscripten_get_heap_max","_emscripten_get_now","performance","_emscripten_memcpy_big","dest","num","copyWithin","_emscripten_resize_heap","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","Math","min","max","newSize","x","multiple","grow","byteLength","replacement","_fd_write","fd","iov","iovcnt","pnum","j","curr","createWasm","receiveInstance","instance","clearInterval","callback","receiveInstantiationResult","result","instantiateArrayBuffer","receiver","binary","instantiate","info","reason","instantiateAsync","instantiateStreaming","runCaller","ready","define","globalThis"]
}
