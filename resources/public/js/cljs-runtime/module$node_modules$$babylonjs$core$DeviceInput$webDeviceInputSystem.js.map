{
"version":3,
"file":"module$node_modules$$babylonjs$core$DeviceInput$webDeviceInputSystem.js",
"lineCount":36,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/DeviceInput/webDeviceInputSystem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$DeviceInput$webDeviceInputSystem\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebDeviceInputSystem = void 0;\n\nvar _domManagement = require(\"../Misc/domManagement.js\");\n\nvar _tools = require(\"../Misc/tools.js\");\n\nvar _eventFactory = require(\"./eventFactory.js\");\n\nvar _deviceEnums = require(\"./InputDevices/deviceEnums.js\");\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst MAX_KEYCODES = 255; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nconst MAX_POINTER_INPUTS = Object.keys(_deviceEnums.PointerInput).length / 2;\n/** @internal */\n\nclass WebDeviceInputSystem {\n  constructor(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged) {\n    // Private Members\n    this._inputs = [];\n    this._keyboardActive = false;\n    this._pointerActive = false;\n    this._usingSafari = _tools.Tools.IsSafari(); // Found solution for determining if MacOS is being used here:\n    // https://stackoverflow.com/questions/10527983/best-way-to-detect-mac-os-x-or-windows-computers-with-javascript-or-jquery\n\n    this._usingMacOS = (0, _domManagement.IsNavigatorAvailable)() && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    this._keyboardDownEvent = evt => {}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this._keyboardUpEvent = evt => {}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this._keyboardBlurEvent = evt => {}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this._pointerMoveEvent = evt => {}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this._pointerDownEvent = evt => {}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this._pointerUpEvent = evt => {}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this._pointerCancelEvent = evt => {}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this._pointerWheelEvent = evt => {}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this._pointerBlurEvent = evt => {};\n\n    this._eventsAttached = false;\n    this._mouseId = -1;\n    this._isUsingFirefox = _domManagement.DomManagement.IsNavigatorAvailable() && navigator.userAgent && navigator.userAgent.indexOf(\"Firefox\") !== -1;\n    this._maxTouchPoints = 0;\n    this._pointerInputClearObserver = null; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    this._gamepadConnectedEvent = evt => {}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this._gamepadDisconnectedEvent = evt => {};\n\n    this._eventPrefix = _tools.Tools.GetPointerPrefix(engine);\n    this._engine = engine;\n    this._onDeviceConnected = onDeviceConnected;\n    this._onDeviceDisconnected = onDeviceDisconnected;\n    this._onInputChanged = onInputChanged; // If we need a pointerId, set one for future use\n\n    this._mouseId = this._isUsingFirefox ? 0 : 1;\n\n    this._enableEvents();\n\n    if (this._usingMacOS) {\n      this._metaKeys = [];\n    } // Set callback to enable event handler switching when inputElement changes\n\n\n    if (!this._engine._onEngineViewChanged) {\n      this._engine._onEngineViewChanged = () => {\n        this._enableEvents();\n      };\n    }\n  } // Public functions\n\n  /**\n   * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\n   * @param deviceType Enum specifying device type\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @returns Current value of input\n   */\n\n\n  pollInput(deviceType, deviceSlot, inputIndex) {\n    const device = this._inputs[deviceType][deviceSlot];\n\n    if (!device) {\n      throw `Unable to find device ${_deviceEnums.DeviceType[deviceType]}`;\n    }\n\n    if (deviceType >= _deviceEnums.DeviceType.DualShock && deviceType <= _deviceEnums.DeviceType.DualSense) {\n      this._updateDevice(deviceType, deviceSlot, inputIndex);\n    }\n\n    const currentValue = device[inputIndex];\n\n    if (currentValue === undefined) {\n      throw `Unable to find input ${inputIndex} for device ${_deviceEnums.DeviceType[deviceType]} in slot ${deviceSlot}`;\n    }\n\n    if (inputIndex === _deviceEnums.PointerInput.Move) {\n      _tools.Tools.Warn(`Unable to provide information for PointerInput.Move.  Try using PointerInput.Horizontal or PointerInput.Vertical for move data.`);\n    }\n\n    return currentValue;\n  }\n  /**\n   * Check for a specific device in the DeviceInputSystem\n   * @param deviceType Type of device to check for\n   * @returns bool with status of device's existence\n   */\n\n\n  isDeviceAvailable(deviceType) {\n    return this._inputs[deviceType] !== undefined;\n  }\n  /**\n   * Dispose of all the eventlisteners\n   */\n\n\n  dispose() {\n    // Callbacks\n    this._onDeviceConnected = () => {};\n\n    this._onDeviceDisconnected = () => {};\n\n    this._onInputChanged = () => {};\n\n    delete this._engine._onEngineViewChanged;\n\n    if (this._elementToAttachTo) {\n      this._disableEvents();\n    }\n  }\n  /**\n   * Enable listening for user input events\n   */\n\n\n  _enableEvents() {\n    const inputElement = this === null || this === void 0 ? void 0 : this._engine.getInputElement();\n\n    if (inputElement && (!this._eventsAttached || this._elementToAttachTo !== inputElement)) {\n      // Remove events before adding to avoid double events or simultaneous events on multiple canvases\n      this._disableEvents(); // If the inputs array has already been created, zero it out to before setting up events\n\n\n      if (this._inputs) {\n        for (const inputs of this._inputs) {\n          if (inputs) {\n            for (const deviceSlotKey in inputs) {\n              const deviceSlot = +deviceSlotKey;\n              const device = inputs[deviceSlot];\n\n              if (device) {\n                for (let inputIndex = 0; inputIndex < device.length; inputIndex++) {\n                  device[inputIndex] = 0;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this._elementToAttachTo = inputElement; // Set tab index for the inputElement to the engine's canvasTabIndex, if and only if the element's tab index is -1\n\n      this._elementToAttachTo.tabIndex = this._elementToAttachTo.tabIndex !== -1 ? this._elementToAttachTo.tabIndex : this._engine.canvasTabIndex;\n\n      this._handleKeyActions();\n\n      this._handlePointerActions();\n\n      this._handleGamepadActions();\n\n      this._eventsAttached = true; // Check for devices that are already connected but aren't registered. Currently, only checks for gamepads and mouse\n\n      this._checkForConnectedDevices();\n    }\n  }\n  /**\n   * Disable listening for user input events\n   */\n\n\n  _disableEvents() {\n    if (this._elementToAttachTo) {\n      // Blur Events\n      this._elementToAttachTo.removeEventListener(\"blur\", this._keyboardBlurEvent);\n\n      this._elementToAttachTo.removeEventListener(\"blur\", this._pointerBlurEvent); // Keyboard Events\n\n\n      this._elementToAttachTo.removeEventListener(\"keydown\", this._keyboardDownEvent);\n\n      this._elementToAttachTo.removeEventListener(\"keyup\", this._keyboardUpEvent); // Pointer Events\n\n\n      this._elementToAttachTo.removeEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\n\n      this._elementToAttachTo.removeEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\n\n      this._elementToAttachTo.removeEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\n\n      this._elementToAttachTo.removeEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\n\n      this._elementToAttachTo.removeEventListener(this._wheelEventName, this._pointerWheelEvent); // Gamepad Events\n\n\n      window.removeEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\n      window.removeEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\n    }\n\n    if (this._pointerInputClearObserver) {\n      this._engine.onEndFrameObservable.remove(this._pointerInputClearObserver);\n    }\n\n    this._eventsAttached = false;\n  }\n  /**\n   * Checks for existing connections to devices and register them, if necessary\n   * Currently handles gamepads and mouse\n   */\n\n\n  _checkForConnectedDevices() {\n    if (navigator.getGamepads) {\n      const gamepads = navigator.getGamepads();\n\n      for (const gamepad of gamepads) {\n        if (gamepad) {\n          this._addGamePad(gamepad);\n        }\n      }\n    } // If the device in use has mouse capabilities, pre-register mouse\n\n\n    if (typeof matchMedia === \"function\" && matchMedia(\"(pointer:fine)\").matches) {\n      // This will provide a dummy value for the cursor position and is expected to be overridden when the first mouse event happens.\n      // There isn't any good way to get the current position outside of a pointer event so that's why this was done.\n      this._addPointerDevice(_deviceEnums.DeviceType.Mouse, 0, 0, 0);\n    }\n  } // Private functions\n\n  /**\n   * Add a gamepad to the DeviceInputSystem\n   * @param gamepad A single DOM Gamepad object\n   */\n\n\n  _addGamePad(gamepad) {\n    const deviceType = this._getGamepadDeviceType(gamepad.id);\n\n    const deviceSlot = gamepad.index;\n    this._gamepads = this._gamepads || new Array(gamepad.index + 1);\n\n    this._registerDevice(deviceType, deviceSlot, gamepad.buttons.length + gamepad.axes.length);\n\n    this._gamepads[deviceSlot] = deviceType;\n  }\n  /**\n   * Add pointer device to DeviceInputSystem\n   * @param deviceType Type of Pointer to add\n   * @param deviceSlot Pointer ID (0 for mouse, pointerId for Touch)\n   * @param currentX Current X at point of adding\n   * @param currentY Current Y at point of adding\n   */\n\n\n  _addPointerDevice(deviceType, deviceSlot, currentX, currentY) {\n    if (!this._pointerActive) {\n      this._pointerActive = true;\n    }\n\n    this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\n\n    const pointer = this._inputs[deviceType][deviceSlot];\n    /* initialize our pointer position immediately after registration */\n\n    pointer[0] = currentX;\n    pointer[1] = currentY;\n  }\n  /**\n   * Add device and inputs to device array\n   * @param deviceType Enum specifying device type\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param numberOfInputs Number of input entries to create for given device\n   */\n\n\n  _registerDevice(deviceType, deviceSlot, numberOfInputs) {\n    if (deviceSlot === undefined) {\n      throw `Unable to register device ${_deviceEnums.DeviceType[deviceType]} to undefined slot.`;\n    }\n\n    if (!this._inputs[deviceType]) {\n      this._inputs[deviceType] = {};\n    }\n\n    if (!this._inputs[deviceType][deviceSlot]) {\n      const device = new Array(numberOfInputs);\n      device.fill(0);\n      this._inputs[deviceType][deviceSlot] = device;\n\n      this._onDeviceConnected(deviceType, deviceSlot);\n    }\n  }\n  /**\n   * Given a specific device name, remove that device from the device map\n   * @param deviceType Enum specifying device type\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   */\n\n\n  _unregisterDevice(deviceType, deviceSlot) {\n    if (this._inputs[deviceType][deviceSlot]) {\n      delete this._inputs[deviceType][deviceSlot];\n\n      this._onDeviceDisconnected(deviceType, deviceSlot);\n    }\n  }\n  /**\n   * Handle all actions that come from keyboard interaction\n   */\n\n\n  _handleKeyActions() {\n    this._keyboardDownEvent = evt => {\n      if (!this._keyboardActive) {\n        this._keyboardActive = true;\n\n        this._registerDevice(_deviceEnums.DeviceType.Keyboard, 0, MAX_KEYCODES);\n      }\n\n      const kbKey = this._inputs[_deviceEnums.DeviceType.Keyboard][0];\n\n      if (kbKey) {\n        kbKey[evt.keyCode] = 1;\n        const deviceEvent = evt;\n        deviceEvent.inputIndex = evt.keyCode;\n\n        if (this._usingMacOS && evt.metaKey && evt.key !== \"Meta\") {\n          if (!this._metaKeys.includes(evt.keyCode)) {\n            this._metaKeys.push(evt.keyCode);\n          }\n        }\n\n        this._onInputChanged(_deviceEnums.DeviceType.Keyboard, 0, deviceEvent);\n      }\n    };\n\n    this._keyboardUpEvent = evt => {\n      if (!this._keyboardActive) {\n        this._keyboardActive = true;\n\n        this._registerDevice(_deviceEnums.DeviceType.Keyboard, 0, MAX_KEYCODES);\n      }\n\n      const kbKey = this._inputs[_deviceEnums.DeviceType.Keyboard][0];\n\n      if (kbKey) {\n        kbKey[evt.keyCode] = 0;\n        const deviceEvent = evt;\n        deviceEvent.inputIndex = evt.keyCode;\n\n        if (this._usingMacOS && evt.key === \"Meta\" && this._metaKeys.length > 0) {\n          for (const keyCode of this._metaKeys) {\n            const deviceEvent = _eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Keyboard, 0, keyCode, 0, this, this._elementToAttachTo);\n\n            kbKey[keyCode] = 0;\n\n            this._onInputChanged(_deviceEnums.DeviceType.Keyboard, 0, deviceEvent);\n          }\n\n          this._metaKeys.splice(0, this._metaKeys.length);\n        }\n\n        this._onInputChanged(_deviceEnums.DeviceType.Keyboard, 0, deviceEvent);\n      }\n    };\n\n    this._keyboardBlurEvent = () => {\n      if (this._keyboardActive) {\n        const kbKey = this._inputs[_deviceEnums.DeviceType.Keyboard][0];\n\n        for (let i = 0; i < kbKey.length; i++) {\n          if (kbKey[i] !== 0) {\n            kbKey[i] = 0;\n\n            const deviceEvent = _eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Keyboard, 0, i, 0, this, this._elementToAttachTo);\n\n            this._onInputChanged(_deviceEnums.DeviceType.Keyboard, 0, deviceEvent);\n          }\n        }\n\n        if (this._usingMacOS) {\n          this._metaKeys.splice(0, this._metaKeys.length);\n        }\n      }\n    };\n\n    this._elementToAttachTo.addEventListener(\"keydown\", this._keyboardDownEvent);\n\n    this._elementToAttachTo.addEventListener(\"keyup\", this._keyboardUpEvent);\n\n    this._elementToAttachTo.addEventListener(\"blur\", this._keyboardBlurEvent);\n  }\n  /**\n   * Handle all actions that come from pointer interaction\n   */\n\n\n  _handlePointerActions() {\n    // If maxTouchPoints is defined, use that value.  Otherwise, allow for a minimum for supported gestures like pinch\n    this._maxTouchPoints = _domManagement.DomManagement.IsNavigatorAvailable() && navigator.maxTouchPoints || 2;\n\n    if (!this._activeTouchIds) {\n      this._activeTouchIds = new Array(this._maxTouchPoints);\n    }\n\n    for (let i = 0; i < this._maxTouchPoints; i++) {\n      this._activeTouchIds[i] = -1;\n    }\n\n    this._pointerMoveEvent = evt => {\n      const deviceType = this._getPointerType(evt);\n\n      const deviceSlot = deviceType === _deviceEnums.DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\n\n      if (!this._inputs[deviceType]) {\n        this._inputs[deviceType] = {};\n      }\n\n      if (!this._inputs[deviceType][deviceSlot]) {\n        this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\n      }\n\n      const pointer = this._inputs[deviceType][deviceSlot];\n\n      if (pointer) {\n        const deviceEvent = evt;\n        deviceEvent.inputIndex = _deviceEnums.PointerInput.Move;\n        pointer[_deviceEnums.PointerInput.Horizontal] = evt.clientX;\n        pointer[_deviceEnums.PointerInput.Vertical] = evt.clientY;\n\n        if (evt.pointerId === undefined) {\n          evt.pointerId = this._mouseId;\n        }\n\n        this._onInputChanged(deviceType, deviceSlot, deviceEvent); // Lets Propagate the event for move with same position.\n\n\n        if (!this._usingSafari && evt.button !== -1) {\n          deviceEvent.inputIndex = evt.button + 2;\n          pointer[evt.button + 2] = pointer[evt.button + 2] ? 0 : 1; // Reverse state of button if evt.button has value\n\n          this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n        }\n      }\n    };\n\n    this._pointerDownEvent = evt => {\n      const deviceType = this._getPointerType(evt);\n\n      let deviceSlot = deviceType === _deviceEnums.DeviceType.Mouse ? 0 : evt.pointerId;\n\n      if (deviceType === _deviceEnums.DeviceType.Touch) {\n        const idx = this._activeTouchIds.indexOf(-1);\n\n        if (idx >= 0) {\n          deviceSlot = idx;\n          this._activeTouchIds[idx] = evt.pointerId;\n        } else {\n          // We can't find an open slot to store new pointer so just return (can only support max number of touches)\n          _tools.Tools.Warn(`Max number of touches exceeded.  Ignoring touches in excess of ${this._maxTouchPoints}`);\n\n          return;\n        }\n      }\n\n      if (!this._inputs[deviceType]) {\n        this._inputs[deviceType] = {};\n      }\n\n      if (!this._inputs[deviceType][deviceSlot]) {\n        this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\n      } else if (deviceType === _deviceEnums.DeviceType.Touch) {\n        this._onDeviceConnected(deviceType, deviceSlot);\n      }\n\n      const pointer = this._inputs[deviceType][deviceSlot];\n\n      if (pointer) {\n        const previousHorizontal = pointer[_deviceEnums.PointerInput.Horizontal];\n        const previousVertical = pointer[_deviceEnums.PointerInput.Vertical];\n\n        if (deviceType === _deviceEnums.DeviceType.Mouse) {\n          // Mouse; Set pointerId if undefined\n          if (evt.pointerId === undefined) {\n            evt.pointerId = this._mouseId;\n          }\n\n          if (!document.pointerLockElement) {\n            try {\n              this._elementToAttachTo.setPointerCapture(this._mouseId);\n            } catch (e) {// DO NOTHING\n            }\n          }\n        } else {\n          // Touch; Since touches are dynamically assigned, only set capture if we have an id\n          if (evt.pointerId && !document.pointerLockElement) {\n            try {\n              this._elementToAttachTo.setPointerCapture(evt.pointerId);\n            } catch (e) {// DO NOTHING\n            }\n          }\n        }\n\n        pointer[_deviceEnums.PointerInput.Horizontal] = evt.clientX;\n        pointer[_deviceEnums.PointerInput.Vertical] = evt.clientY;\n        pointer[evt.button + 2] = 1;\n        const deviceEvent = evt; // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\n        // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\n        // EG. ([X, Y, Left-click], Middle-click, etc...)\n\n        deviceEvent.inputIndex = evt.button + 2;\n\n        this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n\n        if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\n          deviceEvent.inputIndex = _deviceEnums.PointerInput.Move;\n\n          this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n        }\n      }\n    };\n\n    this._pointerUpEvent = evt => {\n      var _a, _b, _c, _d, _e;\n\n      const deviceType = this._getPointerType(evt);\n\n      const deviceSlot = deviceType === _deviceEnums.DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\n\n      if (deviceType === _deviceEnums.DeviceType.Touch) {\n        if (deviceSlot === -1) {\n          return;\n        } else {\n          this._activeTouchIds[deviceSlot] = -1;\n        }\n      }\n\n      const pointer = (_a = this._inputs[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot];\n\n      if (pointer && pointer[evt.button + 2] !== 0) {\n        const previousHorizontal = pointer[_deviceEnums.PointerInput.Horizontal];\n        const previousVertical = pointer[_deviceEnums.PointerInput.Vertical];\n        pointer[_deviceEnums.PointerInput.Horizontal] = evt.clientX;\n        pointer[_deviceEnums.PointerInput.Vertical] = evt.clientY;\n        pointer[evt.button + 2] = 0;\n        const deviceEvent = evt;\n\n        if (evt.pointerId === undefined) {\n          evt.pointerId = this._mouseId;\n        }\n\n        if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\n          deviceEvent.inputIndex = _deviceEnums.PointerInput.Move;\n\n          this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n        } // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\n        // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\n        // EG. ([X, Y, Left-click], Middle-click, etc...)\n\n\n        deviceEvent.inputIndex = evt.button + 2;\n\n        if (deviceType === _deviceEnums.DeviceType.Mouse && this._mouseId >= 0 && ((_c = (_b = this._elementToAttachTo).hasPointerCapture) === null || _c === void 0 ? void 0 : _c.call(_b, this._mouseId))) {\n          this._elementToAttachTo.releasePointerCapture(this._mouseId);\n        } else if (evt.pointerId && ((_e = (_d = this._elementToAttachTo).hasPointerCapture) === null || _e === void 0 ? void 0 : _e.call(_d, evt.pointerId))) {\n          this._elementToAttachTo.releasePointerCapture(evt.pointerId);\n        }\n\n        this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n\n        if (deviceType === _deviceEnums.DeviceType.Touch) {\n          this._onDeviceDisconnected(deviceType, deviceSlot);\n        }\n      }\n    };\n\n    this._pointerCancelEvent = evt => {\n      var _a, _b, _c, _d;\n\n      if (evt.pointerType === \"mouse\") {\n        const pointer = this._inputs[_deviceEnums.DeviceType.Mouse][0];\n\n        if (this._mouseId >= 0 && ((_b = (_a = this._elementToAttachTo).hasPointerCapture) === null || _b === void 0 ? void 0 : _b.call(_a, this._mouseId))) {\n          this._elementToAttachTo.releasePointerCapture(this._mouseId);\n        }\n\n        for (let inputIndex = _deviceEnums.PointerInput.LeftClick; inputIndex <= _deviceEnums.PointerInput.BrowserForward; inputIndex++) {\n          if (pointer[inputIndex] === 1) {\n            pointer[inputIndex] = 0;\n\n            const deviceEvent = _eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\n\n            this._onInputChanged(_deviceEnums.DeviceType.Mouse, 0, deviceEvent);\n          }\n        }\n      } else {\n        const deviceSlot = this._activeTouchIds.indexOf(evt.pointerId);\n\n        if ((_d = (_c = this._elementToAttachTo).hasPointerCapture) === null || _d === void 0 ? void 0 : _d.call(_c, evt.pointerId)) {\n          this._elementToAttachTo.releasePointerCapture(evt.pointerId);\n        }\n\n        this._inputs[_deviceEnums.DeviceType.Touch][deviceSlot][_deviceEnums.PointerInput.LeftClick] = 0;\n\n        const deviceEvent = _eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Touch, deviceSlot, _deviceEnums.PointerInput.LeftClick, 0, this, this._elementToAttachTo, evt.pointerId);\n\n        this._onInputChanged(_deviceEnums.DeviceType.Touch, deviceSlot, deviceEvent);\n\n        this._activeTouchIds[deviceSlot] = -1;\n\n        this._onDeviceDisconnected(_deviceEnums.DeviceType.Touch, deviceSlot);\n      }\n    }; // Set Wheel Event Name, code originally from scene.inputManager\n\n\n    this._wheelEventName = \"onwheel\" in document.createElement(\"div\") ? \"wheel\" // Modern browsers support \"wheel\"\n    : document.onmousewheel !== undefined ? \"mousewheel\" // Webkit and IE support at least \"mousewheel\"\n    : \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\n    // Code originally in scene.inputManager.ts\n    // Chrome reports warning in console if wheel listener doesn't set an explicit passive option.\n    // IE11 only supports captureEvent:boolean, not options:object, and it defaults to false.\n    // Feature detection technique copied from: https://github.com/github/eventlistener-polyfill (MIT license)\n\n    let passiveSupported = false;\n\n    const noop = function () {};\n\n    try {\n      const options = Object.defineProperty({}, \"passive\", {\n        get: function () {\n          passiveSupported = true;\n        }\n      });\n\n      this._elementToAttachTo.addEventListener(\"test\", noop, options);\n\n      this._elementToAttachTo.removeEventListener(\"test\", noop, options);\n    } catch (e) {\n      /* */\n    }\n\n    this._pointerBlurEvent = () => {\n      var _a, _b, _c, _d, _e; // Handle mouse buttons\n\n\n      if (this.isDeviceAvailable(_deviceEnums.DeviceType.Mouse)) {\n        const pointer = this._inputs[_deviceEnums.DeviceType.Mouse][0];\n\n        if (this._mouseId >= 0 && ((_b = (_a = this._elementToAttachTo).hasPointerCapture) === null || _b === void 0 ? void 0 : _b.call(_a, this._mouseId))) {\n          this._elementToAttachTo.releasePointerCapture(this._mouseId);\n        }\n\n        for (let inputIndex = _deviceEnums.PointerInput.LeftClick; inputIndex <= _deviceEnums.PointerInput.BrowserForward; inputIndex++) {\n          if (pointer[inputIndex] === 1) {\n            pointer[inputIndex] = 0;\n\n            const deviceEvent = _eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\n\n            this._onInputChanged(_deviceEnums.DeviceType.Mouse, 0, deviceEvent);\n          }\n        }\n      } // Handle Active Touches\n\n\n      if (this.isDeviceAvailable(_deviceEnums.DeviceType.Touch)) {\n        const pointer = this._inputs[_deviceEnums.DeviceType.Touch];\n\n        for (let deviceSlot = 0; deviceSlot < this._activeTouchIds.length; deviceSlot++) {\n          const pointerId = this._activeTouchIds[deviceSlot];\n\n          if ((_d = (_c = this._elementToAttachTo).hasPointerCapture) === null || _d === void 0 ? void 0 : _d.call(_c, pointerId)) {\n            this._elementToAttachTo.releasePointerCapture(pointerId);\n          }\n\n          if (pointerId !== -1 && ((_e = pointer[deviceSlot]) === null || _e === void 0 ? void 0 : _e[_deviceEnums.PointerInput.LeftClick]) === 1) {\n            pointer[deviceSlot][_deviceEnums.PointerInput.LeftClick] = 0;\n\n            const deviceEvent = _eventFactory.DeviceEventFactory.CreateDeviceEvent(_deviceEnums.DeviceType.Touch, deviceSlot, _deviceEnums.PointerInput.LeftClick, 0, this, this._elementToAttachTo, pointerId);\n\n            this._onInputChanged(_deviceEnums.DeviceType.Touch, deviceSlot, deviceEvent);\n\n            this._activeTouchIds[deviceSlot] = -1;\n\n            this._onDeviceDisconnected(_deviceEnums.DeviceType.Touch, deviceSlot);\n          }\n        }\n      }\n    };\n\n    this._pointerWheelEvent = evt => {\n      const deviceType = _deviceEnums.DeviceType.Mouse;\n      const deviceSlot = 0;\n\n      if (!this._inputs[deviceType]) {\n        this._inputs[deviceType] = [];\n      }\n\n      if (!this._inputs[deviceType][deviceSlot]) {\n        this._pointerActive = true;\n\n        this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\n      }\n\n      const pointer = this._inputs[deviceType][deviceSlot];\n\n      if (pointer) {\n        pointer[_deviceEnums.PointerInput.MouseWheelX] = evt.deltaX || 0;\n        pointer[_deviceEnums.PointerInput.MouseWheelY] = evt.deltaY || evt.wheelDelta || 0;\n        pointer[_deviceEnums.PointerInput.MouseWheelZ] = evt.deltaZ || 0;\n        const deviceEvent = evt; // By default, there is no pointerId for mouse wheel events so we'll add one here\n        // This logic was originally in the InputManager but was added here to make the\n        // InputManager more platform-agnostic\n\n        if (evt.pointerId === undefined) {\n          evt.pointerId = this._mouseId;\n        }\n\n        if (pointer[_deviceEnums.PointerInput.MouseWheelX] !== 0) {\n          deviceEvent.inputIndex = _deviceEnums.PointerInput.MouseWheelX;\n\n          this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n        }\n\n        if (pointer[_deviceEnums.PointerInput.MouseWheelY] !== 0) {\n          deviceEvent.inputIndex = _deviceEnums.PointerInput.MouseWheelY;\n\n          this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n        }\n\n        if (pointer[_deviceEnums.PointerInput.MouseWheelZ] !== 0) {\n          deviceEvent.inputIndex = _deviceEnums.PointerInput.MouseWheelZ;\n\n          this._onInputChanged(deviceType, deviceSlot, deviceEvent);\n        }\n      }\n    };\n\n    this._elementToAttachTo.addEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\n\n    this._elementToAttachTo.addEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\n\n    this._elementToAttachTo.addEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\n\n    this._elementToAttachTo.addEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\n\n    this._elementToAttachTo.addEventListener(\"blur\", this._pointerBlurEvent);\n\n    this._elementToAttachTo.addEventListener(this._wheelEventName, this._pointerWheelEvent, passiveSupported ? {\n      passive: false\n    } : false); // Since there's no up or down event for mouse wheel or delta x/y, clear mouse values at end of frame\n\n\n    this._pointerInputClearObserver = this._engine.onEndFrameObservable.add(() => {\n      if (this.isDeviceAvailable(_deviceEnums.DeviceType.Mouse)) {\n        const pointer = this._inputs[_deviceEnums.DeviceType.Mouse][0];\n        pointer[_deviceEnums.PointerInput.MouseWheelX] = 0;\n        pointer[_deviceEnums.PointerInput.MouseWheelY] = 0;\n        pointer[_deviceEnums.PointerInput.MouseWheelZ] = 0;\n      }\n    });\n  }\n  /**\n   * Handle all actions that come from gamepad interaction\n   */\n\n\n  _handleGamepadActions() {\n    this._gamepadConnectedEvent = evt => {\n      this._addGamePad(evt.gamepad);\n    };\n\n    this._gamepadDisconnectedEvent = evt => {\n      if (this._gamepads) {\n        const deviceType = this._getGamepadDeviceType(evt.gamepad.id);\n\n        const deviceSlot = evt.gamepad.index;\n\n        this._unregisterDevice(deviceType, deviceSlot);\n\n        delete this._gamepads[deviceSlot];\n      }\n    };\n\n    window.addEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\n    window.addEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\n  }\n  /**\n   * Update all non-event based devices with each frame\n   * @param deviceType Enum specifying device type\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   */\n\n\n  _updateDevice(deviceType, deviceSlot, inputIndex) {\n    // Gamepads\n    const gp = navigator.getGamepads()[deviceSlot];\n\n    if (gp && deviceType === this._gamepads[deviceSlot]) {\n      const device = this._inputs[deviceType][deviceSlot];\n\n      if (inputIndex >= gp.buttons.length) {\n        device[inputIndex] = gp.axes[inputIndex - gp.buttons.length].valueOf();\n      } else {\n        device[inputIndex] = gp.buttons[inputIndex].value;\n      }\n    }\n  }\n  /**\n   * Gets DeviceType from the device name\n   * @param deviceName Name of Device from DeviceInputSystem\n   * @returns DeviceType enum value\n   */\n\n\n  _getGamepadDeviceType(deviceName) {\n    if (deviceName.indexOf(\"054c\") !== -1) {\n      // DualShock 4 Gamepad\n      return deviceName.indexOf(\"0ce6\") !== -1 ? _deviceEnums.DeviceType.DualSense : _deviceEnums.DeviceType.DualShock;\n    } else if (deviceName.indexOf(\"Xbox One\") !== -1 || deviceName.search(\"Xbox 360\") !== -1 || deviceName.search(\"xinput\") !== -1) {\n      // Xbox Gamepad\n      return _deviceEnums.DeviceType.Xbox;\n    } else if (deviceName.indexOf(\"057e\") !== -1) {\n      // Switch Gamepad\n      return _deviceEnums.DeviceType.Switch;\n    }\n\n    return _deviceEnums.DeviceType.Generic;\n  }\n  /**\n   * Get DeviceType from a given pointer/mouse/touch event.\n   * @param evt PointerEvent to evaluate\n   * @returns DeviceType interpreted from event\n   */\n\n\n  _getPointerType(evt) {\n    let deviceType = _deviceEnums.DeviceType.Mouse;\n\n    if (evt.pointerType === \"touch\" || evt.pointerType === \"pen\" || evt.touches) {\n      deviceType = _deviceEnums.DeviceType.Touch;\n    }\n\n    return deviceType;\n  }\n\n}\n\nexports.WebDeviceInputSystem = WebDeviceInputSystem;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebDeviceInputSystem","_domManagement","_tools","_eventFactory","_deviceEnums","MAX_POINTER_INPUTS","keys","PointerInput","length","constructor","engine","onDeviceConnected","onDeviceDisconnected","onInputChanged","_inputs","_pointerActive","_keyboardActive","_usingSafari","Tools","IsSafari","_usingMacOS","IsNavigatorAvailable","test","navigator","platform","_keyboardDownEvent","evt","this._keyboardDownEvent","_keyboardUpEvent","this._keyboardUpEvent","_keyboardBlurEvent","this._keyboardBlurEvent","_pointerMoveEvent","this._pointerMoveEvent","_pointerDownEvent","this._pointerDownEvent","_pointerUpEvent","this._pointerUpEvent","_pointerCancelEvent","this._pointerCancelEvent","_pointerWheelEvent","this._pointerWheelEvent","_pointerBlurEvent","this._pointerBlurEvent","_eventsAttached","_mouseId","_isUsingFirefox","DomManagement","userAgent","indexOf","_maxTouchPoints","_pointerInputClearObserver","_gamepadConnectedEvent","this._gamepadConnectedEvent","_gamepadDisconnectedEvent","this._gamepadDisconnectedEvent","_eventPrefix","GetPointerPrefix","_engine","_onDeviceConnected","_onDeviceDisconnected","_onInputChanged","_enableEvents","_metaKeys","_onEngineViewChanged","this._engine._onEngineViewChanged","pollInput","deviceType","deviceSlot","inputIndex","device","DeviceType","DualShock","DualSense","_updateDevice","currentValue","undefined","Move","Warn","isDeviceAvailable","dispose","this._onDeviceConnected","this._onDeviceDisconnected","this._onInputChanged","_elementToAttachTo","_disableEvents","inputElement","getInputElement","inputs","deviceSlotKey","tabIndex","canvasTabIndex","_handleKeyActions","_handlePointerActions","_handleGamepadActions","_checkForConnectedDevices","removeEventListener","_wheelEventName","window","onEndFrameObservable","remove","getGamepads","gamepads","gamepad","_addGamePad","matchMedia","matches","_addPointerDevice","Mouse","_getGamepadDeviceType","id","index","_gamepads","Array","_registerDevice","buttons","axes","currentX","currentY","pointer","numberOfInputs","fill","_unregisterDevice","Keyboard","MAX_KEYCODES","kbKey","keyCode","metaKey","key","includes","push","deviceEvent","DeviceEventFactory","CreateDeviceEvent","splice","i","addEventListener","maxTouchPoints","_activeTouchIds","_getPointerType","pointerId","clientX","clientY","Horizontal","Vertical","button","Touch","idx","previousHorizontal","previousVertical","document","pointerLockElement","setPointerCapture","e","_a","_b","_c","_d","_e","hasPointerCapture","call","releasePointerCapture","pointerType","LeftClick","BrowserForward","createElement","onmousewheel","passiveSupported","noop","options","get","MouseWheelX","deltaX","MouseWheelY","deltaY","wheelDelta","MouseWheelZ","deltaZ","passive","add","gp","valueOf","deviceName","search","Xbox","Switch","Generic","touches"]
}
