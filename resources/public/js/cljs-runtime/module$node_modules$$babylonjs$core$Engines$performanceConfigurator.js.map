{
"version":3,
"file":"module$node_modules$$babylonjs$core$Engines$performanceConfigurator.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,mEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,uBAAR,CAAkC,IAAK,EAGvC,MAAMA,wBAAN,CAISC,yBAAkB,CAACC,SAAD,CAAY,CACnCF,uBAAwBG,CAAAA,0BAAxB,CAAqD,CAAA,CAErD,IAAID,SAAJ,EAAiB,CAACF,uBAAwBI,CAAAA,eAA1C,EACMJ,uBAAwBK,CAAAA,qBAD9B,CAEI,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBN,uBAAwBK,CAAAA,qBAAsBE,CAAAA,MAAlE,CAA0E,EAAED,CAA5E,CAA+E,CAC7E,MAAME;AAASR,uBAAwBK,CAAAA,qBAAxB,CAA8CC,CAA9C,CAAf,CACMG,OAASD,MAAOE,CAAAA,EACtBF,OAAOE,CAAAA,EAAP,CAAgBC,KAAJ,CAAU,EAAV,CAEZ,KAAK,IAAIC,EAAI,CAAb,CAAoB,EAApB,CAAgBA,CAAhB,CAAwB,EAAEA,CAA1B,CACEJ,MAAOE,CAAAA,EAAP,CAAUE,CAAV,CAAA,CAAeH,MAAA,CAAOG,CAAP,CAN4D,CAYnFZ,uBAAwBI,CAAAA,eAAxB,CAA0CF,SAC1CF,wBAAwBa,CAAAA,iBAAxB,CAA4Cb,uBAAwBI,CAAAA,eAAxB,CAA0CO,KAA1C,CAAkDG,YAC9Fd,wBAAwBK,CAAAA,qBAAxB,CAAgD,IAnBb,CAJvC,CA8BAT,OAAQI,CAAAA,uBAAR,CAAkCA,uBAClCA,wBAAwBI,CAAAA,eAAxB,CAA0C,CAAA,CAG1CJ,wBAAwBG,CAAAA,0BAAxB,CAAqD,CAAA,CAGrDH,wBAAwBa,CAAAA,iBAAxB;AAA4CC,YAG5Cd,wBAAwBK,CAAAA,qBAAxB,CAAgD,EAjDgF;",
"sources":["node_modules/@babylonjs/core/Engines/performanceConfigurator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Engines$performanceConfigurator\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PerformanceConfigurator = void 0;\n\n/** @internal */\nclass PerformanceConfigurator {\n  /**\n   * @internal\n   */\n  static SetMatrixPrecision(use64bits) {\n    PerformanceConfigurator.MatrixTrackPrecisionChange = false;\n\n    if (use64bits && !PerformanceConfigurator.MatrixUse64Bits) {\n      if (PerformanceConfigurator.MatrixTrackedMatrices) {\n        for (let m = 0; m < PerformanceConfigurator.MatrixTrackedMatrices.length; ++m) {\n          const matrix = PerformanceConfigurator.MatrixTrackedMatrices[m];\n          const values = matrix._m;\n          matrix._m = new Array(16);\n\n          for (let i = 0; i < 16; ++i) {\n            matrix._m[i] = values[i];\n          }\n        }\n      }\n    }\n\n    PerformanceConfigurator.MatrixUse64Bits = use64bits;\n    PerformanceConfigurator.MatrixCurrentType = PerformanceConfigurator.MatrixUse64Bits ? Array : Float32Array;\n    PerformanceConfigurator.MatrixTrackedMatrices = null; // reclaim some memory, as we don't need _TrackedMatrices anymore\n  }\n\n}\n/** @internal */\n\n\nexports.PerformanceConfigurator = PerformanceConfigurator;\nPerformanceConfigurator.MatrixUse64Bits = false;\n/** @internal */\n\nPerformanceConfigurator.MatrixTrackPrecisionChange = true;\n/** @internal */\n\nPerformanceConfigurator.MatrixCurrentType = Float32Array;\n/** @internal */\n\nPerformanceConfigurator.MatrixTrackedMatrices = [];\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","PerformanceConfigurator","SetMatrixPrecision","use64bits","MatrixTrackPrecisionChange","MatrixUse64Bits","MatrixTrackedMatrices","m","length","matrix","values","_m","Array","i","MatrixCurrentType","Float32Array"]
}
