shadow$provide.module$node_modules$$babylonjs$core$Misc$fileTools=function(global,require,module,exports){function DecodeBase64UrlToBinary(uri){return(0,_stringTools.DecodeBase64ToBinary)(uri.split(",")[1])}Object.defineProperty(exports,"__esModule",{value:!0});exports.DecodeBase64UrlToBinary=DecodeBase64UrlToBinary;exports._injectLTSFileTools=exports.FileTools=exports.DecodeBase64UrlToString=exports.TestBase64DataUrl=exports.IsBase64DataUrl=exports.IsFileURL=exports.RequestFile=exports.LoadFile=
exports.ReadFile=exports.LoadImage=exports.SetCorsBehavior=exports.FileToolsOptions=exports.ReadFileError=exports.RequestFileError=exports.LoadFileError=void 0;var _webRequest=require("module$node_modules$$babylonjs$core$Misc$webRequest"),_domManagement=require("module$node_modules$$babylonjs$core$Misc$domManagement"),_observable=require("module$node_modules$$babylonjs$core$Misc$observable"),_filesInputStore=require("module$node_modules$$babylonjs$core$Misc$filesInputStore"),_retryStrategy=require("module$node_modules$$babylonjs$core$Misc$retryStrategy"),
_error=require("module$node_modules$$babylonjs$core$Misc$error"),_stringTools=require("module$node_modules$$babylonjs$core$Misc$stringTools");global=require("module$node_modules$$babylonjs$core$Engines$Processors$shaderProcessor");module=require("module$node_modules$$babylonjs$core$Engines$thinEngine");var _engineStore=require("module$node_modules$$babylonjs$core$Engines$engineStore"),_logger=require("module$node_modules$$babylonjs$core$Misc$logger"),_timingTools=require("module$node_modules$$babylonjs$core$Misc$timingTools");
const Base64DataUrlRegEx=new RegExp(/^data:([^,]+\/[^,]+)?;base64,/i);class LoadFileError extends _error.RuntimeError{constructor(message,object){super(message,_error.ErrorCodes.LoadFileError);this.name="LoadFileError";_error.BaseError._setPrototypeOf(this,LoadFileError.prototype);object instanceof _webRequest.WebRequest?this.request=object:this.file=object}}exports.LoadFileError=LoadFileError;class RequestFileError extends _error.RuntimeError{constructor(message,request){super(message,_error.ErrorCodes.RequestFileError);
this.request=request;this.name="RequestFileError";_error.BaseError._setPrototypeOf(this,RequestFileError.prototype)}}exports.RequestFileError=RequestFileError;class ReadFileError extends _error.RuntimeError{constructor(message,file){super(message,_error.ErrorCodes.ReadFileError);this.file=file;this.name="ReadFileError";_error.BaseError._setPrototypeOf(this,ReadFileError.prototype)}}exports.ReadFileError=ReadFileError;const FileToolsOptions={DefaultRetryStrategy:_retryStrategy.RetryStrategy.ExponentialBackoff(),
BaseUrl:"",CorsBehavior:"anonymous",PreprocessUrl:url=>url};exports.FileToolsOptions=FileToolsOptions;const _CleanUrl=url=>url=url.replace(/#/gm,"%23"),SetCorsBehavior=(url,element)=>{if((!url||0!==url.indexOf("data:"))&&FileToolsOptions.CorsBehavior)if("string"===typeof FileToolsOptions.CorsBehavior||FileToolsOptions.CorsBehavior instanceof String)element.crossOrigin=FileToolsOptions.CorsBehavior;else if(url=FileToolsOptions.CorsBehavior(url))element.crossOrigin=url};exports.SetCorsBehavior=SetCorsBehavior;
require=(input,onLoad,onError,offlineProvider,mimeType="",imageBitmapOptions)=>{var _a;let url,usingObjectURL=!1;input instanceof ArrayBuffer||ArrayBuffer.isView(input)?"undefined"!==typeof Blob&&"undefined"!==typeof URL?(url=URL.createObjectURL(new Blob([input],{type:mimeType})),usingObjectURL=!0):url=`data:${mimeType};base64,`+(0,_stringTools.EncodeArrayBufferToBase64)(input):input instanceof Blob?(url=URL.createObjectURL(input),usingObjectURL=!0):(url=_CleanUrl(input),url=FileToolsOptions.PreprocessUrl(input));
const engine=_engineStore.EngineStore.LastCreatedEngine,onErrorHandler=exception=>{if(onError){const inputText=url||input.toString();onError(`Error while trying to load image: ${0===inputText.indexOf("http")||128>=inputText.length?inputText:inputText.slice(0,128)+"..."}`,exception)}};if("undefined"===typeof Image||null!==(_a=null===engine||void 0===engine?void 0:engine._features.forceBitmapOverHTMLImageElement)&&void 0!==_a&&_a)return LoadFile(url,data=>{engine.createImageBitmap(new Blob([data],{type:mimeType}),
Object.assign({premultiplyAlpha:"none"},imageBitmapOptions)).then(imgBmp=>{onLoad(imgBmp);usingObjectURL&&URL.revokeObjectURL(url)}).catch(reason=>{onError&&onError("Error while trying to load image: "+input,reason)})},void 0,offlineProvider||void 0,!0,(request,exception)=>{onErrorHandler(exception)}),null;const img=new Image;SetCorsBehavior(url,img);const handlersList=[],unloadHandlersList=()=>{handlersList.forEach(handler=>{handler.target.removeEventListener(handler.name,handler.handler)});handlersList.length=
0};handlersList.push({target:img,name:"load",handler:()=>{unloadHandlersList();onLoad(img);usingObjectURL&&img.src&&URL.revokeObjectURL(img.src)}});handlersList.push({target:img,name:"error",handler:err=>{unloadHandlersList();onErrorHandler(err);usingObjectURL&&img.src&&URL.revokeObjectURL(img.src)}});handlersList.push({target:document,name:"securitypolicyviolation",handler:err=>{err.blockedURI===img.src&&(unloadHandlersList(),err=Error(`CSP violation of policy ${err.effectiveDirective} ${err.blockedURI}. Current policy is ${err.originalPolicy}`),
_engineStore.EngineStore.UseFallbackTexture=!1,onErrorHandler(err),usingObjectURL&&img.src&&URL.revokeObjectURL(img.src),img.src="")}});(()=>{handlersList.forEach(handler=>{handler.target.addEventListener(handler.name,handler.handler)})})();const fromBlob="blob:"===url.substring(0,5),fromData="data:"===url.substring(0,5);_a=()=>{fromBlob||fromData?img.src=url:LoadFile(url,(data,_,contentType)=>{data=new Blob([data],{type:!mimeType&&contentType?contentType:mimeType});data=URL.createObjectURL(data);
usingObjectURL=!0;img.src=data},void 0,offlineProvider||void 0,!0,(request,exception)=>{onErrorHandler(exception)})};var loadFromOfflineSupport=()=>{offlineProvider&&offlineProvider.loadImage(url,img)};if(!fromBlob&&!fromData&&offlineProvider&&offlineProvider.enableTexturesOffline)offlineProvider.open(loadFromOfflineSupport,_a);else{if(-1!==url.indexOf("file:")&&(loadFromOfflineSupport=decodeURIComponent(url.substring(5).toLowerCase()),_filesInputStore.FilesInputStore.FilesToLoad[loadFromOfflineSupport]&&
"undefined"!==typeof URL)){try{let blobURL;try{blobURL=URL.createObjectURL(_filesInputStore.FilesInputStore.FilesToLoad[loadFromOfflineSupport])}catch(ex){blobURL=URL.createObjectURL(_filesInputStore.FilesInputStore.FilesToLoad[loadFromOfflineSupport])}img.src=blobURL;usingObjectURL=!0}catch(e){img.src=""}return img}_a()}return img};exports.LoadImage=require;const ReadFile=(file,onSuccess,onProgress,useArrayBuffer,onError)=>{const reader=new FileReader,fileRequest={onCompleteObservable:new _observable.Observable,
abort:()=>reader.abort()};reader.onloadend=()=>fileRequest.onCompleteObservable.notifyObservers(fileRequest);onError&&(reader.onerror=()=>{onError(new ReadFileError(`Unable to read ${file.name}`,file))});reader.onload=e=>{onSuccess(e.target.result)};onProgress&&(reader.onprogress=onProgress);useArrayBuffer?reader.readAsArrayBuffer(file):reader.readAsText(file);return fileRequest};exports.ReadFile=ReadFile;const LoadFile=(fileOrUrl,onSuccess,onProgress,offlineProvider,useArrayBuffer,onError,onOpened)=>
{if(fileOrUrl.name)return ReadFile(fileOrUrl,onSuccess,onProgress,useArrayBuffer,onError?error=>{onError(void 0,error)}:void 0);if(-1!==fileOrUrl.indexOf("file:")){var fileName=decodeURIComponent(fileOrUrl.substring(5).toLowerCase());0===fileName.indexOf("./")&&(fileName=fileName.substring(2));if(fileName=_filesInputStore.FilesInputStore.FilesToLoad[fileName])return ReadFile(fileName,onSuccess,onProgress,useArrayBuffer,onError?error=>onError(void 0,new LoadFileError(error.message,error.file)):void 0)}const {match,
type}=TestBase64DataUrl(fileOrUrl);if(match){const fileRequest={onCompleteObservable:new _observable.Observable,abort:()=>()=>{}};try{const data=useArrayBuffer?DecodeBase64UrlToBinary(fileOrUrl):DecodeBase64UrlToString(fileOrUrl);onSuccess(data,void 0,type)}catch(error){onError?onError(void 0,error):_logger.Logger.Error(error.message||"Failed to parse the Data URL")}_timingTools.TimingTools.SetImmediate(()=>{fileRequest.onCompleteObservable.notifyObservers(fileRequest)});return fileRequest}return RequestFile(fileOrUrl,
(data,request)=>{onSuccess(data,null===request||void 0===request?void 0:request.responseURL,null===request||void 0===request?void 0:request.getResponseHeader("content-type"))},onProgress,offlineProvider,useArrayBuffer,onError?error=>{onError(error.request,new LoadFileError(error.message,error.request))}:void 0,onOpened)};exports.LoadFile=LoadFile;const RequestFile=(url,onSuccess,onProgress,offlineProvider,useArrayBuffer,onError,onOpened)=>{url=_CleanUrl(url);url=FileToolsOptions.PreprocessUrl(url);
const loadUrl=FileToolsOptions.BaseUrl+url;let aborted=!1;const fileRequest={onCompleteObservable:new _observable.Observable,abort:()=>aborted=!0},requestFile=()=>{let request=new _webRequest.WebRequest,retryHandle=null,onReadyStateChange;const unbindEvents=()=>{request&&(onProgress&&request.removeEventListener("progress",onProgress),onReadyStateChange&&request.removeEventListener("readystatechange",onReadyStateChange),request.removeEventListener("loadend",onLoadEnd))};let onLoadEnd=()=>{unbindEvents();
fileRequest.onCompleteObservable.notifyObservers(fileRequest);fileRequest.onCompleteObservable.clear();onProgress=void 0;onLoadEnd=onReadyStateChange=null;onSuccess=onOpened=onError=void 0};fileRequest.abort=()=>{aborted=!0;onLoadEnd&&onLoadEnd();request&&request.readyState!==(XMLHttpRequest.DONE||4)&&request.abort();null!==retryHandle&&(clearTimeout(retryHandle),retryHandle=null);request=null};const handleError=error=>{error=error.message||"Unknown error";onError&&request?onError(new RequestFileError(error,
request)):_logger.Logger.Error(error)},retryLoop=retryIndex=>{if(request){request.open("GET",loadUrl);if(onOpened)try{onOpened(request)}catch(e){handleError(e);return}useArrayBuffer&&(request.responseType="arraybuffer");onProgress&&request.addEventListener("progress",onProgress);onLoadEnd&&request.addEventListener("loadend",onLoadEnd);onReadyStateChange=()=>{if(!aborted&&request&&request.readyState===(XMLHttpRequest.DONE||4))if(onReadyStateChange&&request.removeEventListener("readystatechange",onReadyStateChange),
200<=request.status&&300>request.status||0===request.status&&(!(0,_domManagement.IsWindowObjectExist)()||IsFileURL()))try{onSuccess&&onSuccess(useArrayBuffer?request.response:request.responseText,request)}catch(e){handleError(e)}else{var retryStrategy=FileToolsOptions.DefaultRetryStrategy;if(retryStrategy&&(retryStrategy=retryStrategy(loadUrl,request,retryIndex),-1!==retryStrategy)){unbindEvents();request=new _webRequest.WebRequest;retryHandle=setTimeout(()=>retryLoop(retryIndex+1),retryStrategy);
return}retryStrategy=new RequestFileError("Error status: "+request.status+" "+request.statusText+" - Unable to load "+loadUrl,request);onError&&onError(retryStrategy)}};request.addEventListener("readystatechange",onReadyStateChange);request.send()}};retryLoop(0)};if(offlineProvider&&offlineProvider.enableSceneOffline){const noOfflineSupport=request=>{request&&400<request.status?onError&&onError(request):requestFile()};offlineProvider.open(()=>{offlineProvider&&offlineProvider.loadFile(FileToolsOptions.BaseUrl+
url,data=>{!aborted&&onSuccess&&onSuccess(data);fileRequest.onCompleteObservable.notifyObservers(fileRequest)},onProgress?event=>{!aborted&&onProgress&&onProgress(event)}:void 0,noOfflineSupport,useArrayBuffer)},noOfflineSupport)}else requestFile();return fileRequest};exports.RequestFile=RequestFile;const IsFileURL=()=>"undefined"!==typeof location&&"file:"===location.protocol;exports.IsFileURL=IsFileURL;_retryStrategy=uri=>Base64DataUrlRegEx.test(uri);exports.IsBase64DataUrl=_retryStrategy;const TestBase64DataUrl=
uri=>{uri=Base64DataUrlRegEx.exec(uri);return null===uri||0===uri.length?{match:!1,type:""}:{match:!0,type:uri[0].replace("data:","").replace("base64,","")}};exports.TestBase64DataUrl=TestBase64DataUrl;const DecodeBase64UrlToString=uri=>(0,_stringTools.DecodeBase64ToString)(uri.split(",")[1]);exports.DecodeBase64UrlToString=DecodeBase64UrlToString;module.ThinEngine._FileToolsLoadImage=require;module.ThinEngine._FileToolsLoadFile=LoadFile;global.ShaderProcessor._FileToolsLoadFile=LoadFile;let FileTools;
exports.FileTools=FileTools;global=(DecodeBase64UrlToBinary,DecodeBase64UrlToString,FileToolsOptions,IsBase64DataUrl,IsFileURL,LoadFile,LoadImage,ReadFile,RequestFile,SetCorsBehavior)=>{exports.FileTools=FileTools={DecodeBase64UrlToBinary,DecodeBase64UrlToString,DefaultRetryStrategy:FileToolsOptions.DefaultRetryStrategy,BaseUrl:FileToolsOptions.BaseUrl,CorsBehavior:FileToolsOptions.CorsBehavior,PreprocessUrl:FileToolsOptions.PreprocessUrl,IsBase64DataUrl,IsFileURL,LoadFile,LoadImage,ReadFile,RequestFile,
SetCorsBehavior};Object.defineProperty(FileTools,"DefaultRetryStrategy",{get:function(){return FileToolsOptions.DefaultRetryStrategy},set:function(value){FileToolsOptions.DefaultRetryStrategy=value}});Object.defineProperty(FileTools,"BaseUrl",{get:function(){return FileToolsOptions.BaseUrl},set:function(value){FileToolsOptions.BaseUrl=value}});Object.defineProperty(FileTools,"PreprocessUrl",{get:function(){return FileToolsOptions.PreprocessUrl},set:function(value){FileToolsOptions.PreprocessUrl=value}});
Object.defineProperty(FileTools,"CorsBehavior",{get:function(){return FileToolsOptions.CorsBehavior},set:function(value){FileToolsOptions.CorsBehavior=value}})};exports._injectLTSFileTools=global;global(DecodeBase64UrlToBinary,DecodeBase64UrlToString,FileToolsOptions,_retryStrategy,IsFileURL,LoadFile,require,ReadFile,RequestFile,SetCorsBehavior)}
//# sourceMappingURL=module$node_modules$$babylonjs$core$Misc$fileTools.js.map
