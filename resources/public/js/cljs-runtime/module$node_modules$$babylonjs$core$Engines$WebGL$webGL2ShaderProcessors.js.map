{
"version":3,
"file":"module$node_modules$$babylonjs$core$Engines$WebGL$webGL2ShaderProcessors.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,wEAAA,CAA6F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,qBAAR,CAAgC,IAAK,EAErC,KAAIC,gBAAkBP,OAAA,CAAQ,8DAAR,CAEtB,OAAMQ,aAAe,0BAGrB,MAAMF,sBAAN,CACEG,WAAW,EAAG,CACZ,IAAKC,CAAAA,cAAL,CAAsBH,eAAgBI,CAAAA,cAAeC,CAAAA,IADzC,CAIdC,kBAAkB,CAACC,SAAD,CAAY,CAC5B,MAAOA,UAAUC,CAAAA,OAAV,CAAkB,WAAlB;AAA+B,IAA/B,CADqB,CAI9BC,YAAY,CAACC,OAAD,CAAUC,WAAV,CAAuB,CACjC,MAAOV,aAAaW,CAAAA,IAAb,CAAkBF,OAAlB,CAD0B,CAInCG,gBAAgB,CAACH,OAAD,CAAUI,UAAV,CAAsB,CACpC,MAAOJ,QAAQF,CAAAA,OAAR,CAAgB,SAAhB,CAA2BM,UAAA,CAAa,IAAb,CAAoB,KAA/C,CAD6B,CAItCC,aAAa,CAACC,IAAD,CAAOC,OAAP,CAAgBH,UAAhB,CAA4B,CACvC,MAAMI,wBAAsF,CAAC,CAAvFA,GAA0BF,IAAKG,CAAAA,MAAL,CAAY,0CAAZ,CAGhCH,KAAA,CAAOA,IAAKR,CAAAA,OAAL,CADOY,gJACP,CAAoB,EAApB,CAEPJ,KAAA,CAAOA,IAAKR,CAAAA,OAAL,CAAa,iBAAb,CAAgC,UAAhC,CAEP;GAAIM,UAAJ,CACEE,IAMA,CANOA,IAAKR,CAAAA,OAAL,CAAa,uBAAb,CAAsC,aAAtC,CAMP,CALAQ,IAKA,CALOA,IAAKR,CAAAA,OAAL,CAAa,yBAAb,CAAwC,aAAxC,CAKP,CAJAQ,IAIA,CAJOA,IAAKR,CAAAA,OAAL,CAAa,mBAAb,CAAkC,UAAlC,CAIP,CAHAQ,IAGA,CAHOA,IAAKR,CAAAA,OAAL,CAAa,kBAAb,CAAiC,cAAjC,CAGP,CAFAQ,IAEA,CAFOA,IAAKR,CAAAA,OAAL,CAAa,eAAb,CAA8B,aAA9B,CAEP,CADAQ,IACA,CADOA,IAAKR,CAAAA,OAAL,CAAa,cAAb,CAA6B,YAA7B,CACP,CAAAQ,IAAA,CAAOA,IAAKR,CAAAA,OAAL,CAAa,oBAAb,EAAoCU,uBAAA,CAA0B,EAA1B,CAA+B,iDAAnE,EAAqH,YAArH,CAPT,KAWE,IAFuE,CAAC,CAExE,GAF8BD,OAAQI,CAAAA,OAAR,CAAgB,mBAAhB,CAE9B,CACE,MAAO,yEAAP;AAAgFL,IAIpF,OAAOA,KAxBgC,CAjB3C,CA8CArB,OAAQI,CAAAA,qBAAR,CAAgCA,qBA3DqG;",
"sources":["node_modules/@babylonjs/core/Engines/WebGL/webGL2ShaderProcessors.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Engines$WebGL$webGL2ShaderProcessors\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGL2ShaderProcessor = void 0;\n\nvar _shaderLanguage = require(\"../../Materials/shaderLanguage.js\");\n\nconst varyingRegex = /(flat\\s)?\\s*varying\\s*.*/;\n/** @internal */\n\nclass WebGL2ShaderProcessor {\n  constructor() {\n    this.shaderLanguage = _shaderLanguage.ShaderLanguage.GLSL;\n  }\n\n  attributeProcessor(attribute) {\n    return attribute.replace(\"attribute\", \"in\");\n  }\n\n  varyingCheck(varying, _isFragment) {\n    return varyingRegex.test(varying);\n  }\n\n  varyingProcessor(varying, isFragment) {\n    return varying.replace(\"varying\", isFragment ? \"in\" : \"out\");\n  }\n\n  postProcessor(code, defines, isFragment) {\n    const hasDrawBuffersExtension = code.search(/#extension.+GL_EXT_draw_buffers.+require/) !== -1; // Remove extensions\n\n    const regex = /#extension.+(GL_OVR_multiview2|GL_OES_standard_derivatives|GL_EXT_shader_texture_lod|GL_EXT_frag_depth|GL_EXT_draw_buffers).+(enable|require)/g;\n    code = code.replace(regex, \"\"); // Replace instructions\n\n    code = code.replace(/texture2D\\s*\\(/g, \"texture(\");\n\n    if (isFragment) {\n      code = code.replace(/texture2DLodEXT\\s*\\(/g, \"textureLod(\");\n      code = code.replace(/textureCubeLodEXT\\s*\\(/g, \"textureLod(\");\n      code = code.replace(/textureCube\\s*\\(/g, \"texture(\");\n      code = code.replace(/gl_FragDepthEXT/g, \"gl_FragDepth\");\n      code = code.replace(/gl_FragColor/g, \"glFragColor\");\n      code = code.replace(/gl_FragData/g, \"glFragData\");\n      code = code.replace(/void\\s+?main\\s*\\(/g, (hasDrawBuffersExtension ? \"\" : \"layout(location = 0) out vec4 glFragColor;\\n\") + \"void main(\");\n    } else {\n      const hasMultiviewExtension = defines.indexOf(\"#define MULTIVIEW\") !== -1;\n\n      if (hasMultiviewExtension) {\n        return \"#extension GL_OVR_multiview2 : require\\nlayout (num_views = 2) in;\\n\" + code;\n      }\n    }\n\n    return code;\n  }\n\n}\n\nexports.WebGL2ShaderProcessor = WebGL2ShaderProcessor;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebGL2ShaderProcessor","_shaderLanguage","varyingRegex","constructor","shaderLanguage","ShaderLanguage","GLSL","attributeProcessor","attribute","replace","varyingCheck","varying","_isFragment","test","varyingProcessor","isFragment","postProcessor","code","defines","hasDrawBuffersExtension","search","regex","indexOf"]
}
