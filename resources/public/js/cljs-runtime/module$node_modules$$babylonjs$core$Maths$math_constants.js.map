{
"version":3,
"file":"module$node_modules$$babylonjs$core$Maths$math_constants.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGrHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAAkBJ,OAAQK,CAAAA,GAA1B,CAA+E,IAAK,EAcpFL,QAAQM,CAAAA,YAAR,CAPqB,CAOrB,CAPyB,GAczBN,QAAQO,CAAAA,aAAR,CANsBA,GActBP,QAAQK,CAAAA,GAAR,EAPa,CAOb,CAPiBG,IAAKC,CAAAA,IAAL,CAAU,CAAV,CAOjB,EAPiC,CASjCT,QAAQI,CAAAA,OAAR,CADgBA,IApCqG;",
"sources":["node_modules/@babylonjs/core/Maths/math.constants.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Maths$math_constants\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Epsilon = exports.PHI = exports.ToLinearSpace = exports.ToGammaSpace = void 0;\n\n/**\n * Constant used to convert a value to gamma space\n * @ignorenaming\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst ToGammaSpace = 1 / 2.2;\n/**\n * Constant used to convert a value to linear space\n * @ignorenaming\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nexports.ToGammaSpace = ToGammaSpace;\nconst ToLinearSpace = 2.2;\n/**\n * Constant Golden Ratio value in Babylon.js\n * @ignorenaming\n */\n\nexports.ToLinearSpace = ToLinearSpace;\nconst PHI = (1 + Math.sqrt(5)) / 2;\n/**\n * Constant used to define the minimal number value in Babylon.js\n * @ignorenaming\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nexports.PHI = PHI;\nconst Epsilon = 0.001;\nexports.Epsilon = Epsilon;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Epsilon","PHI","ToGammaSpace","ToLinearSpace","Math","sqrt"]
}
