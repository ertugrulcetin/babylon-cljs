{
"version":3,
"file":"module$node_modules$$babylonjs$core$Rendering$renderingManager.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/@babylonjs/core/Rendering/renderingManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Rendering$renderingManager\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RenderingManager = exports.RenderingGroupInfo = void 0;\n\nvar _renderingGroup = require(\"./renderingGroup.js\");\n\n/**\n * This class is used by the onRenderingGroupObservable\n */\nclass RenderingGroupInfo {}\n/**\n * This is the manager responsible of all the rendering for meshes sprites and particles.\n * It is enable to manage the different groups as well as the different necessary sort functions.\n * This should not be used directly aside of the few static configurations\n */\n\n\nexports.RenderingGroupInfo = RenderingGroupInfo;\n\nclass RenderingManager {\n  /**\n   * Gets or sets a boolean indicating that the manager will not reset between frames.\n   * This means that if a mesh becomes invisible or transparent it will not be visible until this boolean is set to false again.\n   * By default, the rendering manager will dispatch all active meshes per frame (moving them to the transparent, opaque or alpha testing lists).\n   * By turning this property on, you will accelerate the rendering by keeping all these lists unchanged between frames.\n   */\n  get maintainStateBetweenFrames() {\n    return this._maintainStateBetweenFrames;\n  }\n\n  set maintainStateBetweenFrames(value) {\n    if (value === this._maintainStateBetweenFrames) {\n      return;\n    }\n\n    this._maintainStateBetweenFrames = value; // Restore wasDispatched flags when switching to maintainStateBetweenFrames to false\n\n    if (!this._maintainStateBetweenFrames) {\n      for (const mesh of this._scene.meshes) {\n        if (mesh.subMeshes) {\n          for (const subMesh of mesh.subMeshes) {\n            subMesh._wasDispatched = false;\n          }\n        }\n      }\n\n      if (this._scene.spriteManagers) {\n        for (const spriteManager of this._scene.spriteManagers) {\n          spriteManager._wasDispatched = false;\n        }\n      }\n\n      for (const particleSystem of this._scene.particleSystems) {\n        particleSystem._wasDispatched = false;\n      }\n    }\n  }\n  /**\n   * Instantiates a new rendering group for a particular scene\n   * @param scene Defines the scene the groups belongs to\n   */\n\n\n  constructor(scene) {\n    /**\n     * @internal\n     */\n    this._useSceneAutoClearSetup = false;\n    this._renderingGroups = new Array();\n    this._autoClearDepthStencil = {};\n    this._customOpaqueSortCompareFn = {};\n    this._customAlphaTestSortCompareFn = {};\n    this._customTransparentSortCompareFn = {};\n    this._renderingGroupInfo = new RenderingGroupInfo();\n    this._maintainStateBetweenFrames = false;\n    this._scene = scene;\n\n    for (let i = RenderingManager.MIN_RENDERINGGROUPS; i < RenderingManager.MAX_RENDERINGGROUPS; i++) {\n      this._autoClearDepthStencil[i] = {\n        autoClear: true,\n        depth: true,\n        stencil: true\n      };\n    }\n  }\n  /**\n   * Gets the rendering group with the specified id.\n   */\n\n\n  getRenderingGroup(id) {\n    const renderingGroupId = id || 0;\n\n    this._prepareRenderingGroup(renderingGroupId);\n\n    return this._renderingGroups[renderingGroupId];\n  }\n\n  _clearDepthStencilBuffer(depth = true, stencil = true) {\n    if (this._depthStencilBufferAlreadyCleaned) {\n      return;\n    }\n\n    this._scene.getEngine().clear(null, false, depth, stencil);\n\n    this._depthStencilBufferAlreadyCleaned = true;\n  }\n  /**\n   * Renders the entire managed groups. This is used by the scene or the different render targets.\n   * @internal\n   */\n\n\n  render(customRenderFunction, activeMeshes, renderParticles, renderSprites) {\n    // Update the observable context (not null as it only goes away on dispose)\n    const info = this._renderingGroupInfo;\n    info.scene = this._scene;\n    info.camera = this._scene.activeCamera; // Dispatch sprites\n\n    if (this._scene.spriteManagers && renderSprites) {\n      for (let index = 0; index < this._scene.spriteManagers.length; index++) {\n        const manager = this._scene.spriteManagers[index];\n        this.dispatchSprites(manager);\n      }\n    } // Render\n\n\n    for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\n      this._depthStencilBufferAlreadyCleaned = index === RenderingManager.MIN_RENDERINGGROUPS;\n      const renderingGroup = this._renderingGroups[index];\n\n      if (!renderingGroup || renderingGroup._empty) {\n        continue;\n      }\n\n      const renderingGroupMask = Math.pow(2, index);\n      info.renderingGroupId = index; // Before Observable\n\n      this._scene.onBeforeRenderingGroupObservable.notifyObservers(info, renderingGroupMask); // Clear depth/stencil if needed\n\n\n      if (RenderingManager.AUTOCLEAR) {\n        const autoClear = this._useSceneAutoClearSetup ? this._scene.getAutoClearDepthStencilSetup(index) : this._autoClearDepthStencil[index];\n\n        if (autoClear && autoClear.autoClear) {\n          this._clearDepthStencilBuffer(autoClear.depth, autoClear.stencil);\n        }\n      } // Render\n\n\n      for (const step of this._scene._beforeRenderingGroupDrawStage) {\n        step.action(index);\n      }\n\n      renderingGroup.render(customRenderFunction, renderSprites, renderParticles, activeMeshes);\n\n      for (const step of this._scene._afterRenderingGroupDrawStage) {\n        step.action(index);\n      } // After Observable\n\n\n      this._scene.onAfterRenderingGroupObservable.notifyObservers(info, renderingGroupMask);\n    }\n  }\n  /**\n   * Resets the different information of the group to prepare a new frame\n   * @internal\n   */\n\n\n  reset() {\n    if (this.maintainStateBetweenFrames) {\n      return;\n    }\n\n    for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\n      const renderingGroup = this._renderingGroups[index];\n\n      if (renderingGroup) {\n        renderingGroup.prepare();\n      }\n    }\n  }\n  /**\n   * Resets the sprites information of the group to prepare a new frame\n   * @internal\n   */\n\n\n  resetSprites() {\n    if (this.maintainStateBetweenFrames) {\n      return;\n    }\n\n    for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\n      const renderingGroup = this._renderingGroups[index];\n\n      if (renderingGroup) {\n        renderingGroup.prepareSprites();\n      }\n    }\n  }\n  /**\n   * Dispose and release the group and its associated resources.\n   * @internal\n   */\n\n\n  dispose() {\n    this.freeRenderingGroups();\n    this._renderingGroups.length = 0;\n    this._renderingGroupInfo = null;\n  }\n  /**\n   * Clear the info related to rendering groups preventing retention points during dispose.\n   */\n\n\n  freeRenderingGroups() {\n    for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\n      const renderingGroup = this._renderingGroups[index];\n\n      if (renderingGroup) {\n        renderingGroup.dispose();\n      }\n    }\n  }\n\n  _prepareRenderingGroup(renderingGroupId) {\n    if (this._renderingGroups[renderingGroupId] === undefined) {\n      this._renderingGroups[renderingGroupId] = new _renderingGroup.RenderingGroup(renderingGroupId, this._scene, this._customOpaqueSortCompareFn[renderingGroupId], this._customAlphaTestSortCompareFn[renderingGroupId], this._customTransparentSortCompareFn[renderingGroupId]);\n    }\n  }\n  /**\n   * Add a sprite manager to the rendering manager in order to render it this frame.\n   * @param spriteManager Define the sprite manager to render\n   */\n\n\n  dispatchSprites(spriteManager) {\n    if (this.maintainStateBetweenFrames && spriteManager._wasDispatched) {\n      return;\n    }\n\n    spriteManager._wasDispatched = true;\n    this.getRenderingGroup(spriteManager.renderingGroupId).dispatchSprites(spriteManager);\n  }\n  /**\n   * Add a particle system to the rendering manager in order to render it this frame.\n   * @param particleSystem Define the particle system to render\n   */\n\n\n  dispatchParticles(particleSystem) {\n    if (this.maintainStateBetweenFrames && particleSystem._wasDispatched) {\n      return;\n    }\n\n    particleSystem._wasDispatched = true;\n    this.getRenderingGroup(particleSystem.renderingGroupId).dispatchParticles(particleSystem);\n  }\n  /**\n   * Add a submesh to the manager in order to render it this frame\n   * @param subMesh The submesh to dispatch\n   * @param mesh Optional reference to the submeshes's mesh. Provide if you have an exiting reference to improve performance.\n   * @param material Optional reference to the submeshes's material. Provide if you have an exiting reference to improve performance.\n   */\n\n\n  dispatch(subMesh, mesh, material) {\n    if (mesh === undefined) {\n      mesh = subMesh.getMesh();\n    }\n\n    if (this.maintainStateBetweenFrames && subMesh._wasDispatched) {\n      return;\n    }\n\n    subMesh._wasDispatched = true;\n    this.getRenderingGroup(mesh.renderingGroupId).dispatch(subMesh, mesh, material);\n  }\n  /**\n   * Overrides the default sort function applied in the rendering group to prepare the meshes.\n   * This allowed control for front to back rendering or reversely depending of the special needs.\n   *\n   * @param renderingGroupId The rendering group id corresponding to its index\n   * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\n   * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\n   * @param transparentSortCompareFn The transparent queue comparison function use to sort.\n   */\n\n\n  setRenderingOrder(renderingGroupId, opaqueSortCompareFn = null, alphaTestSortCompareFn = null, transparentSortCompareFn = null) {\n    this._customOpaqueSortCompareFn[renderingGroupId] = opaqueSortCompareFn;\n    this._customAlphaTestSortCompareFn[renderingGroupId] = alphaTestSortCompareFn;\n    this._customTransparentSortCompareFn[renderingGroupId] = transparentSortCompareFn;\n\n    if (this._renderingGroups[renderingGroupId]) {\n      const group = this._renderingGroups[renderingGroupId];\n      group.opaqueSortCompareFn = this._customOpaqueSortCompareFn[renderingGroupId];\n      group.alphaTestSortCompareFn = this._customAlphaTestSortCompareFn[renderingGroupId];\n      group.transparentSortCompareFn = this._customTransparentSortCompareFn[renderingGroupId];\n    }\n  }\n  /**\n   * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\n   *\n   * @param renderingGroupId The rendering group id corresponding to its index\n   * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\n   * @param depth Automatically clears depth between groups if true and autoClear is true.\n   * @param stencil Automatically clears stencil between groups if true and autoClear is true.\n   */\n\n\n  setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth = true, stencil = true) {\n    this._autoClearDepthStencil[renderingGroupId] = {\n      autoClear: autoClearDepthStencil,\n      depth: depth,\n      stencil: stencil\n    };\n  }\n  /**\n   * Gets the current auto clear configuration for one rendering group of the rendering\n   * manager.\n   * @param index the rendering group index to get the information for\n   * @returns The auto clear setup for the requested rendering group\n   */\n\n\n  getAutoClearDepthStencilSetup(index) {\n    return this._autoClearDepthStencil[index];\n  }\n\n}\n/**\n * The max id used for rendering groups (not included)\n */\n\n\nexports.RenderingManager = RenderingManager;\nRenderingManager.MAX_RENDERINGGROUPS = 4;\n/**\n * The min id used for rendering groups (included)\n */\n\nRenderingManager.MIN_RENDERINGGROUPS = 0;\n/**\n * Used to globally prevent autoclearing scenes.\n */\n\nRenderingManager.AUTOCLEAR = true;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","RenderingManager","RenderingGroupInfo","_renderingGroup","_maintainStateBetweenFrames","mesh","_scene","meshes","subMeshes","subMesh","_wasDispatched","spriteManagers","spriteManager","particleSystem","particleSystems","constructor","scene","_useSceneAutoClearSetup","_renderingGroups","_autoClearDepthStencil","_customOpaqueSortCompareFn","_customAlphaTestSortCompareFn","_customTransparentSortCompareFn","_renderingGroupInfo","i","MIN_RENDERINGGROUPS","MAX_RENDERINGGROUPS","autoClear","depth","stencil","getRenderingGroup","id","renderingGroupId","_prepareRenderingGroup","_clearDepthStencilBuffer","_depthStencilBufferAlreadyCleaned","getEngine","clear","render","customRenderFunction","activeMeshes","renderParticles","renderSprites","info","camera","activeCamera","index","length","dispatchSprites","manager","renderingGroup","_empty","renderingGroupMask","Math","pow","onBeforeRenderingGroupObservable","notifyObservers","AUTOCLEAR","getAutoClearDepthStencilSetup","step","_beforeRenderingGroupDrawStage","action","_afterRenderingGroupDrawStage","onAfterRenderingGroupObservable","reset","maintainStateBetweenFrames","prepare","resetSprites","prepareSprites","dispose","freeRenderingGroups","undefined","RenderingGroup","dispatchParticles","dispatch","material","getMesh","setRenderingOrder","opaqueSortCompareFn","alphaTestSortCompareFn","transparentSortCompareFn","group","setRenderingAutoClearDepthStencil","autoClearDepthStencil"]
}
