shadow$provide.module$node_modules$$babylonjs$core$scene=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Scene=exports.ScenePerformancePriority=void 0;var _tools=require("module$node_modules$$babylonjs$core$Misc$tools"),_precisionDate=require("module$node_modules$$babylonjs$core$Misc$precisionDate"),_observable=require("module$node_modules$$babylonjs$core$Misc$observable"),_smartArray=require("module$node_modules$$babylonjs$core$Misc$smartArray"),
_stringDictionary=require("module$node_modules$$babylonjs$core$Misc$stringDictionary"),_tags=require("module$node_modules$$babylonjs$core$Misc$tags"),_mathVector=require("module$node_modules$$babylonjs$core$Maths$math_vector");global=require("module$node_modules$$babylonjs$core$abstractScene");var _imageProcessingConfiguration=require("module$node_modules$$babylonjs$core$Materials$imageProcessingConfiguration"),_uniformBuffer=require("module$node_modules$$babylonjs$core$Materials$uniformBuffer"),
_pickingInfo=require("module$node_modules$$babylonjs$core$Collisions$pickingInfo"),_actionEvent=require("module$node_modules$$babylonjs$core$Actions$actionEvent"),_postProcessManager=require("module$node_modules$$babylonjs$core$PostProcesses$postProcessManager"),_renderingManager=require("module$node_modules$$babylonjs$core$Rendering$renderingManager"),_sceneComponent=require("module$node_modules$$babylonjs$core$sceneComponent"),_domManagement=require("module$node_modules$$babylonjs$core$Misc$domManagement"),
_engineStore=require("module$node_modules$$babylonjs$core$Engines$engineStore"),_devTools=require("module$node_modules$$babylonjs$core$Misc$devTools"),_sceneInputManager=require("module$node_modules$$babylonjs$core$Inputs$scene_inputManager"),_perfCounter=require("module$node_modules$$babylonjs$core$Misc$perfCounter"),_mathColor=require("module$node_modules$$babylonjs$core$Maths$math_color"),_mathFrustum=require("module$node_modules$$babylonjs$core$Maths$math_frustum"),_uniqueIdGenerator=require("module$node_modules$$babylonjs$core$Misc$uniqueIdGenerator"),
_fileTools=require("module$node_modules$$babylonjs$core$Misc$fileTools"),_lightConstants=require("module$node_modules$$babylonjs$core$Lights$lightConstants"),_arrayTools=require("module$node_modules$$babylonjs$core$Misc$arrayTools"),_pointerPickingConfiguration=require("module$node_modules$$babylonjs$core$Inputs$pointerPickingConfiguration"),ScenePerformancePriority;exports.ScenePerformancePriority=ScenePerformancePriority;(function(ScenePerformancePriority){ScenePerformancePriority[ScenePerformancePriority.BackwardCompatible=
0]="BackwardCompatible";ScenePerformancePriority[ScenePerformancePriority.Intermediate=1]="Intermediate";ScenePerformancePriority[ScenePerformancePriority.Aggressive=2]="Aggressive"})(ScenePerformancePriority||(exports.ScenePerformancePriority=ScenePerformancePriority={}));class Scene extends global.AbstractScene{static DefaultMaterialFactory(scene){throw(0,_devTools._WarnImport)("StandardMaterial");}static CollisionCoordinatorFactory(){throw(0,_devTools._WarnImport)("DefaultCollisionCoordinator");
}get environmentTexture(){return this._environmentTexture}set environmentTexture(value){this._environmentTexture!==value&&(this._environmentTexture=value,this.markAllMaterialsAsDirty(1))}get imageProcessingConfiguration(){return this._imageProcessingConfiguration}get performancePriority(){return this._performancePriority}set performancePriority(value){if(value!==this._performancePriority){this._performancePriority=value;switch(value){case ScenePerformancePriority.BackwardCompatible:this.skipFrustumClipping=
!1;this.skipPointerMovePicking=this._renderingManager.maintainStateBetweenFrames=!1;this.autoClear=!0;break;case ScenePerformancePriority.Intermediate:this.skipFrustumClipping=!1;this._renderingManager.maintainStateBetweenFrames=!1;this.skipPointerMovePicking=!0;this.autoClear=!1;break;case ScenePerformancePriority.Aggressive:this.skipFrustumClipping=!0,this.skipPointerMovePicking=this._renderingManager.maintainStateBetweenFrames=!0,this.autoClear=!1}this.onScenePerformancePriorityChangedObservable.notifyObservers(value)}}set forceWireframe(value){this._forceWireframe!==
value&&(this._forceWireframe=value,this.markAllMaterialsAsDirty(16))}get forceWireframe(){return this._forceWireframe}set skipFrustumClipping(value){this._skipFrustumClipping!==value&&(this._skipFrustumClipping=value)}get skipFrustumClipping(){return this._skipFrustumClipping}set forcePointsCloud(value){this._forcePointsCloud!==value&&(this._forcePointsCloud=value,this.markAllMaterialsAsDirty(16))}get forcePointsCloud(){return this._forcePointsCloud}get animationPropertiesOverride(){return this._animationPropertiesOverride}set animationPropertiesOverride(value){this._animationPropertiesOverride=
value}set onDispose(callback){this._onDisposeObserver&&this.onDisposeObservable.remove(this._onDisposeObserver);this._onDisposeObserver=this.onDisposeObservable.add(callback)}set beforeRender(callback){this._onBeforeRenderObserver&&this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);callback&&(this._onBeforeRenderObserver=this.onBeforeRenderObservable.add(callback))}set afterRender(callback){this._onAfterRenderObserver&&this.onAfterRenderObservable.remove(this._onAfterRenderObserver);
callback&&(this._onAfterRenderObserver=this.onAfterRenderObservable.add(callback))}set beforeCameraRender(callback){this._onBeforeCameraRenderObserver&&this.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);this._onBeforeCameraRenderObserver=this.onBeforeCameraRenderObservable.add(callback)}set afterCameraRender(callback){this._onAfterCameraRenderObserver&&this.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);this._onAfterCameraRenderObserver=this.onAfterCameraRenderObservable.add(callback)}get pointerDownPredicate(){return this._pointerPickingConfiguration.pointerDownPredicate}set pointerDownPredicate(value){this._pointerPickingConfiguration.pointerDownPredicate=
value}get pointerUpPredicate(){return this._pointerPickingConfiguration.pointerUpPredicate}set pointerUpPredicate(value){this._pointerPickingConfiguration.pointerUpPredicate=value}get pointerMovePredicate(){return this._pointerPickingConfiguration.pointerMovePredicate}set pointerMovePredicate(value){this._pointerPickingConfiguration.pointerMovePredicate=value}get pointerDownFastCheck(){return this._pointerPickingConfiguration.pointerDownFastCheck}set pointerDownFastCheck(value){this._pointerPickingConfiguration.pointerDownFastCheck=
value}get pointerUpFastCheck(){return this._pointerPickingConfiguration.pointerUpFastCheck}set pointerUpFastCheck(value){this._pointerPickingConfiguration.pointerUpFastCheck=value}get pointerMoveFastCheck(){return this._pointerPickingConfiguration.pointerMoveFastCheck}set pointerMoveFastCheck(value){this._pointerPickingConfiguration.pointerMoveFastCheck=value}get skipPointerMovePicking(){return this._pointerPickingConfiguration.skipPointerMovePicking}set skipPointerMovePicking(value){this._pointerPickingConfiguration.skipPointerMovePicking=
value}get skipPointerDownPicking(){return this._pointerPickingConfiguration.skipPointerDownPicking}set skipPointerDownPicking(value){this._pointerPickingConfiguration.skipPointerDownPicking=value}get skipPointerUpPicking(){return this._pointerPickingConfiguration.skipPointerUpPicking}set skipPointerUpPicking(value){this._pointerPickingConfiguration.skipPointerUpPicking=value}get unTranslatedPointer(){return this._inputManager.unTranslatedPointer}static get DragMovementThreshold(){return _sceneInputManager.InputManager.DragMovementThreshold}static set DragMovementThreshold(value){_sceneInputManager.InputManager.DragMovementThreshold=
value}static get LongPressDelay(){return _sceneInputManager.InputManager.LongPressDelay}static set LongPressDelay(value){_sceneInputManager.InputManager.LongPressDelay=value}static get DoubleClickDelay(){return _sceneInputManager.InputManager.DoubleClickDelay}static set DoubleClickDelay(value){_sceneInputManager.InputManager.DoubleClickDelay=value}static get ExclusiveDoubleClickMode(){return _sceneInputManager.InputManager.ExclusiveDoubleClickMode}static set ExclusiveDoubleClickMode(value){_sceneInputManager.InputManager.ExclusiveDoubleClickMode=
value}bindEyePosition(effect,variableName="vEyePosition",isVector3=!1){var _a;const eyePosition=this._forcedViewPosition?this._forcedViewPosition:this._mirroredCameraPosition?this._mirroredCameraPosition:null!==(_a=this.activeCamera.globalPosition)&&void 0!==_a?_a:this.activeCamera.devicePosition;_mathVector.TmpVectors.Vector4[0].set(eyePosition.x,eyePosition.y,eyePosition.z,this.useRightHandedSystem===(null!=this._mirroredCameraPosition)?-1:1);effect&&(isVector3?effect.setFloat3(variableName,_mathVector.TmpVectors.Vector4[0].x,
_mathVector.TmpVectors.Vector4[0].y,_mathVector.TmpVectors.Vector4[0].z):effect.setVector4(variableName,_mathVector.TmpVectors.Vector4[0]));return _mathVector.TmpVectors.Vector4[0]}finalizeSceneUbo(){const ubo=this.getSceneUniformBuffer(),eyePosition=this.bindEyePosition(null);ubo.updateFloat4("vEyePosition",eyePosition.x,eyePosition.y,eyePosition.z,eyePosition.w);ubo.update();return ubo}set useRightHandedSystem(value){this._useRightHandedSystem!==value&&(this._useRightHandedSystem=value,this.markAllMaterialsAsDirty(16))}get useRightHandedSystem(){return this._useRightHandedSystem}setStepId(newStepId){this._currentStepId=
newStepId}getStepId(){return this._currentStepId}getInternalStep(){return this._currentInternalStep}set fogEnabled(value){this._fogEnabled!==value&&(this._fogEnabled=value,this.markAllMaterialsAsDirty(16))}get fogEnabled(){return this._fogEnabled}set fogMode(value){this._fogMode!==value&&(this._fogMode=value,this.markAllMaterialsAsDirty(16))}get fogMode(){return this._fogMode}get prePass(){return!!this.prePassRenderer&&this.prePassRenderer.defaultRT.enabled}set shadowsEnabled(value){this._shadowsEnabled!==
value&&(this._shadowsEnabled=value,this.markAllMaterialsAsDirty(2))}get shadowsEnabled(){return this._shadowsEnabled}set lightsEnabled(value){this._lightsEnabled!==value&&(this._lightsEnabled=value,this.markAllMaterialsAsDirty(2))}get lightsEnabled(){return this._lightsEnabled}get activeCameras(){return this._activeCameras}set activeCameras(cameras){this._unObserveActiveCameras&&(this._unObserveActiveCameras(),this._unObserveActiveCameras=null);cameras&&(this._unObserveActiveCameras=(0,_arrayTools._ObserveArray)(cameras,
()=>{this.onActiveCamerasChanged.notifyObservers(this)}));this._activeCameras=cameras}get activeCamera(){return this._activeCamera}set activeCamera(value){value!==this._activeCamera&&(this._activeCamera=value,this.onActiveCameraChanged.notifyObservers(this))}get defaultMaterial(){this._defaultMaterial||(this._defaultMaterial=Scene.DefaultMaterialFactory(this));return this._defaultMaterial}set defaultMaterial(value){this._defaultMaterial=value}set texturesEnabled(value){this._texturesEnabled!==value&&
(this._texturesEnabled=value,this.markAllMaterialsAsDirty(1))}get texturesEnabled(){return this._texturesEnabled}set skeletonsEnabled(value){this._skeletonsEnabled!==value&&(this._skeletonsEnabled=value,this.markAllMaterialsAsDirty(8))}get skeletonsEnabled(){return this._skeletonsEnabled}get collisionCoordinator(){this._collisionCoordinator||(this._collisionCoordinator=Scene.CollisionCoordinatorFactory(),this._collisionCoordinator.init(this));return this._collisionCoordinator}get renderingManager(){return this._renderingManager}get frustumPlanes(){return this._frustumPlanes}_registerTransientComponents(){if(0<
this._transientComponents.length){for(const component of this._transientComponents)component.register();this._transientComponents.length=0}}_addComponent(component){this._components.push(component);this._transientComponents.push(component);component.addFromContainer&&component.serialize&&this._serializableComponents.push(component)}_getComponent(name){for(const component of this._components)if(component.name===name)return component;return null}constructor(engine,options){super();this._inputManager=
new _sceneInputManager.InputManager(this);this.cameraToUseForPointers=null;this._isScene=!0;this._blockEntityCollection=!1;this.autoClearDepthAndStencil=this.autoClear=!0;this.clearColor=new _mathColor.Color4(.2,.2,.3,1);this.ambientColor=new _mathColor.Color3(0,0,0);this.environmentIntensity=1;this._performancePriority=ScenePerformancePriority.BackwardCompatible;this.onScenePerformancePriorityChangedObservable=new _observable.Observable;this._forcePointsCloud=this._skipFrustumClipping=this._forceWireframe=
!1;this.animationsEnabled=!0;this._animationPropertiesOverride=null;this.constantlyUpdateMeshUnderPointer=this.useConstantAnimationDeltaTime=!1;this.hoverCursor="pointer";this.defaultCursor="";this.doNotHandleCursors=!1;this.preventDefaultOnPointerUp=this.preventDefaultOnPointerDown=!0;this.reservedDataStore=this.metadata=null;this.disableOfflineSupportExceptionRules=[];this.onDisposeObservable=new _observable.Observable;this._onDisposeObserver=null;this.onBeforeRenderObservable=new _observable.Observable;
this._onBeforeRenderObserver=null;this.onAfterRenderObservable=new _observable.Observable;this.onAfterRenderCameraObservable=new _observable.Observable;this._onAfterRenderObserver=null;this.onBeforeAnimationsObservable=new _observable.Observable;this.onAfterAnimationsObservable=new _observable.Observable;this.onBeforeDrawPhaseObservable=new _observable.Observable;this.onAfterDrawPhaseObservable=new _observable.Observable;this.onReadyObservable=new _observable.Observable;this.onBeforeCameraRenderObservable=
new _observable.Observable;this._onBeforeCameraRenderObserver=null;this.onAfterCameraRenderObservable=new _observable.Observable;this._onAfterCameraRenderObserver=null;this.onBeforeActiveMeshesEvaluationObservable=new _observable.Observable;this.onAfterActiveMeshesEvaluationObservable=new _observable.Observable;this.onBeforeParticlesRenderingObservable=new _observable.Observable;this.onAfterParticlesRenderingObservable=new _observable.Observable;this.onDataLoadedObservable=new _observable.Observable;
this.onNewCameraAddedObservable=new _observable.Observable;this.onCameraRemovedObservable=new _observable.Observable;this.onNewLightAddedObservable=new _observable.Observable;this.onLightRemovedObservable=new _observable.Observable;this.onNewGeometryAddedObservable=new _observable.Observable;this.onGeometryRemovedObservable=new _observable.Observable;this.onNewTransformNodeAddedObservable=new _observable.Observable;this.onTransformNodeRemovedObservable=new _observable.Observable;this.onNewMeshAddedObservable=
new _observable.Observable;this.onMeshRemovedObservable=new _observable.Observable;this.onNewSkeletonAddedObservable=new _observable.Observable;this.onSkeletonRemovedObservable=new _observable.Observable;this.onNewMaterialAddedObservable=new _observable.Observable;this.onNewMultiMaterialAddedObservable=new _observable.Observable;this.onMaterialRemovedObservable=new _observable.Observable;this.onMultiMaterialRemovedObservable=new _observable.Observable;this.onNewTextureAddedObservable=new _observable.Observable;
this.onTextureRemovedObservable=new _observable.Observable;this.onBeforeRenderTargetsRenderObservable=new _observable.Observable;this.onAfterRenderTargetsRenderObservable=new _observable.Observable;this.onBeforeStepObservable=new _observable.Observable;this.onAfterStepObservable=new _observable.Observable;this.onActiveCameraChanged=new _observable.Observable;this.onActiveCamerasChanged=new _observable.Observable;this.onBeforeRenderingGroupObservable=new _observable.Observable;this.onAfterRenderingGroupObservable=
new _observable.Observable;this.onMeshImportedObservable=new _observable.Observable;this.onAnimationFileImportedObservable=new _observable.Observable;this._registeredForLateAnimationBindings=new _smartArray.SmartArrayNoDuplicate(256);this._pointerPickingConfiguration=new _pointerPickingConfiguration.PointerPickingConfiguration;this.onPrePointerObservable=new _observable.Observable;this.onPointerObservable=new _observable.Observable;this.onPreKeyboardObservable=new _observable.Observable;this.onKeyboardObservable=
new _observable.Observable;this._useRightHandedSystem=!1;this._currentInternalStep=this._currentStepId=this._timeAccumulator=0;this._fogEnabled=!0;this._fogMode=Scene.FOGMODE_NONE;this.fogColor=new _mathColor.Color3(.2,.2,.3);this.fogDensity=.1;this.fogStart=0;this.fogEnd=1E3;this.needsPreviousWorldMatrices=!1;this._lightsEnabled=this._shadowsEnabled=!0;this._unObserveActiveCameras=null;this.collisionsEnabled=this.lensFlaresEnabled=this._skeletonsEnabled=this.spritesEnabled=this.particlesEnabled=
this.physicsEnabled=this._texturesEnabled=!0;this.gravity=new _mathVector.Vector3(0,-9.807,0);this.renderTargetsEnabled=this.postProcessesEnabled=!0;this.dumpNextRenderTargets=!1;this.customRenderTargets=[];this.importedMeshesFiles=[];this.probesEnabled=!0;this._meshesForIntersections=new _smartArray.SmartArrayNoDuplicate(256);this.proceduralTexturesEnabled=!0;this._totalVertices=new _perfCounter.PerfCounter;this._activeIndices=new _perfCounter.PerfCounter;this._activeParticles=new _perfCounter.PerfCounter;
this._activeBones=new _perfCounter.PerfCounter;this._animationTime=0;this.animationTimeScale=1;this._frameId=this._renderId=0;this._executeWhenReadyTimeoutId=null;this._defaultFrameBufferCleared=this._intermediateRendering=!1;this._projectionUpdateFlag=this._viewUpdateFlag=-1;this._toBeDisposed=Array(256);this._activeRequests=[];this._pendingData=[];this.dispatchAllSubMeshesOfActiveMeshes=this._isDisposed=!1;this._activeMeshes=new _smartArray.SmartArray(256);this._processedMaterials=new _smartArray.SmartArray(256);
this._renderTargets=new _smartArray.SmartArrayNoDuplicate(256);this._materialsRenderTargets=new _smartArray.SmartArrayNoDuplicate(256);this._activeParticleSystems=new _smartArray.SmartArray(256);this._activeSkeletons=new _smartArray.SmartArrayNoDuplicate(32);this._softwareSkinnedMeshes=new _smartArray.SmartArrayNoDuplicate(32);this._activeAnimatables=[];this._transformMatrix=_mathVector.Matrix.Zero();this.requireLightSorting=!1;this._components=[];this._serializableComponents=[];this._transientComponents=
[];this._beforeCameraUpdateStage=_sceneComponent.Stage.Create();this._beforeClearStage=_sceneComponent.Stage.Create();this._beforeRenderTargetClearStage=_sceneComponent.Stage.Create();this._gatherRenderTargetsStage=_sceneComponent.Stage.Create();this._gatherActiveCameraRenderTargetsStage=_sceneComponent.Stage.Create();this._isReadyForMeshStage=_sceneComponent.Stage.Create();this._beforeEvaluateActiveMeshStage=_sceneComponent.Stage.Create();this._evaluateSubMeshStage=_sceneComponent.Stage.Create();
this._preActiveMeshStage=_sceneComponent.Stage.Create();this._cameraDrawRenderTargetStage=_sceneComponent.Stage.Create();this._beforeCameraDrawStage=_sceneComponent.Stage.Create();this._beforeRenderTargetDrawStage=_sceneComponent.Stage.Create();this._beforeRenderingGroupDrawStage=_sceneComponent.Stage.Create();this._beforeRenderingMeshStage=_sceneComponent.Stage.Create();this._afterRenderingMeshStage=_sceneComponent.Stage.Create();this._afterRenderingGroupDrawStage=_sceneComponent.Stage.Create();
this._afterCameraDrawStage=_sceneComponent.Stage.Create();this._afterCameraPostProcessStage=_sceneComponent.Stage.Create();this._afterRenderTargetDrawStage=_sceneComponent.Stage.Create();this._afterRenderTargetPostProcessStage=_sceneComponent.Stage.Create();this._afterRenderStage=_sceneComponent.Stage.Create();this._pointerMoveStage=_sceneComponent.Stage.Create();this._pointerDownStage=_sceneComponent.Stage.Create();this._pointerUpStage=_sceneComponent.Stage.Create();this._geometriesByUniqueId=null;
this._defaultMeshCandidates={data:[],length:0};this._defaultSubMeshCandidates={data:[],length:0};this._skipEvaluateActiveMeshesCompletely=this._activeMeshesFrozenButKeepClipping=this._activeMeshesFrozen=this._preventFreeActiveMeshesAndRenderingGroups=!1;this._allowPostProcessClearColor=!0;this.getDeterministicFrameTime=()=>this._engine.getTimeStep();this._registeredActions=0;this._blockMaterialDirtyMechanism=!1;this._perfCollector=null;this.activeCameras=[];const fullOptions=Object.assign({useGeometryUniqueIdsMap:!0,
useMaterialMeshMap:!0,useClonedMeshMap:!0,virtual:!1},options);this._engine=engine||_engineStore.EngineStore.LastCreatedEngine;fullOptions.virtual?this._engine._virtualScenes.push(this):(_engineStore.EngineStore._LastCreatedScene=this,this._engine.scenes.push(this));this._uid=null;this._renderingManager=new _renderingManager.RenderingManager(this);_postProcessManager.PostProcessManager&&(this.postProcessManager=new _postProcessManager.PostProcessManager(this));(0,_domManagement.IsWindowObjectExist)()&&
this.attachControl();this._createUbo();_imageProcessingConfiguration.ImageProcessingConfiguration&&(this._imageProcessingConfiguration=new _imageProcessingConfiguration.ImageProcessingConfiguration);this.setDefaultCandidateProviders();fullOptions.useGeometryUniqueIdsMap&&(this._geometriesByUniqueId={});this.useMaterialMeshMap=fullOptions.useMaterialMeshMap;this.useClonedMeshMap=fullOptions.useClonedMeshMap;options&&options.virtual||this._engine.onNewSceneAddedObservable.notifyObservers(this)}getClassName(){return"Scene"}_getDefaultMeshCandidates(){this._defaultMeshCandidates.data=
this.meshes;this._defaultMeshCandidates.length=this.meshes.length;return this._defaultMeshCandidates}_getDefaultSubMeshCandidates(mesh){this._defaultSubMeshCandidates.data=mesh.subMeshes;this._defaultSubMeshCandidates.length=mesh.subMeshes.length;return this._defaultSubMeshCandidates}setDefaultCandidateProviders(){this.getActiveMeshCandidates=this._getDefaultMeshCandidates.bind(this);this.getActiveSubMeshCandidates=this._getDefaultSubMeshCandidates.bind(this);this.getIntersectingSubMeshCandidates=
this._getDefaultSubMeshCandidates.bind(this);this.getCollidingSubMeshCandidates=this._getDefaultSubMeshCandidates.bind(this)}get meshUnderPointer(){return this._inputManager.meshUnderPointer}get pointerX(){return this._inputManager.pointerX}set pointerX(value){this._inputManager.pointerX=value}get pointerY(){return this._inputManager.pointerY}set pointerY(value){this._inputManager.pointerY=value}getCachedMaterial(){return this._cachedMaterial}getCachedEffect(){return this._cachedEffect}getCachedVisibility(){return this._cachedVisibility}isCachedMaterialInvalid(material,
effect,visibility=1){return this._cachedEffect!==effect||this._cachedMaterial!==material||this._cachedVisibility!==visibility}getEngine(){return this._engine}getTotalVertices(){return this._totalVertices.current}get totalVerticesPerfCounter(){return this._totalVertices}getActiveIndices(){return this._activeIndices.current}get totalActiveIndicesPerfCounter(){return this._activeIndices}getActiveParticles(){return this._activeParticles.current}get activeParticlesPerfCounter(){return this._activeParticles}getActiveBones(){return this._activeBones.current}get activeBonesPerfCounter(){return this._activeBones}getActiveMeshes(){return this._activeMeshes}getAnimationRatio(){return void 0!==
this._animationRatio?this._animationRatio:1}getRenderId(){return this._renderId}getFrameId(){return this._frameId}incrementRenderId(){this._renderId++}_createUbo(){this.setSceneUniformBuffer(this.createSceneUniformBuffer())}simulatePointerMove(pickResult,pointerEventInit){this._inputManager.simulatePointerMove(pickResult,pointerEventInit);return this}simulatePointerDown(pickResult,pointerEventInit){this._inputManager.simulatePointerDown(pickResult,pointerEventInit);return this}simulatePointerUp(pickResult,
pointerEventInit,doubleTap){this._inputManager.simulatePointerUp(pickResult,pointerEventInit,doubleTap);return this}isPointerCaptured(pointerId=0){return this._inputManager.isPointerCaptured(pointerId)}attachControl(attachUp=!0,attachDown=!0,attachMove=!0){this._inputManager.attachControl(attachUp,attachDown,attachMove)}detachControl(){this._inputManager.detachControl()}isReady(checkRenderTargets=!0){var _a,_b,_c;if(this._isDisposed)return!1;const engine=this.getEngine(),currentRenderPassId=engine.currentRenderPassId;
engine.currentRenderPassId=null!==(_b=null===(_a=this.activeCamera)||void 0===_a?void 0:_a.renderPassId)&&void 0!==_b?_b:currentRenderPassId;_a=!0;0<this._pendingData.length&&(_a=!1);null===(_c=this.prePassRenderer)||void 0===_c?void 0:_c.update();checkRenderTargets&&(this._processedMaterials.reset(),this._materialsRenderTargets.reset());for(_c=0;_c<this.meshes.length;_c++)if(_b=this.meshes[_c],_b.subMeshes&&0!==_b.subMeshes.length)if(_b.isReady(!0)){var hardwareInstancedRendering=_b.hasThinInstances||
"InstancedMesh"===_b.getClassName()||"InstancedLinesMesh"===_b.getClassName()||engine.getCaps().instancedArrays&&0<_b.instances.length;for(const step of this._isReadyForMeshStage)step.action(_b,hardwareInstancedRendering)||(_a=!1);if(checkRenderTargets&&(hardwareInstancedRendering=_b.material||this.defaultMaterial))if(hardwareInstancedRendering._storeEffectOnSubMeshes)for(const subMesh of _b.subMeshes)(_b=subMesh.getMaterial())&&_b.hasRenderTargetTextures&&null!=_b.getRenderTargetTextures&&-1===this._processedMaterials.indexOf(_b)&&
(this._processedMaterials.push(_b),this._materialsRenderTargets.concatWithNoDuplicate(_b.getRenderTargetTextures()));else hardwareInstancedRendering.hasRenderTargetTextures&&null!=hardwareInstancedRendering.getRenderTargetTextures&&-1===this._processedMaterials.indexOf(hardwareInstancedRendering)&&(this._processedMaterials.push(hardwareInstancedRendering),this._materialsRenderTargets.concatWithNoDuplicate(hardwareInstancedRendering.getRenderTargetTextures()))}else _a=!1;if(checkRenderTargets)for(_c=
0;_c<this._materialsRenderTargets.length;++_c)this._materialsRenderTargets.data[_c].isReadyForRendering()||(_a=!1);for(_c=0;_c<this.geometries.length;_c++)2===this.geometries[_c].delayLoadState&&(_a=!1);if(this.activeCameras&&0<this.activeCameras.length)for(const camera of this.activeCameras)camera.isReady(!0)||(_a=!1);else this.activeCamera&&(this.activeCamera.isReady(!0)||(_a=!1));for(const particleSystem of this.particleSystems)particleSystem.isReady()||(_a=!1);if(this.layers)for(const layer of this.layers)layer.isReady()||
(_a=!1);engine.areAllEffectsReady()||(_a=!1);engine.currentRenderPassId=currentRenderPassId;return _a}resetCachedMaterial(){this._cachedVisibility=this._cachedEffect=this._cachedMaterial=null}registerBeforeRender(func){this.onBeforeRenderObservable.add(func)}unregisterBeforeRender(func){this.onBeforeRenderObservable.removeCallback(func)}registerAfterRender(func){this.onAfterRenderObservable.add(func)}unregisterAfterRender(func){this.onAfterRenderObservable.removeCallback(func)}_executeOnceBeforeRender(func){const execFunc=
()=>{func();setTimeout(()=>{this.unregisterBeforeRender(execFunc)})};this.registerBeforeRender(execFunc)}executeOnceBeforeRender(func,timeout){void 0!==timeout?setTimeout(()=>{this._executeOnceBeforeRender(func)},timeout):this._executeOnceBeforeRender(func)}addPendingData(data){this._pendingData.push(data)}removePendingData(data){const wasLoading=this.isLoading;data=this._pendingData.indexOf(data);-1!==data&&this._pendingData.splice(data,1);wasLoading&&!this.isLoading&&this.onDataLoadedObservable.notifyObservers(this)}getWaitingItemsCount(){return this._pendingData.length}get isLoading(){return 0<
this._pendingData.length}executeWhenReady(func,checkRenderTargets=!1){this.onReadyObservable.addOnce(func);null===this._executeWhenReadyTimeoutId&&this._checkIsReady(checkRenderTargets)}whenReadyAsync(checkRenderTargets=!1){return new Promise(resolve=>{this.executeWhenReady(()=>{resolve()},checkRenderTargets)})}_checkIsReady(checkRenderTargets=!1){this._registerTransientComponents();this.isReady(checkRenderTargets)?(this.onReadyObservable.notifyObservers(this),this.onReadyObservable.clear(),this._executeWhenReadyTimeoutId=
null):this._isDisposed?(this.onReadyObservable.clear(),this._executeWhenReadyTimeoutId=null):this._executeWhenReadyTimeoutId=setTimeout(()=>{this.incrementRenderId();this._checkIsReady(checkRenderTargets)},100)}get animatables(){return this._activeAnimatables}resetLastAnimationTimeFrame(){this._animationTimeLast=_precisionDate.PrecisionDate.Now}getViewMatrix(){return this._viewMatrix}getProjectionMatrix(){return this._projectionMatrix}getTransformMatrix(){return this._transformMatrix}setTransformMatrix(viewL,
projectionL,viewR,projectionR){viewR||projectionR||!this._multiviewSceneUbo||(this._multiviewSceneUbo.dispose(),this._multiviewSceneUbo=null);if(this._viewUpdateFlag!==viewL.updateFlag||this._projectionUpdateFlag!==projectionL.updateFlag)this._viewUpdateFlag=viewL.updateFlag,this._projectionUpdateFlag=projectionL.updateFlag,this._viewMatrix=viewL,this._projectionMatrix=projectionL,this._viewMatrix.multiplyToRef(this._projectionMatrix,this._transformMatrix),this._frustumPlanes?_mathFrustum.Frustum.GetPlanesToRef(this._transformMatrix,
this._frustumPlanes):this._frustumPlanes=_mathFrustum.Frustum.GetPlanes(this._transformMatrix),this._multiviewSceneUbo&&this._multiviewSceneUbo.useUbo?this._updateMultiviewUbo(viewR,projectionR):this._sceneUbo.useUbo&&(this._sceneUbo.updateMatrix("viewProjection",this._transformMatrix),this._sceneUbo.updateMatrix("view",this._viewMatrix),this._sceneUbo.updateMatrix("projection",this._projectionMatrix))}getSceneUniformBuffer(){return this._multiviewSceneUbo?this._multiviewSceneUbo:this._sceneUbo}createSceneUniformBuffer(name){name=
new _uniformBuffer.UniformBuffer(this._engine,void 0,!1,null!==name&&void 0!==name?name:"scene");name.addUniform("viewProjection",16);name.addUniform("view",16);name.addUniform("projection",16);name.addUniform("vEyePosition",4);return name}setSceneUniformBuffer(ubo){this._sceneUbo=ubo;this._projectionUpdateFlag=this._viewUpdateFlag=-1}getUniqueId(){return _uniqueIdGenerator.UniqueIdGenerator.UniqueId}addMesh(newMesh,recursive=!1){this._blockEntityCollection||(this.meshes.push(newMesh),newMesh._resyncLightSources(),
newMesh.parent||newMesh._addToSceneRootNodes(),this.onNewMeshAddedObservable.notifyObservers(newMesh),recursive&&newMesh.getChildMeshes().forEach(m=>{this.addMesh(m)}))}removeMesh(toRemove,recursive=!1){const index=this.meshes.indexOf(toRemove);-1!==index&&(this.meshes[index]=this.meshes[this.meshes.length-1],this.meshes.pop(),toRemove.parent||toRemove._removeFromSceneRootNodes());this._inputManager._invalidateMesh(toRemove);this.onMeshRemovedObservable.notifyObservers(toRemove);recursive&&toRemove.getChildMeshes().forEach(m=>
{this.removeMesh(m)});return index}addTransformNode(newTransformNode){this._blockEntityCollection||newTransformNode.getScene()===this&&-1!==newTransformNode._indexInSceneTransformNodesArray||(newTransformNode._indexInSceneTransformNodesArray=this.transformNodes.length,this.transformNodes.push(newTransformNode),newTransformNode.parent||newTransformNode._addToSceneRootNodes(),this.onNewTransformNodeAddedObservable.notifyObservers(newTransformNode))}removeTransformNode(toRemove){const index=toRemove._indexInSceneTransformNodesArray;
if(-1!==index){if(index!==this.transformNodes.length-1){const lastNode=this.transformNodes[this.transformNodes.length-1];this.transformNodes[index]=lastNode;lastNode._indexInSceneTransformNodesArray=index}toRemove._indexInSceneTransformNodesArray=-1;this.transformNodes.pop();toRemove.parent||toRemove._removeFromSceneRootNodes()}this.onTransformNodeRemovedObservable.notifyObservers(toRemove);return index}removeSkeleton(toRemove){const index=this.skeletons.indexOf(toRemove);-1!==index&&(this.skeletons.splice(index,
1),this.onSkeletonRemovedObservable.notifyObservers(toRemove),this._executeActiveContainerCleanup(this._activeSkeletons));return index}removeMorphTargetManager(toRemove){toRemove=this.morphTargetManagers.indexOf(toRemove);-1!==toRemove&&this.morphTargetManagers.splice(toRemove,1);return toRemove}removeLight(toRemove){const index=this.lights.indexOf(toRemove);if(-1!==index){for(const mesh of this.meshes)mesh._removeLightSource(toRemove,!1);this.lights.splice(index,1);this.sortLightsByPriority();toRemove.parent||
toRemove._removeFromSceneRootNodes()}this.onLightRemovedObservable.notifyObservers(toRemove);return index}removeCamera(toRemove){const index=this.cameras.indexOf(toRemove);-1!==index&&(this.cameras.splice(index,1),toRemove.parent||toRemove._removeFromSceneRootNodes());if(this.activeCameras){const index2=this.activeCameras.indexOf(toRemove);-1!==index2&&this.activeCameras.splice(index2,1)}this.activeCamera===toRemove&&(this.activeCamera=0<this.cameras.length?this.cameras[0]:null);this.onCameraRemovedObservable.notifyObservers(toRemove);
return index}removeParticleSystem(toRemove){toRemove=this.particleSystems.indexOf(toRemove);-1!==toRemove&&(this.particleSystems.splice(toRemove,1),this._executeActiveContainerCleanup(this._activeParticleSystems));return toRemove}removeAnimation(toRemove){toRemove=this.animations.indexOf(toRemove);-1!==toRemove&&this.animations.splice(toRemove,1);return toRemove}stopAnimation(target,animationName,targetMask){}removeAnimationGroup(toRemove){toRemove=this.animationGroups.indexOf(toRemove);-1!==toRemove&&
this.animationGroups.splice(toRemove,1);return toRemove}removeMultiMaterial(toRemove){const index=this.multiMaterials.indexOf(toRemove);-1!==index&&this.multiMaterials.splice(index,1);this.onMultiMaterialRemovedObservable.notifyObservers(toRemove);return index}removeMaterial(toRemove){const index=toRemove._indexInSceneMaterialArray;if(-1!==index&&index<this.materials.length){if(index!==this.materials.length-1){const lastMaterial=this.materials[this.materials.length-1];this.materials[index]=lastMaterial;
lastMaterial._indexInSceneMaterialArray=index}toRemove._indexInSceneMaterialArray=-1;this.materials.pop()}this.onMaterialRemovedObservable.notifyObservers(toRemove);return index}removeActionManager(toRemove){toRemove=this.actionManagers.indexOf(toRemove);-1!==toRemove&&this.actionManagers.splice(toRemove,1);return toRemove}removeTexture(toRemove){const index=this.textures.indexOf(toRemove);-1!==index&&this.textures.splice(index,1);this.onTextureRemovedObservable.notifyObservers(toRemove);return index}addLight(newLight){if(!this._blockEntityCollection){this.lights.push(newLight);
this.sortLightsByPriority();newLight.parent||newLight._addToSceneRootNodes();for(const mesh of this.meshes)-1===mesh.lightSources.indexOf(newLight)&&(mesh.lightSources.push(newLight),mesh._resyncLightSources());this.onNewLightAddedObservable.notifyObservers(newLight)}}sortLightsByPriority(){this.requireLightSorting&&this.lights.sort(_lightConstants.LightConstants.CompareLightsPriority)}addCamera(newCamera){this._blockEntityCollection||(this.cameras.push(newCamera),this.onNewCameraAddedObservable.notifyObservers(newCamera),
newCamera.parent||newCamera._addToSceneRootNodes())}addSkeleton(newSkeleton){this._blockEntityCollection||(this.skeletons.push(newSkeleton),this.onNewSkeletonAddedObservable.notifyObservers(newSkeleton))}addParticleSystem(newParticleSystem){this._blockEntityCollection||this.particleSystems.push(newParticleSystem)}addAnimation(newAnimation){this._blockEntityCollection||this.animations.push(newAnimation)}addAnimationGroup(newAnimationGroup){this._blockEntityCollection||this.animationGroups.push(newAnimationGroup)}addMultiMaterial(newMultiMaterial){this._blockEntityCollection||
(this.multiMaterials.push(newMultiMaterial),this.onNewMultiMaterialAddedObservable.notifyObservers(newMultiMaterial))}addMaterial(newMaterial){this._blockEntityCollection||newMaterial.getScene()===this&&-1!==newMaterial._indexInSceneMaterialArray||(newMaterial._indexInSceneMaterialArray=this.materials.length,this.materials.push(newMaterial),this.onNewMaterialAddedObservable.notifyObservers(newMaterial))}addMorphTargetManager(newMorphTargetManager){this._blockEntityCollection||this.morphTargetManagers.push(newMorphTargetManager)}addGeometry(newGeometry){this._blockEntityCollection||
(this._geometriesByUniqueId&&(this._geometriesByUniqueId[newGeometry.uniqueId]=this.geometries.length),this.geometries.push(newGeometry))}addActionManager(newActionManager){this.actionManagers.push(newActionManager)}addTexture(newTexture){this._blockEntityCollection||(this.textures.push(newTexture),this.onNewTextureAddedObservable.notifyObservers(newTexture))}switchActiveCamera(newCamera,attachControl=!0){this._engine.getInputElement()&&(this.activeCamera&&this.activeCamera.detachControl(),this.activeCamera=
newCamera,attachControl&&newCamera.attachControl())}setActiveCameraById(id){return(id=this.getCameraById(id))?this.activeCamera=id:null}setActiveCameraByName(name){return(name=this.getCameraByName(name))?this.activeCamera=name:null}getAnimationGroupByName(name){for(let index=0;index<this.animationGroups.length;index++)if(this.animationGroups[index].name===name)return this.animationGroups[index];return null}_getMaterial(allowMultiMaterials,predicate){for(var index=0;index<this.materials.length;index++){const material=
this.materials[index];if(predicate(material))return material}if(allowMultiMaterials)for(allowMultiMaterials=0;allowMultiMaterials<this.multiMaterials.length;allowMultiMaterials++)if(index=this.multiMaterials[allowMultiMaterials],predicate(index))return index;return null}getMaterialByUniqueID(uniqueId,allowMultiMaterials=!1){return this._getMaterial(allowMultiMaterials,m=>m.uniqueId===uniqueId)}getMaterialById(id,allowMultiMaterials=!1){return this._getMaterial(allowMultiMaterials,m=>m.id===id)}getMaterialByName(name,
allowMultiMaterials=!1){return this._getMaterial(allowMultiMaterials,m=>m.name===name)}getLastMaterialById(id,allowMultiMaterials=!1){for(let index=this.materials.length-1;0<=index;index--)if(this.materials[index].id===id)return this.materials[index];if(allowMultiMaterials)for(allowMultiMaterials=this.multiMaterials.length-1;0<=allowMultiMaterials;allowMultiMaterials--)if(this.multiMaterials[allowMultiMaterials].id===id)return this.multiMaterials[allowMultiMaterials];return null}getTextureByUniqueId(uniqueId){for(let index=
0;index<this.textures.length;index++)if(this.textures[index].uniqueId===uniqueId)return this.textures[index];return null}getTextureByName(name){for(let index=0;index<this.textures.length;index++)if(this.textures[index].name===name)return this.textures[index];return null}getCameraById(id){for(let index=0;index<this.cameras.length;index++)if(this.cameras[index].id===id)return this.cameras[index];return null}getCameraByUniqueId(uniqueId){for(let index=0;index<this.cameras.length;index++)if(this.cameras[index].uniqueId===
uniqueId)return this.cameras[index];return null}getCameraByName(name){for(let index=0;index<this.cameras.length;index++)if(this.cameras[index].name===name)return this.cameras[index];return null}getBoneById(id){for(let skeletonIndex=0;skeletonIndex<this.skeletons.length;skeletonIndex++){const skeleton=this.skeletons[skeletonIndex];for(let boneIndex=0;boneIndex<skeleton.bones.length;boneIndex++)if(skeleton.bones[boneIndex].id===id)return skeleton.bones[boneIndex]}return null}getBoneByName(name){for(let skeletonIndex=
0;skeletonIndex<this.skeletons.length;skeletonIndex++){const skeleton=this.skeletons[skeletonIndex];for(let boneIndex=0;boneIndex<skeleton.bones.length;boneIndex++)if(skeleton.bones[boneIndex].name===name)return skeleton.bones[boneIndex]}return null}getLightByName(name){for(let index=0;index<this.lights.length;index++)if(this.lights[index].name===name)return this.lights[index];return null}getLightById(id){for(let index=0;index<this.lights.length;index++)if(this.lights[index].id===id)return this.lights[index];
return null}getLightByUniqueId(uniqueId){for(let index=0;index<this.lights.length;index++)if(this.lights[index].uniqueId===uniqueId)return this.lights[index];return null}getParticleSystemById(id){for(let index=0;index<this.particleSystems.length;index++)if(this.particleSystems[index].id===id)return this.particleSystems[index];return null}getGeometryById(id){for(let index=0;index<this.geometries.length;index++)if(this.geometries[index].id===id)return this.geometries[index];return null}_getGeometryByUniqueId(uniqueId){if(this._geometriesByUniqueId){if(uniqueId=
this._geometriesByUniqueId[uniqueId],void 0!==uniqueId)return this.geometries[uniqueId]}else for(let index=0;index<this.geometries.length;index++)if(this.geometries[index].uniqueId===uniqueId)return this.geometries[index];return null}pushGeometry(geometry,force){if(!force&&this._getGeometryByUniqueId(geometry.uniqueId))return!1;this.addGeometry(geometry);this.onNewGeometryAddedObservable.notifyObservers(geometry);return!0}removeGeometry(geometry){let index;if(this._geometriesByUniqueId){if(index=
this._geometriesByUniqueId[geometry.uniqueId],void 0===index)return!1}else if(index=this.geometries.indexOf(geometry),0>index)return!1;if(index!==this.geometries.length-1){const lastGeometry=this.geometries[this.geometries.length-1];lastGeometry&&(this.geometries[index]=lastGeometry,this._geometriesByUniqueId&&(this._geometriesByUniqueId[lastGeometry.uniqueId]=index))}this._geometriesByUniqueId&&(this._geometriesByUniqueId[geometry.uniqueId]=void 0);this.geometries.pop();this.onGeometryRemovedObservable.notifyObservers(geometry);
return!0}getGeometries(){return this.geometries}getMeshById(id){for(let index=0;index<this.meshes.length;index++)if(this.meshes[index].id===id)return this.meshes[index];return null}getMeshesById(id){return this.meshes.filter(function(m){return m.id===id})}getTransformNodeById(id){for(let index=0;index<this.transformNodes.length;index++)if(this.transformNodes[index].id===id)return this.transformNodes[index];return null}getTransformNodeByUniqueId(uniqueId){for(let index=0;index<this.transformNodes.length;index++)if(this.transformNodes[index].uniqueId===
uniqueId)return this.transformNodes[index];return null}getTransformNodesById(id){return this.transformNodes.filter(function(m){return m.id===id})}getMeshByUniqueId(uniqueId){for(let index=0;index<this.meshes.length;index++)if(this.meshes[index].uniqueId===uniqueId)return this.meshes[index];return null}getLastMeshById(id){for(let index=this.meshes.length-1;0<=index;index--)if(this.meshes[index].id===id)return this.meshes[index];return null}getLastEntryById(id){let index;for(index=this.meshes.length-
1;0<=index;index--)if(this.meshes[index].id===id)return this.meshes[index];for(index=this.transformNodes.length-1;0<=index;index--)if(this.transformNodes[index].id===id)return this.transformNodes[index];for(index=this.cameras.length-1;0<=index;index--)if(this.cameras[index].id===id)return this.cameras[index];for(index=this.lights.length-1;0<=index;index--)if(this.lights[index].id===id)return this.lights[index];return null}getNodeById(id){var mesh=this.getMeshById(id);return mesh||(mesh=this.getTransformNodeById(id))||
(mesh=this.getLightById(id))||(mesh=this.getCameraById(id))?mesh:(id=this.getBoneById(id))?id:null}getNodeByName(name){var mesh=this.getMeshByName(name);return mesh||(mesh=this.getTransformNodeByName(name))||(mesh=this.getLightByName(name))||(mesh=this.getCameraByName(name))?mesh:(name=this.getBoneByName(name))?name:null}getMeshByName(name){for(let index=0;index<this.meshes.length;index++)if(this.meshes[index].name===name)return this.meshes[index];return null}getTransformNodeByName(name){for(let index=
0;index<this.transformNodes.length;index++)if(this.transformNodes[index].name===name)return this.transformNodes[index];return null}getLastSkeletonById(id){for(let index=this.skeletons.length-1;0<=index;index--)if(this.skeletons[index].id===id)return this.skeletons[index];return null}getSkeletonByUniqueId(uniqueId){for(let index=0;index<this.skeletons.length;index++)if(this.skeletons[index].uniqueId===uniqueId)return this.skeletons[index];return null}getSkeletonById(id){for(let index=0;index<this.skeletons.length;index++)if(this.skeletons[index].id===
id)return this.skeletons[index];return null}getSkeletonByName(name){for(let index=0;index<this.skeletons.length;index++)if(this.skeletons[index].name===name)return this.skeletons[index];return null}getMorphTargetManagerById(id){for(let index=0;index<this.morphTargetManagers.length;index++)if(this.morphTargetManagers[index].uniqueId===id)return this.morphTargetManagers[index];return null}getMorphTargetById(id){for(let managerIndex=0;managerIndex<this.morphTargetManagers.length;++managerIndex){const morphTargetManager=
this.morphTargetManagers[managerIndex];for(let index=0;index<morphTargetManager.numTargets;++index){const target=morphTargetManager.getTarget(index);if(target.id===id)return target}}return null}getMorphTargetByName(name){for(let managerIndex=0;managerIndex<this.morphTargetManagers.length;++managerIndex){const morphTargetManager=this.morphTargetManagers[managerIndex];for(let index=0;index<morphTargetManager.numTargets;++index){const target=morphTargetManager.getTarget(index);if(target.name===name)return target}}return null}getPostProcessByName(name){for(let postProcessIndex=
0;postProcessIndex<this.postProcesses.length;++postProcessIndex){const postProcess=this.postProcesses[postProcessIndex];if(postProcess.name===name)return postProcess}return null}isActiveMesh(mesh){return-1!==this._activeMeshes.indexOf(mesh)}get uid(){this._uid||(this._uid=_tools.Tools.RandomId());return this._uid}addExternalData(key,data){this._externalData||(this._externalData=new _stringDictionary.StringDictionary);return this._externalData.add(key,data)}getExternalData(key){return this._externalData?
this._externalData.get(key):null}getOrAddExternalDataWithFactory(key,factory){this._externalData||(this._externalData=new _stringDictionary.StringDictionary);return this._externalData.getOrAddWithFactory(key,factory)}removeExternalData(key){return this._externalData.remove(key)}_evaluateSubMesh(subMesh,mesh,initialMesh,forcePush){if(forcePush||subMesh.isInFrustum(this._frustumPlanes)){for(const step of this._evaluateSubMeshStage)step.action(mesh,subMesh);initialMesh=subMesh.getMaterial();null!==initialMesh&&
void 0!==initialMesh&&(initialMesh.hasRenderTargetTextures&&null!=initialMesh.getRenderTargetTextures&&-1===this._processedMaterials.indexOf(initialMesh)&&(this._processedMaterials.push(initialMesh),this._materialsRenderTargets.concatWithNoDuplicate(initialMesh.getRenderTargetTextures())),this._renderingManager.dispatch(subMesh,mesh,initialMesh))}}freeProcessedMaterials(){this._processedMaterials.dispose()}get blockfreeActiveMeshesAndRenderingGroups(){return this._preventFreeActiveMeshesAndRenderingGroups}set blockfreeActiveMeshesAndRenderingGroups(value){this._preventFreeActiveMeshesAndRenderingGroups!==
value&&(value&&(this.freeActiveMeshes(),this.freeRenderingGroups()),this._preventFreeActiveMeshesAndRenderingGroups=value)}freeActiveMeshes(){if(!this.blockfreeActiveMeshesAndRenderingGroups&&(this._activeMeshes.dispose(),this.activeCamera&&this.activeCamera._activeMeshes&&this.activeCamera._activeMeshes.dispose(),this.activeCameras))for(let i=0;i<this.activeCameras.length;i++){const activeCamera=this.activeCameras[i];activeCamera&&activeCamera._activeMeshes&&activeCamera._activeMeshes.dispose()}}freeRenderingGroups(){if(!this.blockfreeActiveMeshesAndRenderingGroups&&
(this._renderingManager&&this._renderingManager.freeRenderingGroups(),this.textures))for(let i=0;i<this.textures.length;i++){const texture=this.textures[i];texture&&texture.renderList&&texture.freeRenderingGroups()}}_isInIntermediateRendering(){return this._intermediateRendering}freezeActiveMeshes(skipEvaluateActiveMeshes=!1,onSuccess,onError,freezeMeshes=!0,keepFrustumCulling=!1){this.executeWhenReady(()=>{if(this.activeCamera){this._frustumPlanes||this.updateTransformMatrix();this._evaluateActiveMeshes();
this._activeMeshesFrozen=!0;this._activeMeshesFrozenButKeepClipping=keepFrustumCulling;this._skipEvaluateActiveMeshesCompletely=skipEvaluateActiveMeshes;if(freezeMeshes)for(let index=0;index<this._activeMeshes.length;index++)this._activeMeshes.data[index]._freeze();onSuccess&&onSuccess()}else onError&&onError("No active camera found")});return this}unfreezeActiveMeshes(){for(var index=0;index<this.meshes.length;index++){const mesh=this.meshes[index];mesh._internalAbstractMeshDataInfo&&(mesh._internalAbstractMeshDataInfo._isActive=
!1)}for(index=0;index<this._activeMeshes.length;index++)this._activeMeshes.data[index]._unFreeze();this._activeMeshesFrozen=!1;return this}_executeActiveContainerCleanup(container){(this._engine.snapshotRendering&&1===this._engine.snapshotRenderingMode||!this._activeMeshesFrozen||!this._activeMeshes.length)&&this.onBeforeRenderObservable.addOnce(()=>container.dispose())}_evaluateActiveMeshes(){var _a;if(this._engine.snapshotRendering&&1===this._engine.snapshotRenderingMode)0<this._activeMeshes.length&&
(null===(_a=this.activeCamera)||void 0===_a?void 0:_a._activeMeshes.reset(),this._activeMeshes.reset(),this._renderingManager.reset(),this._processedMaterials.reset(),this._activeParticleSystems.reset(),this._activeSkeletons.reset(),this._softwareSkinnedMeshes.reset());else if(this._activeMeshesFrozen&&this._activeMeshes.length){if(!this._skipEvaluateActiveMeshesCompletely){var len=this._activeMeshes.length;for(_a=0;_a<len;_a++)this._activeMeshes.data[_a].computeWorldMatrix()}if(this._activeParticleSystems)for(len=
this._activeParticleSystems.length,_a=0;_a<len;_a++)this._activeParticleSystems.data[_a].animate();this._renderingManager.resetSprites()}else if(this.activeCamera){this.onBeforeActiveMeshesEvaluationObservable.notifyObservers(this);this.activeCamera._activeMeshes.reset();this._activeMeshes.reset();this._renderingManager.reset();this._processedMaterials.reset();this._activeParticleSystems.reset();this._activeSkeletons.reset();this._softwareSkinnedMeshes.reset();this._materialsRenderTargets.reset();
for(var step of this._beforeEvaluateActiveMeshStage)step.action();_a=this.getActiveMeshCandidates();step=_a.length;for(let i=0;i<step;i++){const mesh=_a.data[i];mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate=!1;if(mesh.isBlocked)continue;this._totalVertices.addCount(mesh.getTotalVertices(),!1);if(!mesh.isReady()||!mesh.isEnabled()||mesh.scaling.hasAZeroComponent)continue;mesh.computeWorldMatrix();mesh.actionManager&&mesh.actionManager.hasSpecificTriggers2(12,13)&&this._meshesForIntersections.pushNoDuplicate(mesh);
let meshToRender=this.customLODSelector?this.customLODSelector(mesh,this.activeCamera):mesh.getLOD(this.activeCamera);mesh._internalAbstractMeshDataInfo._currentLOD=meshToRender;mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate=!0;if(void 0!==meshToRender&&null!==meshToRender&&(meshToRender!==mesh&&0!==meshToRender.billboardMode&&meshToRender.computeWorldMatrix(),mesh._preActivate(),mesh.isVisible&&0<mesh.visibility&&0!==(mesh.layerMask&this.activeCamera.layerMask)&&(this._skipFrustumClipping||
mesh.alwaysSelectAsActiveMesh||mesh.isInFrustum(this._frustumPlanes)))){this._activeMeshes.push(mesh);this.activeCamera._activeMeshes.push(mesh);meshToRender!==mesh&&meshToRender._activate(this._renderId,!1);for(len of this._preActiveMeshStage)len.action(mesh);mesh._activate(this._renderId,!1)&&(mesh.isAnInstance?mesh._internalAbstractMeshDataInfo._actAsRegularMesh&&(meshToRender=mesh):meshToRender._internalAbstractMeshDataInfo._onlyForInstances=!1,meshToRender._internalAbstractMeshDataInfo._isActive=
!0,this._activeMesh(mesh,meshToRender));mesh._postActivate()}}this.onAfterActiveMeshesEvaluationObservable.notifyObservers(this);if(this.particlesEnabled){this.onBeforeParticlesRenderingObservable.notifyObservers(this);for(len=0;len<this.particleSystems.length;len++)if(_a=this.particleSystems[len],_a.isStarted()&&_a.emitter&&(step=_a.emitter,!step.position||step.isEnabled()))this._activeParticleSystems.push(_a),_a.animate(),this._renderingManager.dispatchParticles(_a);this.onAfterParticlesRenderingObservable.notifyObservers(this)}}}_activeMesh(sourceMesh,
mesh){this._skeletonsEnabled&&null!==mesh.skeleton&&void 0!==mesh.skeleton&&(this._activeSkeletons.pushNoDuplicate(mesh.skeleton)&&(mesh.skeleton.prepare(),this._activeBones.addCount(mesh.skeleton.bones.length,!1)),mesh.computeBonesUsingShaders||this._softwareSkinnedMeshes.pushNoDuplicate(mesh));let forcePush=sourceMesh.hasInstances||sourceMesh.isAnInstance||this.dispatchAllSubMeshesOfActiveMeshes||this._skipFrustumClipping||mesh.alwaysSelectAsActiveMesh;if(mesh&&mesh.subMeshes&&0<mesh.subMeshes.length){const subMeshes=
this.getActiveSubMeshCandidates(mesh),len=subMeshes.length;forcePush=forcePush||1===len;for(let i=0;i<len;i++)this._evaluateSubMesh(subMeshes.data[i],mesh,sourceMesh,forcePush)}}updateTransformMatrix(force){if(this.activeCamera)if(this.activeCamera._renderingMultiview){const leftCamera=this.activeCamera._rigCameras[0],rightCamera=this.activeCamera._rigCameras[1];this.setTransformMatrix(leftCamera.getViewMatrix(),leftCamera.getProjectionMatrix(force),rightCamera.getViewMatrix(),rightCamera.getProjectionMatrix(force))}else this.setTransformMatrix(this.activeCamera.getViewMatrix(),
this.activeCamera.getProjectionMatrix(force))}_bindFrameBuffer(camera,clear=!0){camera&&camera._multiviewTexture?camera._multiviewTexture._bindFrameBuffer():camera&&camera.outputRenderTarget?camera.outputRenderTarget._bindFrameBuffer():this._engine._currentFrameBufferIsDefaultFrameBuffer()||this._engine.restoreDefaultFramebuffer();clear&&this._clearFrameBuffer(camera)}_clearFrameBuffer(camera){camera&&camera._multiviewTexture||(camera&&camera.outputRenderTarget&&!camera._renderingMultiview?(camera=
camera.outputRenderTarget,camera.onClearObservable.hasObservers()?camera.onClearObservable.notifyObservers(this._engine):camera.skipInitialClear||(this.autoClear&&this._engine.clear(camera.clearColor||this.clearColor,!camera._cleared,!0,!0),camera._cleared=!0)):this._defaultFrameBufferCleared?this._engine.clear(null,!1,!0,!0):(this._defaultFrameBufferCleared=!0,this._clear()))}_renderForCamera(camera,rigParent,bindFrameBuffer=!0){var _a,_b,_c;if(!camera||!camera._skipRendering){var engine=this._engine;
this._activeCamera=camera;if(!this.activeCamera)throw Error("Active camera not set");engine.setViewport(this.activeCamera.viewport);this.resetCachedMaterial();this._renderId++;!this.prePass&&bindFrameBuffer&&(bindFrameBuffer=!0,camera._renderingMultiview&&camera.outputRenderTarget&&(bindFrameBuffer=camera.outputRenderTarget.skipInitialClear,this.autoClear&&(this._defaultFrameBufferCleared=!1,camera.outputRenderTarget.skipInitialClear=!1)),this._bindFrameBuffer(this._activeCamera),camera._renderingMultiview&&
camera.outputRenderTarget&&(camera.outputRenderTarget.skipInitialClear=bindFrameBuffer));this.updateTransformMatrix();this.onBeforeCameraRenderObservable.notifyObservers(this.activeCamera);this._evaluateActiveMeshes();for(bindFrameBuffer=0;bindFrameBuffer<this._softwareSkinnedMeshes.length;bindFrameBuffer++){const mesh=this._softwareSkinnedMeshes.data[bindFrameBuffer];mesh.applySkeleton(mesh.skeleton)}this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);this._renderTargets.concatWithNoDuplicate(this._materialsRenderTargets);
camera.customRenderTargets&&0<camera.customRenderTargets.length&&this._renderTargets.concatWithNoDuplicate(camera.customRenderTargets);rigParent&&rigParent.customRenderTargets&&0<rigParent.customRenderTargets.length&&this._renderTargets.concatWithNoDuplicate(rigParent.customRenderTargets);this.environmentTexture&&this.environmentTexture.isRenderTarget&&this._renderTargets.pushNoDuplicate(this.environmentTexture);for(var step$jscomp$0 of this._gatherActiveCameraRenderTargetsStage)step$jscomp$0.action(this._renderTargets);
rigParent=!1;if(this.renderTargetsEnabled){this._intermediateRendering=!0;if(0<this._renderTargets.length){_tools.Tools.StartPerformanceCounter("Render targets",0<this._renderTargets.length);for(step$jscomp$0=0;step$jscomp$0<this._renderTargets.length;step$jscomp$0++)bindFrameBuffer=this._renderTargets.data[step$jscomp$0],bindFrameBuffer._shouldRender()&&(this._renderId++,bindFrameBuffer.render(bindFrameBuffer.activeCamera&&bindFrameBuffer.activeCamera!==this.activeCamera,this.dumpNextRenderTargets),
rigParent=!0);_tools.Tools.EndPerformanceCounter("Render targets",0<this._renderTargets.length);this._renderId++}for(const step of this._cameraDrawRenderTargetStage)rigParent=step.action(this.activeCamera)||rigParent;this._intermediateRendering=!1}this._engine.currentRenderPassId=null!==(_c=null!==(_b=null===(_a=camera.outputRenderTarget)||void 0===_a?void 0:_a.renderPassId)&&void 0!==_b?_b:camera.renderPassId)&&void 0!==_c?_c:0;rigParent&&!this.prePass&&this._bindFrameBuffer(this._activeCamera,!1);
this.onAfterRenderTargetsRenderObservable.notifyObservers(this);!this.postProcessManager||camera._multiviewTexture||this.prePass||this.postProcessManager._prepareFrame();for(const step of this._beforeCameraDrawStage)step.action(this.activeCamera);this.onBeforeDrawPhaseObservable.notifyObservers(this);engine.snapshotRendering&&1===engine.snapshotRenderingMode&&this.finalizeSceneUbo();this._renderingManager.render(null,null,!0,!0);this.onAfterDrawPhaseObservable.notifyObservers(this);for(const step of this._afterCameraDrawStage)step.action(this.activeCamera);
this.postProcessManager&&!camera._multiviewTexture&&this.postProcessManager._finalizeFrame(camera.isIntermediate,camera.outputRenderTarget?camera.outputRenderTarget.renderTarget:void 0);for(const step of this._afterCameraPostProcessStage)step.action(this.activeCamera);this._renderTargets.reset();this.onAfterCameraRenderObservable.notifyObservers(this.activeCamera)}}_processSubCameras(camera,bindFrameBuffer=!0){if(0===camera.cameraRigMode||camera._renderingMultiview)camera._renderingMultiview&&!this._multiviewSceneUbo&&
this._createMultiviewUbo(),this._renderForCamera(camera,void 0,bindFrameBuffer);else{if(camera._useMultiviewToSingleView)this._renderMultiviewToSingleView(camera);else for(this.onBeforeCameraRenderObservable.notifyObservers(camera),bindFrameBuffer=0;bindFrameBuffer<camera._rigCameras.length;bindFrameBuffer++)this._renderForCamera(camera._rigCameras[bindFrameBuffer],camera);this._activeCamera=camera;this.updateTransformMatrix()}this.onAfterRenderCameraObservable.notifyObservers(camera)}_checkIntersections(){for(let index=
0;index<this._meshesForIntersections.length;index++){const sourceMesh=this._meshesForIntersections.data[index];if(sourceMesh.actionManager)for(let actionIndex=0;sourceMesh.actionManager&&actionIndex<sourceMesh.actionManager.actions.length;actionIndex++){const action=sourceMesh.actionManager.actions[actionIndex];if(12===action.trigger||13===action.trigger){var parameters=action.getTriggerParameter();const otherMesh=parameters.mesh?parameters.mesh:parameters;parameters=otherMesh.intersectsMesh(sourceMesh,
parameters.usePreciseIntersection);const currentIntersectionInProgress=sourceMesh._intersectionsInProgress.indexOf(otherMesh);parameters&&-1===currentIntersectionInProgress?12===action.trigger?(action._executeCurrent(_actionEvent.ActionEvent.CreateNew(sourceMesh,void 0,otherMesh)),sourceMesh._intersectionsInProgress.push(otherMesh)):13===action.trigger&&sourceMesh._intersectionsInProgress.push(otherMesh):!parameters&&-1<currentIntersectionInProgress&&(13===action.trigger&&action._executeCurrent(_actionEvent.ActionEvent.CreateNew(sourceMesh,
void 0,otherMesh)),sourceMesh.actionManager.hasSpecificTrigger(13,parameter=>otherMesh===(parameter.mesh?parameter.mesh:parameter))&&13!==action.trigger||sourceMesh._intersectionsInProgress.splice(currentIntersectionInProgress,1))}}}}_advancePhysicsEngineStep(step){}_animate(){}animate(){if(this._engine.isDeterministicLockStep()){var deltaTime=Math.max(Scene.MinDeltaTime,Math.min(this._engine.getDeltaTime(),Scene.MaxDeltaTime))+this._timeAccumulator;const defaultFrameTime=this._engine.getTimeStep(),
defaultFPS=1E3/defaultFrameTime/1E3;let stepsTaken=0;const maxSubSteps=this._engine.getLockstepMaxSteps();let internalSteps=Math.floor(deltaTime/defaultFrameTime);for(internalSteps=Math.min(internalSteps,maxSubSteps);0<deltaTime&&stepsTaken<internalSteps;)this.onBeforeStepObservable.notifyObservers(this),this._animationRatio=defaultFrameTime*defaultFPS,this._animate(),this.onAfterAnimationsObservable.notifyObservers(this),this.physicsEnabled&&this._advancePhysicsEngineStep(defaultFrameTime),this.onAfterStepObservable.notifyObservers(this),
this._currentStepId++,stepsTaken++,deltaTime-=defaultFrameTime;this._timeAccumulator=0>deltaTime?0:deltaTime}else deltaTime=this.useConstantAnimationDeltaTime?16:Math.max(Scene.MinDeltaTime,Math.min(this._engine.getDeltaTime(),Scene.MaxDeltaTime)),this._animationRatio=.06*deltaTime,this._animate(),this.onAfterAnimationsObservable.notifyObservers(this),this.physicsEnabled&&this._advancePhysicsEngineStep(deltaTime)}_clear(){(this.autoClearDepthAndStencil||this.autoClear)&&this._engine.clear(this.clearColor,
this.autoClear||this.forceWireframe||this.forcePointsCloud,this.autoClearDepthAndStencil,this.autoClearDepthAndStencil)}_checkCameraRenderTarget(camera){var _a;null===camera||void 0===camera||!camera.outputRenderTarget||null!==camera&&void 0!==camera&&camera.isRigCamera||(camera.outputRenderTarget._cleared=!1);if(null===(_a=null===camera||void 0===camera?void 0:camera.rigCameras)||void 0===_a?0:_a.length)for(_a=0;_a<camera.rigCameras.length;++_a){const rtt=camera.rigCameras[_a].outputRenderTarget;
rtt&&(rtt._cleared=!1)}}resetDrawCache(passId){if(this.meshes)for(const mesh of this.meshes)mesh.resetDrawCache(passId)}render(updateCameras=!0,ignoreAnimations=!1){var _a,_b,_c;if(!this.isDisposed){this.onReadyObservable.hasObservers()&&null===this._executeWhenReadyTimeoutId&&this._checkIsReady();this._frameId++;this._defaultFrameBufferCleared=!1;this._checkCameraRenderTarget(this.activeCamera);(null===(_a=this.activeCameras)||void 0===_a?0:_a.length)&&this.activeCameras.forEach(this._checkCameraRenderTarget);
this._registerTransientComponents();this._activeParticles.fetchNewFrame();this._totalVertices.fetchNewFrame();this._activeIndices.fetchNewFrame();this._activeBones.fetchNewFrame();this._meshesForIntersections.reset();this.resetCachedMaterial();this.onBeforeAnimationsObservable.notifyObservers(this);this.actionManager&&this.actionManager.processTrigger(11);ignoreAnimations||this.animate();for(const step of this._beforeCameraUpdateStage)step.action();if(updateCameras)if(this.activeCameras&&0<this.activeCameras.length)for(updateCameras=
0;updateCameras<this.activeCameras.length;updateCameras++){if(ignoreAnimations=this.activeCameras[updateCameras],ignoreAnimations.update(),0!==ignoreAnimations.cameraRigMode)for(_a=0;_a<ignoreAnimations._rigCameras.length;_a++)ignoreAnimations._rigCameras[_a].update()}else if(this.activeCamera&&(this.activeCamera.update(),0!==this.activeCamera.cameraRigMode))for(updateCameras=0;updateCameras<this.activeCamera._rigCameras.length;updateCameras++)this.activeCamera._rigCameras[updateCameras].update();
this.onBeforeRenderObservable.notifyObservers(this);updateCameras=this.getEngine();this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);ignoreAnimations=(null===(_b=this.activeCameras)||void 0===_b?0:_b.length)?this.activeCameras[0]:this.activeCamera;if(this.renderTargetsEnabled){_tools.Tools.StartPerformanceCounter("Custom render targets",0<this.customRenderTargets.length);this._intermediateRendering=!0;for(_b=0;_b<this.customRenderTargets.length;_b++)if(_a=this.customRenderTargets[_b],
_a._shouldRender()){this._renderId++;this.activeCamera=_a.activeCamera||this.activeCamera;if(!this.activeCamera)throw Error("Active camera not set");updateCameras.setViewport(this.activeCamera.viewport);this.updateTransformMatrix();_a.render(ignoreAnimations!==this.activeCamera,this.dumpNextRenderTargets)}_tools.Tools.EndPerformanceCounter("Custom render targets",0<this.customRenderTargets.length);this._intermediateRendering=!1;this._renderId++}this._engine.currentRenderPassId=null!==(_c=null===ignoreAnimations||
void 0===ignoreAnimations?void 0:ignoreAnimations.renderPassId)&&void 0!==_c?_c:0;this.activeCamera=ignoreAnimations;this._activeCamera&&22!==this._activeCamera.cameraRigMode&&!this.prePass&&this._bindFrameBuffer(this._activeCamera,!1);this.onAfterRenderTargetsRenderObservable.notifyObservers(this);for(const step of this._beforeClearStage)step.action();this._clearFrameBuffer(this.activeCamera);for(const step of this._gatherRenderTargetsStage)step.action(this._renderTargets);if(this.activeCameras&&
0<this.activeCameras.length)for(_c=0;_c<this.activeCameras.length;_c++)this._processSubCameras(this.activeCameras[_c],0<_c);else{if(!this.activeCamera)throw Error("No camera defined");this._processSubCameras(this.activeCamera,!!this.activeCamera.outputRenderTarget)}this._checkIntersections();for(var step$jscomp$0 of this._afterRenderStage)step$jscomp$0.action();this.afterRender&&this.afterRender();this.onAfterRenderObservable.notifyObservers(this);if(this._toBeDisposed.length){for(step$jscomp$0=0;step$jscomp$0<
this._toBeDisposed.length;step$jscomp$0++)(_c=this._toBeDisposed[step$jscomp$0])&&_c.dispose();this._toBeDisposed.length=0}this.dumpNextRenderTargets&&(this.dumpNextRenderTargets=!1);this._activeBones.addCount(0,!0);this._activeIndices.addCount(0,!0);this._activeParticles.addCount(0,!0);this._engine.restoreDefaultFramebuffer()}}freezeMaterials(){for(let i=0;i<this.materials.length;i++)this.materials[i].freeze()}unfreezeMaterials(){for(let i=0;i<this.materials.length;i++)this.materials[i].unfreeze()}dispose(){if(!this.isDisposed){this.metadata=
this.afterRender=this.beforeRender=null;this.skeletons.length=0;this.morphTargetManagers.length=0;this._transientComponents.length=0;this._isReadyForMeshStage.clear();this._beforeEvaluateActiveMeshStage.clear();this._evaluateSubMeshStage.clear();this._preActiveMeshStage.clear();this._cameraDrawRenderTargetStage.clear();this._beforeCameraDrawStage.clear();this._beforeRenderTargetDrawStage.clear();this._beforeRenderingGroupDrawStage.clear();this._beforeRenderingMeshStage.clear();this._afterRenderingMeshStage.clear();
this._afterRenderingGroupDrawStage.clear();this._afterCameraDrawStage.clear();this._afterRenderTargetDrawStage.clear();this._afterRenderStage.clear();this._beforeCameraUpdateStage.clear();this._beforeClearStage.clear();this._gatherRenderTargetsStage.clear();this._gatherActiveCameraRenderTargetsStage.clear();this._pointerMoveStage.clear();this._pointerDownStage.clear();this._pointerUpStage.clear();this.importedMeshesFiles=[];this.stopAllAnimations&&this.stopAllAnimations();this.resetCachedMaterial();
this.activeCamera&&(this.activeCamera._activeMeshes.dispose(),this.activeCamera=null);this.activeCameras=null;this._activeMeshes.dispose();this._renderingManager.dispose();this._processedMaterials.dispose();this._activeParticleSystems.dispose();this._activeSkeletons.dispose();this._softwareSkinnedMeshes.dispose();this._renderTargets.dispose();this._materialsRenderTargets.dispose();this._registeredForLateAnimationBindings.dispose();this._meshesForIntersections.dispose();this._toBeDisposed.length=0;
var activeRequests=this._activeRequests.slice();for(const request of activeRequests)request.abort();this._activeRequests.length=0;try{this.onDisposeObservable.notifyObservers(this)}catch(e){console.error("An error occurred while calling onDisposeObservable!",e)}this.detachControl();if(this._engine.getInputElement())for(activeRequests=0;activeRequests<this.cameras.length;activeRequests++)this.cameras[activeRequests].detachControl();this._disposeList(this.animationGroups);this._disposeList(this.lights);
this._disposeList(this.meshes,item=>item.dispose(!0));this._disposeList(this.transformNodes,item=>item.dispose(!0));this._disposeList(this.cameras);this._defaultMaterial&&this._defaultMaterial.dispose();this._disposeList(this.multiMaterials);this._disposeList(this.materials);this._disposeList(this.particleSystems);this._disposeList(this.postProcesses);this._disposeList(this.textures);this._disposeList(this.morphTargetManagers);this._sceneUbo.dispose();this._multiviewSceneUbo&&this._multiviewSceneUbo.dispose();
this.postProcessManager.dispose();this._disposeList(this._components);activeRequests=this._engine.scenes.indexOf(this);-1<activeRequests&&this._engine.scenes.splice(activeRequests,1);_engineStore.EngineStore._LastCreatedScene===this&&(_engineStore.EngineStore._LastCreatedScene=0<this._engine.scenes.length?this._engine.scenes[this._engine.scenes.length-1]:null);activeRequests=this._engine._virtualScenes.indexOf(this);-1<activeRequests&&this._engine._virtualScenes.splice(activeRequests,1);this._engine.wipeCaches(!0);
this.onDisposeObservable.clear();this.onBeforeRenderObservable.clear();this.onAfterRenderObservable.clear();this.onBeforeRenderTargetsRenderObservable.clear();this.onAfterRenderTargetsRenderObservable.clear();this.onAfterStepObservable.clear();this.onBeforeStepObservable.clear();this.onBeforeActiveMeshesEvaluationObservable.clear();this.onAfterActiveMeshesEvaluationObservable.clear();this.onBeforeParticlesRenderingObservable.clear();this.onAfterParticlesRenderingObservable.clear();this.onBeforeDrawPhaseObservable.clear();
this.onAfterDrawPhaseObservable.clear();this.onBeforeAnimationsObservable.clear();this.onAfterAnimationsObservable.clear();this.onDataLoadedObservable.clear();this.onBeforeRenderingGroupObservable.clear();this.onAfterRenderingGroupObservable.clear();this.onMeshImportedObservable.clear();this.onBeforeCameraRenderObservable.clear();this.onAfterCameraRenderObservable.clear();this.onAfterRenderCameraObservable.clear();this.onReadyObservable.clear();this.onNewCameraAddedObservable.clear();this.onCameraRemovedObservable.clear();
this.onNewLightAddedObservable.clear();this.onLightRemovedObservable.clear();this.onNewGeometryAddedObservable.clear();this.onGeometryRemovedObservable.clear();this.onNewTransformNodeAddedObservable.clear();this.onTransformNodeRemovedObservable.clear();this.onNewMeshAddedObservable.clear();this.onMeshRemovedObservable.clear();this.onNewSkeletonAddedObservable.clear();this.onSkeletonRemovedObservable.clear();this.onNewMaterialAddedObservable.clear();this.onNewMultiMaterialAddedObservable.clear();this.onMaterialRemovedObservable.clear();
this.onMultiMaterialRemovedObservable.clear();this.onNewTextureAddedObservable.clear();this.onTextureRemovedObservable.clear();this.onPrePointerObservable.clear();this.onPointerObservable.clear();this.onPreKeyboardObservable.clear();this.onKeyboardObservable.clear();this.onActiveCameraChanged.clear();this.onScenePerformancePriorityChangedObservable.clear();this._isDisposed=!0}}_disposeList(items,callback){const itemsCopy=items.slice(0);callback=null!==callback&&void 0!==callback?callback:item=>item.dispose();
for(const item of itemsCopy)callback(item);items.length=0}get isDisposed(){return this._isDisposed}clearCachedVertexData(){for(let meshIndex=0;meshIndex<this.meshes.length;meshIndex++){const geometry=this.meshes[meshIndex].geometry;geometry&&geometry.clearCachedData()}}cleanCachedTextureBuffer(){for(const baseTexture of this.textures)baseTexture._buffer&&(baseTexture._buffer=null)}getWorldExtends(filterPredicate){const min=new _mathVector.Vector3(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),
max=new _mathVector.Vector3(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);this.meshes.filter(filterPredicate||(()=>!0)).forEach(mesh=>{mesh.computeWorldMatrix(!0);if(mesh.subMeshes&&0!==mesh.subMeshes.length&&!mesh.infiniteDistance){mesh=mesh.getBoundingInfo();var maxBox=mesh.boundingBox.maximumWorld;_mathVector.Vector3.CheckExtends(mesh.boundingBox.minimumWorld,min,max);_mathVector.Vector3.CheckExtends(maxBox,min,max)}});return{min,max}}createPickingRay(x,y,world,camera,cameraViewSpace){throw(0,_devTools._WarnImport)("Ray");
}createPickingRayToRef(x,y,world,result,camera,cameraViewSpace,enableDistantPicking){throw(0,_devTools._WarnImport)("Ray");}createPickingRayInCameraSpace(x,y,camera){throw(0,_devTools._WarnImport)("Ray");}createPickingRayInCameraSpaceToRef(x,y,result,camera){throw(0,_devTools._WarnImport)("Ray");}get _pickingAvailable(){return!1}pick(x,y,predicate,fastCheck,camera,trianglePredicate){return new _pickingInfo.PickingInfo}pickWithBoundingInfo(x,y,predicate,fastCheck,camera){return new _pickingInfo.PickingInfo}pickWithRay(ray,
predicate,fastCheck,trianglePredicate){throw(0,_devTools._WarnImport)("Ray");}multiPick(x,y,predicate,camera,trianglePredicate){throw(0,_devTools._WarnImport)("Ray");}multiPickWithRay(ray,predicate,trianglePredicate){throw(0,_devTools._WarnImport)("Ray");}setPointerOverMesh(mesh,pointerId,pickResult){this._inputManager.setPointerOverMesh(mesh,pointerId,pickResult)}getPointerOverMesh(){return this._inputManager.getPointerOverMesh()}_rebuildGeometries(){for(const geometry of this.geometries)geometry._rebuild();
for(const mesh of this.meshes)mesh._rebuild();this.postProcessManager&&this.postProcessManager._rebuild();for(const component of this._components)component.rebuild();for(const system of this.particleSystems)system.rebuild();if(this.spriteManagers)for(const spriteMgr of this.spriteManagers)spriteMgr.rebuild()}_rebuildTextures(){for(const texture of this.textures)texture._rebuild();this.markAllMaterialsAsDirty(1)}_getByTags(list,tagsQuery,forEach){if(void 0===tagsQuery)return list;const listByTags=
[];forEach=forEach||(item=>{});for(const i in list){const item=list[i];_tags.Tags&&_tags.Tags.MatchesQuery(item,tagsQuery)&&(listByTags.push(item),forEach(item))}return listByTags}getMeshesByTags(tagsQuery,forEach){return this._getByTags(this.meshes,tagsQuery,forEach)}getCamerasByTags(tagsQuery,forEach){return this._getByTags(this.cameras,tagsQuery,forEach)}getLightsByTags(tagsQuery,forEach){return this._getByTags(this.lights,tagsQuery,forEach)}getMaterialByTags(tagsQuery,forEach){return this._getByTags(this.materials,
tagsQuery,forEach).concat(this._getByTags(this.multiMaterials,tagsQuery,forEach))}getTransformNodesByTags(tagsQuery,forEach){return this._getByTags(this.transformNodes,tagsQuery,forEach)}setRenderingOrder(renderingGroupId,opaqueSortCompareFn=null,alphaTestSortCompareFn=null,transparentSortCompareFn=null){this._renderingManager.setRenderingOrder(renderingGroupId,opaqueSortCompareFn,alphaTestSortCompareFn,transparentSortCompareFn)}setRenderingAutoClearDepthStencil(renderingGroupId,autoClearDepthStencil,
depth=!0,stencil=!0){this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId,autoClearDepthStencil,depth,stencil)}getAutoClearDepthStencilSetup(index){return this._renderingManager.getAutoClearDepthStencilSetup(index)}get blockMaterialDirtyMechanism(){return this._blockMaterialDirtyMechanism}set blockMaterialDirtyMechanism(value){this._blockMaterialDirtyMechanism!==value&&((this._blockMaterialDirtyMechanism=value)||this.markAllMaterialsAsDirty(63))}markAllMaterialsAsDirty(flag,predicate){if(!this._blockMaterialDirtyMechanism)for(const material of this.materials)predicate&&
!predicate(material)||material.markAsDirty(flag)}_loadFile(fileOrUrl,onSuccess,onProgress,useOfflineSupport,useArrayBuffer,onError,onOpened){fileOrUrl=(0,_fileTools.LoadFile)(fileOrUrl,onSuccess,onProgress,useOfflineSupport?this.offlineProvider:void 0,useArrayBuffer,onError,onOpened);this._activeRequests.push(fileOrUrl);fileOrUrl.onCompleteObservable.add(request=>{this._activeRequests.splice(this._activeRequests.indexOf(request),1)});return fileOrUrl}_loadFileAsync(fileOrUrl,onProgress,useOfflineSupport,
useArrayBuffer,onOpened){return new Promise((resolve,reject)=>{this._loadFile(fileOrUrl,data=>{resolve(data)},onProgress,useOfflineSupport,useArrayBuffer,(request,exception)=>{reject(exception)},onOpened)})}_requestFile(url,onSuccess,onProgress,useOfflineSupport,useArrayBuffer,onError,onOpened){url=(0,_fileTools.RequestFile)(url,onSuccess,onProgress,useOfflineSupport?this.offlineProvider:void 0,useArrayBuffer,onError,onOpened);this._activeRequests.push(url);url.onCompleteObservable.add(request=>{this._activeRequests.splice(this._activeRequests.indexOf(request),
1)});return url}_requestFileAsync(url,onProgress,useOfflineSupport,useArrayBuffer,onOpened){return new Promise((resolve,reject)=>{this._requestFile(url,data=>{resolve(data)},onProgress,useOfflineSupport,useArrayBuffer,error=>{reject(error)},onOpened)})}_readFile(file,onSuccess,onProgress,useArrayBuffer,onError){file=(0,_fileTools.ReadFile)(file,onSuccess,onProgress,useArrayBuffer,onError);this._activeRequests.push(file);file.onCompleteObservable.add(request=>{this._activeRequests.splice(this._activeRequests.indexOf(request),
1)});return file}_readFileAsync(file,onProgress,useArrayBuffer){return new Promise((resolve,reject)=>{this._readFile(file,data=>{resolve(data)},onProgress,useArrayBuffer,error=>{reject(error)})})}getPerfCollector(){throw(0,_devTools._WarnImport)("performanceViewerSceneExtension");}setActiveCameraByID(id){return this.setActiveCameraById(id)}getMaterialByID(id){return this.getMaterialById(id)}getLastMaterialByID(id){return this.getLastMaterialById(id)}getTextureByUniqueID(uniqueId){return this.getTextureByUniqueId(uniqueId)}getCameraByID(id){return this.getCameraById(id)}getCameraByUniqueID(uniqueId){return this.getCameraByUniqueId(uniqueId)}getBoneByID(id){return this.getBoneById(id)}getLightByID(id){return this.getLightById(id)}getLightByUniqueID(uniqueId){return this.getLightByUniqueId(uniqueId)}getParticleSystemByID(id){return this.getParticleSystemById(id)}getGeometryByID(id){return this.getGeometryById(id)}getMeshByID(id){return this.getMeshById(id)}getMeshByUniqueID(uniqueId){return this.getMeshByUniqueId(uniqueId)}getLastMeshByID(id){return this.getLastMeshById(id)}getMeshesByID(id){return this.getMeshesById(id)}getTransformNodeByID(id){return this.getTransformNodeById(id)}getTransformNodeByUniqueID(uniqueId){return this.getTransformNodeByUniqueId(uniqueId)}getTransformNodesByID(id){return this.getTransformNodesById(id)}getNodeByID(id){return this.getNodeById(id)}getLastEntryByID(id){return this.getLastEntryById(id)}getLastSkeletonByID(id){return this.getLastSkeletonById(id)}}
exports.Scene=Scene;Scene.FOGMODE_NONE=0;Scene.FOGMODE_EXP=1;Scene.FOGMODE_EXP2=2;Scene.FOGMODE_LINEAR=3;Scene.MinDeltaTime=1;Scene.MaxDeltaTime=1E3}
//# sourceMappingURL=module$node_modules$$babylonjs$core$scene.js.map
