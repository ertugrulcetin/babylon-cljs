{
"version":3,
"file":"module$node_modules$$babylonjs$core$Engines$Processors$Expressions$Operators$shaderDefineArithmeticOperator.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,2GAAA,CAAgI,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxKC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,8BAAR,CAAyC,IAAK,EAE1CC,OAAAA,CAA0BP,OAAA,CAAQ,2FAAR,CAG9B,MAAMM,+BAAN,QAA6CC,OAAwBC,CAAAA,sBAArE,CACEC,WAAW,CAACC,MAAD,CAASC,OAAT,CAAkBC,SAAlB,CAA6B,CACtC,KAAA,EACA,KAAKF,CAAAA,MAAL;AAAcA,MACd,KAAKC,CAAAA,OAAL,CAAeA,OACf,KAAKC,CAAAA,SAAL,CAAiBA,SAJqB,CAOxCC,MAAM,CAACC,aAAD,CAAgB,CACpB,IAAIT,MAAQS,aAAA,CAAc,IAAKJ,CAAAA,MAAnB,CAEEK,KAAAA,EAAd,GAAIV,KAAJ,GACEA,KADF,CACU,IAAKK,CAAAA,MADf,CAIIM,cAAAA,CAAY,CAAA,CACVC,MAAAA,CAAOC,QAAA,CAASb,KAAT,CACb,OAAMc,MAAQD,QAAA,CAAS,IAAKN,CAAAA,SAAd,CAEd,QAAQ,IAAKD,CAAAA,OAAb,EACE,KAAK,MAAL,CACEK,aAAA,CAAYC,KAAZ,CAAmBE,KACnB,MAEF,MAAK,MAAL,CACEH,aAAA,CAAYC,KAAZ,CAAmBE,KACnB,MAEF,MAAK,UAAL,CACEH,aAAA,CAAYC,KAAZ,EAAoBE,KACpB,MAEF,MAAK,UAAL,CACEH,aAAA,CAAYC,KAAZ,EAAoBE,KACpB,MAEF,MAAK,UAAL,CACEH,aAAA,CAAYC,KAAZ,GAAqBE,KACrB,MAEF,MAAK,OAAL,CACEH,aAAA;AAAYC,KAAZ,GAAqBE,KAtBzB,CA0BA,MAAOH,cArCa,CARxB,CAkDAd,OAAQI,CAAAA,8BAAR,CAAyCA,8BA7D+H;",
"sources":["node_modules/@babylonjs/core/Engines/Processors/Expressions/Operators/shaderDefineArithmeticOperator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$babylonjs$core$Engines$Processors$Expressions$Operators$shaderDefineArithmeticOperator\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShaderDefineArithmeticOperator = void 0;\n\nvar _shaderDefineExpression = require(\"../shaderDefineExpression.js\");\n\n/** @internal */\nclass ShaderDefineArithmeticOperator extends _shaderDefineExpression.ShaderDefineExpression {\n  constructor(define, operand, testValue) {\n    super();\n    this.define = define;\n    this.operand = operand;\n    this.testValue = testValue;\n  }\n\n  isTrue(preprocessors) {\n    let value = preprocessors[this.define];\n\n    if (value === undefined) {\n      value = this.define;\n    }\n\n    let condition = false;\n    const left = parseInt(value);\n    const right = parseInt(this.testValue);\n\n    switch (this.operand) {\n      case \">\":\n        condition = left > right;\n        break;\n\n      case \"<\":\n        condition = left < right;\n        break;\n\n      case \"<=\":\n        condition = left <= right;\n        break;\n\n      case \">=\":\n        condition = left >= right;\n        break;\n\n      case \"==\":\n        condition = left === right;\n        break;\n\n      case \"!=\":\n        condition = left !== right;\n        break;\n    }\n\n    return condition;\n  }\n\n}\n\nexports.ShaderDefineArithmeticOperator = ShaderDefineArithmeticOperator;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ShaderDefineArithmeticOperator","_shaderDefineExpression","ShaderDefineExpression","constructor","define","operand","testValue","isTrue","preprocessors","undefined","condition","left","parseInt","right"]
}
